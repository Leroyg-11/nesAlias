import {
  require_jsx_runtime
} from "./chunk-ZYX7IIE4.js";
import {
  require_react
} from "./chunk-HS5T2ZWL.js";
import {
  __commonJS,
  __esm,
  __export,
  __require,
  __toCommonJS
} from "./chunk-AUZ3RYOM.js";

// node_modules/classnames/index.js
var require_classnames = __commonJS({
  "node_modules/classnames/index.js"(exports, module2) {
    (function() {
      "use strict";
      var hasOwn = {}.hasOwnProperty;
      var nativeCodeString = "[native code]";
      function classNames() {
        var classes = [];
        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (!arg)
            continue;
          var argType = typeof arg;
          if (argType === "string" || argType === "number") {
            classes.push(arg);
          } else if (Array.isArray(arg)) {
            if (arg.length) {
              var inner = classNames.apply(null, arg);
              if (inner) {
                classes.push(inner);
              }
            }
          } else if (argType === "object") {
            if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
              classes.push(arg.toString());
              continue;
            }
            for (var key in arg) {
              if (hasOwn.call(arg, key) && arg[key]) {
                classes.push(key);
              }
            }
          }
        }
        return classes.join(" ");
      }
      if (typeof module2 !== "undefined" && module2.exports) {
        classNames.default = classNames;
        module2.exports = classNames;
      } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define("classnames", [], function() {
          return classNames;
        });
      } else {
        window.classNames = classNames;
      }
    })();
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module2) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject2(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from2;
      var to2 = toObject2(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from2 = Object(arguments[s]);
        for (var key in from2) {
          if (hasOwnProperty.call(from2, key)) {
            to2[key] = from2[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from2);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from2, symbols[i])) {
              to2[symbols[i]] = from2[symbols[i]];
            }
          }
        }
      }
      return to2;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module2) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module2.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module2) {
    module2.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module2) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module2.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module2) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module2.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module2) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module2.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module2.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/react-fontawesome/lib/index.js
var require_lib = __commonJS({
  "node_modules/react-fontawesome/lib/index.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _propTypes = require_prop_types();
    var _propTypes2 = _interopRequireDefault(_propTypes);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _objectWithoutProperties(obj, keys2) {
      var target = {};
      for (var i in obj) {
        if (keys2.indexOf(i) >= 0)
          continue;
        if (!Object.prototype.hasOwnProperty.call(obj, i))
          continue;
        target[i] = obj[i];
      }
      return target;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self2, call) {
      if (!self2) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self2;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var FontAwesome = function(_React$Component) {
      _inherits(FontAwesome2, _React$Component);
      function FontAwesome2() {
        _classCallCheck(this, FontAwesome2);
        var _this = _possibleConstructorReturn(this, (FontAwesome2.__proto__ || Object.getPrototypeOf(FontAwesome2)).call(this));
        _this.displayName = "FontAwesome";
        return _this;
      }
      _createClass(FontAwesome2, [{
        key: "render",
        value: function render() {
          var _props = this.props, border = _props.border, cssModule = _props.cssModule, className = _props.className, fixedWidth = _props.fixedWidth, flip = _props.flip, inverse = _props.inverse, name = _props.name, pulse = _props.pulse, rotate = _props.rotate, size = _props.size, spin = _props.spin, stack = _props.stack, _props$tag = _props.tag, tag = _props$tag === void 0 ? "span" : _props$tag, ariaLabel = _props.ariaLabel, props = _objectWithoutProperties(_props, ["border", "cssModule", "className", "fixedWidth", "flip", "inverse", "name", "pulse", "rotate", "size", "spin", "stack", "tag", "ariaLabel"]);
          var ariaProps = ariaLabel ? { "aria-label": ariaLabel } : { "aria-hidden": true };
          var classNames = [];
          if (cssModule) {
            classNames.push(cssModule["fa"]);
            classNames.push(cssModule["fa-" + name]);
            size && classNames.push(cssModule["fa-" + size]);
            spin && classNames.push(cssModule["fa-spin"]);
            pulse && classNames.push(cssModule["fa-pulse"]);
            border && classNames.push(cssModule["fa-border"]);
            fixedWidth && classNames.push(cssModule["fa-fw"]);
            inverse && classNames.push(cssModule["fa-inverse"]);
            flip && classNames.push(cssModule["fa-flip-" + flip]);
            rotate && classNames.push(cssModule["fa-rotate-" + rotate]);
            stack && classNames.push(cssModule["fa-stack-" + stack]);
          } else {
            classNames.push("fa");
            classNames.push("fa-" + name);
            size && classNames.push("fa-" + size);
            spin && classNames.push("fa-spin");
            pulse && classNames.push("fa-pulse");
            border && classNames.push("fa-border");
            fixedWidth && classNames.push("fa-fw");
            inverse && classNames.push("fa-inverse");
            flip && classNames.push("fa-flip-" + flip);
            rotate && classNames.push("fa-rotate-" + rotate);
            stack && classNames.push("fa-stack-" + stack);
          }
          className && classNames.push(className);
          return _react2.default.createElement(tag, _extends({}, props, ariaProps, {
            className: classNames.join(" ")
          }));
        }
      }]);
      return FontAwesome2;
    }(_react2.default.Component);
    FontAwesome.propTypes = {
      ariaLabel: _propTypes2.default.string,
      border: _propTypes2.default.bool,
      className: _propTypes2.default.string,
      cssModule: _propTypes2.default.object,
      fixedWidth: _propTypes2.default.bool,
      flip: _propTypes2.default.oneOf(["horizontal", "vertical"]),
      inverse: _propTypes2.default.bool,
      name: _propTypes2.default.string.isRequired,
      pulse: _propTypes2.default.bool,
      rotate: _propTypes2.default.oneOf([90, 180, 270]),
      size: _propTypes2.default.oneOf(["lg", "2x", "3x", "4x", "5x"]),
      spin: _propTypes2.default.bool,
      stack: _propTypes2.default.oneOf(["1x", "2x"]),
      tag: _propTypes2.default.string
    };
    exports.default = FontAwesome;
    module2.exports = exports.default;
  }
});

// node_modules/moment/dist/moment.js
var moment_exports = {};
__export(moment_exports, {
  default: () => moment_default
});
function hooks() {
  return hookCallback.apply(null, arguments);
}
function setHookCallback(callback) {
  hookCallback = callback;
}
function isArray(input) {
  return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
}
function isObject(input) {
  return input != null && Object.prototype.toString.call(input) === "[object Object]";
}
function hasOwnProp(a, b) {
  return Object.prototype.hasOwnProperty.call(a, b);
}
function isObjectEmpty(obj) {
  if (Object.getOwnPropertyNames) {
    return Object.getOwnPropertyNames(obj).length === 0;
  } else {
    var k;
    for (k in obj) {
      if (hasOwnProp(obj, k)) {
        return false;
      }
    }
    return true;
  }
}
function isUndefined(input) {
  return input === void 0;
}
function isNumber(input) {
  return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
}
function isDate(input) {
  return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
}
function map(arr, fn) {
  var res = [], i, arrLen = arr.length;
  for (i = 0; i < arrLen; ++i) {
    res.push(fn(arr[i], i));
  }
  return res;
}
function extend(a, b) {
  for (var i in b) {
    if (hasOwnProp(b, i)) {
      a[i] = b[i];
    }
  }
  if (hasOwnProp(b, "toString")) {
    a.toString = b.toString;
  }
  if (hasOwnProp(b, "valueOf")) {
    a.valueOf = b.valueOf;
  }
  return a;
}
function createUTC(input, format2, locale2, strict) {
  return createLocalOrUTC(input, format2, locale2, strict, true).utc();
}
function defaultParsingFlags() {
  return {
    empty: false,
    unusedTokens: [],
    unusedInput: [],
    overflow: -2,
    charsLeftOver: 0,
    nullInput: false,
    invalidEra: null,
    invalidMonth: null,
    invalidFormat: false,
    userInvalidated: false,
    iso: false,
    parsedDateParts: [],
    era: null,
    meridiem: null,
    rfc2822: false,
    weekdayMismatch: false
  };
}
function getParsingFlags(m) {
  if (m._pf == null) {
    m._pf = defaultParsingFlags();
  }
  return m._pf;
}
function isValid(m) {
  if (m._isValid == null) {
    var flags = getParsingFlags(m), parsedParts = some.call(flags.parsedDateParts, function(i) {
      return i != null;
    }), isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
    if (m._strict) {
      isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
    }
    if (Object.isFrozen == null || !Object.isFrozen(m)) {
      m._isValid = isNowValid;
    } else {
      return isNowValid;
    }
  }
  return m._isValid;
}
function createInvalid(flags) {
  var m = createUTC(NaN);
  if (flags != null) {
    extend(getParsingFlags(m), flags);
  } else {
    getParsingFlags(m).userInvalidated = true;
  }
  return m;
}
function copyConfig(to2, from2) {
  var i, prop, val, momentPropertiesLen = momentProperties.length;
  if (!isUndefined(from2._isAMomentObject)) {
    to2._isAMomentObject = from2._isAMomentObject;
  }
  if (!isUndefined(from2._i)) {
    to2._i = from2._i;
  }
  if (!isUndefined(from2._f)) {
    to2._f = from2._f;
  }
  if (!isUndefined(from2._l)) {
    to2._l = from2._l;
  }
  if (!isUndefined(from2._strict)) {
    to2._strict = from2._strict;
  }
  if (!isUndefined(from2._tzm)) {
    to2._tzm = from2._tzm;
  }
  if (!isUndefined(from2._isUTC)) {
    to2._isUTC = from2._isUTC;
  }
  if (!isUndefined(from2._offset)) {
    to2._offset = from2._offset;
  }
  if (!isUndefined(from2._pf)) {
    to2._pf = getParsingFlags(from2);
  }
  if (!isUndefined(from2._locale)) {
    to2._locale = from2._locale;
  }
  if (momentPropertiesLen > 0) {
    for (i = 0; i < momentPropertiesLen; i++) {
      prop = momentProperties[i];
      val = from2[prop];
      if (!isUndefined(val)) {
        to2[prop] = val;
      }
    }
  }
  return to2;
}
function Moment(config) {
  copyConfig(this, config);
  this._d = new Date(config._d != null ? config._d.getTime() : NaN);
  if (!this.isValid()) {
    this._d = /* @__PURE__ */ new Date(NaN);
  }
  if (updateInProgress === false) {
    updateInProgress = true;
    hooks.updateOffset(this);
    updateInProgress = false;
  }
}
function isMoment(obj) {
  return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
}
function warn(msg) {
  if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
    console.warn("Deprecation warning: " + msg);
  }
}
function deprecate(msg, fn) {
  var firstTime = true;
  return extend(function() {
    if (hooks.deprecationHandler != null) {
      hooks.deprecationHandler(null, msg);
    }
    if (firstTime) {
      var args = [], arg, i, key, argLen = arguments.length;
      for (i = 0; i < argLen; i++) {
        arg = "";
        if (typeof arguments[i] === "object") {
          arg += "\n[" + i + "] ";
          for (key in arguments[0]) {
            if (hasOwnProp(arguments[0], key)) {
              arg += key + ": " + arguments[0][key] + ", ";
            }
          }
          arg = arg.slice(0, -2);
        } else {
          arg = arguments[i];
        }
        args.push(arg);
      }
      warn(
        msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack
      );
      firstTime = false;
    }
    return fn.apply(this, arguments);
  }, fn);
}
function deprecateSimple(name, msg) {
  if (hooks.deprecationHandler != null) {
    hooks.deprecationHandler(name, msg);
  }
  if (!deprecations[name]) {
    warn(msg);
    deprecations[name] = true;
  }
}
function isFunction(input) {
  return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
}
function set(config) {
  var prop, i;
  for (i in config) {
    if (hasOwnProp(config, i)) {
      prop = config[i];
      if (isFunction(prop)) {
        this[i] = prop;
      } else {
        this["_" + i] = prop;
      }
    }
  }
  this._config = config;
  this._dayOfMonthOrdinalParseLenient = new RegExp(
    (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
  );
}
function mergeConfigs(parentConfig, childConfig) {
  var res = extend({}, parentConfig), prop;
  for (prop in childConfig) {
    if (hasOwnProp(childConfig, prop)) {
      if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
        res[prop] = {};
        extend(res[prop], parentConfig[prop]);
        extend(res[prop], childConfig[prop]);
      } else if (childConfig[prop] != null) {
        res[prop] = childConfig[prop];
      } else {
        delete res[prop];
      }
    }
  }
  for (prop in parentConfig) {
    if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
      res[prop] = extend({}, res[prop]);
    }
  }
  return res;
}
function Locale(config) {
  if (config != null) {
    this.set(config);
  }
}
function calendar(key, mom, now2) {
  var output = this._calendar[key] || this._calendar["sameElse"];
  return isFunction(output) ? output.call(mom, now2) : output;
}
function zeroFill(number, targetLength, forceSign) {
  var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
  return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
}
function addFormatToken(token2, padded, ordinal2, callback) {
  var func = callback;
  if (typeof callback === "string") {
    func = function() {
      return this[callback]();
    };
  }
  if (token2) {
    formatTokenFunctions[token2] = func;
  }
  if (padded) {
    formatTokenFunctions[padded[0]] = function() {
      return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
    };
  }
  if (ordinal2) {
    formatTokenFunctions[ordinal2] = function() {
      return this.localeData().ordinal(
        func.apply(this, arguments),
        token2
      );
    };
  }
}
function removeFormattingTokens(input) {
  if (input.match(/\[[\s\S]/)) {
    return input.replace(/^\[|\]$/g, "");
  }
  return input.replace(/\\/g, "");
}
function makeFormatFunction(format2) {
  var array = format2.match(formattingTokens), i, length;
  for (i = 0, length = array.length; i < length; i++) {
    if (formatTokenFunctions[array[i]]) {
      array[i] = formatTokenFunctions[array[i]];
    } else {
      array[i] = removeFormattingTokens(array[i]);
    }
  }
  return function(mom) {
    var output = "", i2;
    for (i2 = 0; i2 < length; i2++) {
      output += isFunction(array[i2]) ? array[i2].call(mom, format2) : array[i2];
    }
    return output;
  };
}
function formatMoment(m, format2) {
  if (!m.isValid()) {
    return m.localeData().invalidDate();
  }
  format2 = expandFormat(format2, m.localeData());
  formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
  return formatFunctions[format2](m);
}
function expandFormat(format2, locale2) {
  var i = 5;
  function replaceLongDateFormatTokens(input) {
    return locale2.longDateFormat(input) || input;
  }
  localFormattingTokens.lastIndex = 0;
  while (i >= 0 && localFormattingTokens.test(format2)) {
    format2 = format2.replace(
      localFormattingTokens,
      replaceLongDateFormatTokens
    );
    localFormattingTokens.lastIndex = 0;
    i -= 1;
  }
  return format2;
}
function longDateFormat(key) {
  var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
  if (format2 || !formatUpper) {
    return format2;
  }
  this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
    if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
      return tok.slice(1);
    }
    return tok;
  }).join("");
  return this._longDateFormat[key];
}
function invalidDate() {
  return this._invalidDate;
}
function ordinal(number) {
  return this._ordinal.replace("%d", number);
}
function relativeTime(number, withoutSuffix, string, isFuture) {
  var output = this._relativeTime[string];
  return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
}
function pastFuture(diff2, output) {
  var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
  return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
}
function addUnitAlias(unit, shorthand) {
  var lowerCase = unit.toLowerCase();
  aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
}
function normalizeUnits(units) {
  return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
}
function normalizeObjectUnits(inputObject) {
  var normalizedInput = {}, normalizedProp, prop;
  for (prop in inputObject) {
    if (hasOwnProp(inputObject, prop)) {
      normalizedProp = normalizeUnits(prop);
      if (normalizedProp) {
        normalizedInput[normalizedProp] = inputObject[prop];
      }
    }
  }
  return normalizedInput;
}
function addUnitPriority(unit, priority) {
  priorities[unit] = priority;
}
function getPrioritizedUnits(unitsObj) {
  var units = [], u;
  for (u in unitsObj) {
    if (hasOwnProp(unitsObj, u)) {
      units.push({ unit: u, priority: priorities[u] });
    }
  }
  units.sort(function(a, b) {
    return a.priority - b.priority;
  });
  return units;
}
function isLeapYear(year) {
  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
}
function absFloor(number) {
  if (number < 0) {
    return Math.ceil(number) || 0;
  } else {
    return Math.floor(number);
  }
}
function toInt(argumentForCoercion) {
  var coercedNumber = +argumentForCoercion, value = 0;
  if (coercedNumber !== 0 && isFinite(coercedNumber)) {
    value = absFloor(coercedNumber);
  }
  return value;
}
function makeGetSet(unit, keepTime) {
  return function(value) {
    if (value != null) {
      set$1(this, unit, value);
      hooks.updateOffset(this, keepTime);
      return this;
    } else {
      return get(this, unit);
    }
  };
}
function get(mom, unit) {
  return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
}
function set$1(mom, unit, value) {
  if (mom.isValid() && !isNaN(value)) {
    if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
      value = toInt(value);
      mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](
        value,
        mom.month(),
        daysInMonth(value, mom.month())
      );
    } else {
      mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
    }
  }
}
function stringGet(units) {
  units = normalizeUnits(units);
  if (isFunction(this[units])) {
    return this[units]();
  }
  return this;
}
function stringSet(units, value) {
  if (typeof units === "object") {
    units = normalizeObjectUnits(units);
    var prioritized = getPrioritizedUnits(units), i, prioritizedLen = prioritized.length;
    for (i = 0; i < prioritizedLen; i++) {
      this[prioritized[i].unit](units[prioritized[i].unit]);
    }
  } else {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
      return this[units](value);
    }
  }
  return this;
}
function addRegexToken(token2, regex, strictRegex) {
  regexes[token2] = isFunction(regex) ? regex : function(isStrict, localeData2) {
    return isStrict && strictRegex ? strictRegex : regex;
  };
}
function getParseRegexForToken(token2, config) {
  if (!hasOwnProp(regexes, token2)) {
    return new RegExp(unescapeFormat(token2));
  }
  return regexes[token2](config._strict, config._locale);
}
function unescapeFormat(s) {
  return regexEscape(
    s.replace("\\", "").replace(
      /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
      function(matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
      }
    )
  );
}
function regexEscape(s) {
  return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
}
function addParseToken(token2, callback) {
  var i, func = callback, tokenLen;
  if (typeof token2 === "string") {
    token2 = [token2];
  }
  if (isNumber(callback)) {
    func = function(input, array) {
      array[callback] = toInt(input);
    };
  }
  tokenLen = token2.length;
  for (i = 0; i < tokenLen; i++) {
    tokens[token2[i]] = func;
  }
}
function addWeekParseToken(token2, callback) {
  addParseToken(token2, function(input, array, config, token3) {
    config._w = config._w || {};
    callback(input, config._w, config, token3);
  });
}
function addTimeToArrayFromToken(token2, input, config) {
  if (input != null && hasOwnProp(tokens, token2)) {
    tokens[token2](input, config._a, config, token2);
  }
}
function mod(n, x) {
  return (n % x + x) % x;
}
function daysInMonth(year, month) {
  if (isNaN(year) || isNaN(month)) {
    return NaN;
  }
  var modMonth = mod(month, 12);
  year += (month - modMonth) / 12;
  return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
}
function localeMonths(m, format2) {
  if (!m) {
    return isArray(this._months) ? this._months : this._months["standalone"];
  }
  return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m.month()];
}
function localeMonthsShort(m, format2) {
  if (!m) {
    return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
  }
  return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m.month()];
}
function handleStrictParse(monthName, format2, strict) {
  var i, ii, mom, llc = monthName.toLocaleLowerCase();
  if (!this._monthsParse) {
    this._monthsParse = [];
    this._longMonthsParse = [];
    this._shortMonthsParse = [];
    for (i = 0; i < 12; ++i) {
      mom = createUTC([2e3, i]);
      this._shortMonthsParse[i] = this.monthsShort(
        mom,
        ""
      ).toLocaleLowerCase();
      this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
    }
  }
  if (strict) {
    if (format2 === "MMM") {
      ii = indexOf.call(this._shortMonthsParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._longMonthsParse, llc);
      return ii !== -1 ? ii : null;
    }
  } else {
    if (format2 === "MMM") {
      ii = indexOf.call(this._shortMonthsParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._longMonthsParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._longMonthsParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortMonthsParse, llc);
      return ii !== -1 ? ii : null;
    }
  }
}
function localeMonthsParse(monthName, format2, strict) {
  var i, mom, regex;
  if (this._monthsParseExact) {
    return handleStrictParse.call(this, monthName, format2, strict);
  }
  if (!this._monthsParse) {
    this._monthsParse = [];
    this._longMonthsParse = [];
    this._shortMonthsParse = [];
  }
  for (i = 0; i < 12; i++) {
    mom = createUTC([2e3, i]);
    if (strict && !this._longMonthsParse[i]) {
      this._longMonthsParse[i] = new RegExp(
        "^" + this.months(mom, "").replace(".", "") + "$",
        "i"
      );
      this._shortMonthsParse[i] = new RegExp(
        "^" + this.monthsShort(mom, "").replace(".", "") + "$",
        "i"
      );
    }
    if (!strict && !this._monthsParse[i]) {
      regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
      this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
    }
    if (strict && format2 === "MMMM" && this._longMonthsParse[i].test(monthName)) {
      return i;
    } else if (strict && format2 === "MMM" && this._shortMonthsParse[i].test(monthName)) {
      return i;
    } else if (!strict && this._monthsParse[i].test(monthName)) {
      return i;
    }
  }
}
function setMonth(mom, value) {
  var dayOfMonth;
  if (!mom.isValid()) {
    return mom;
  }
  if (typeof value === "string") {
    if (/^\d+$/.test(value)) {
      value = toInt(value);
    } else {
      value = mom.localeData().monthsParse(value);
      if (!isNumber(value)) {
        return mom;
      }
    }
  }
  dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
  mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
  return mom;
}
function getSetMonth(value) {
  if (value != null) {
    setMonth(this, value);
    hooks.updateOffset(this, true);
    return this;
  } else {
    return get(this, "Month");
  }
}
function getDaysInMonth() {
  return daysInMonth(this.year(), this.month());
}
function monthsShortRegex(isStrict) {
  if (this._monthsParseExact) {
    if (!hasOwnProp(this, "_monthsRegex")) {
      computeMonthsParse.call(this);
    }
    if (isStrict) {
      return this._monthsShortStrictRegex;
    } else {
      return this._monthsShortRegex;
    }
  } else {
    if (!hasOwnProp(this, "_monthsShortRegex")) {
      this._monthsShortRegex = defaultMonthsShortRegex;
    }
    return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
  }
}
function monthsRegex(isStrict) {
  if (this._monthsParseExact) {
    if (!hasOwnProp(this, "_monthsRegex")) {
      computeMonthsParse.call(this);
    }
    if (isStrict) {
      return this._monthsStrictRegex;
    } else {
      return this._monthsRegex;
    }
  } else {
    if (!hasOwnProp(this, "_monthsRegex")) {
      this._monthsRegex = defaultMonthsRegex;
    }
    return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
  }
}
function computeMonthsParse() {
  function cmpLenRev(a, b) {
    return b.length - a.length;
  }
  var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
  for (i = 0; i < 12; i++) {
    mom = createUTC([2e3, i]);
    shortPieces.push(this.monthsShort(mom, ""));
    longPieces.push(this.months(mom, ""));
    mixedPieces.push(this.months(mom, ""));
    mixedPieces.push(this.monthsShort(mom, ""));
  }
  shortPieces.sort(cmpLenRev);
  longPieces.sort(cmpLenRev);
  mixedPieces.sort(cmpLenRev);
  for (i = 0; i < 12; i++) {
    shortPieces[i] = regexEscape(shortPieces[i]);
    longPieces[i] = regexEscape(longPieces[i]);
  }
  for (i = 0; i < 24; i++) {
    mixedPieces[i] = regexEscape(mixedPieces[i]);
  }
  this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._monthsShortRegex = this._monthsRegex;
  this._monthsStrictRegex = new RegExp(
    "^(" + longPieces.join("|") + ")",
    "i"
  );
  this._monthsShortStrictRegex = new RegExp(
    "^(" + shortPieces.join("|") + ")",
    "i"
  );
}
function daysInYear(year) {
  return isLeapYear(year) ? 366 : 365;
}
function getIsLeapYear() {
  return isLeapYear(this.year());
}
function createDate(y, m, d, h, M, s, ms) {
  var date;
  if (y < 100 && y >= 0) {
    date = new Date(y + 400, m, d, h, M, s, ms);
    if (isFinite(date.getFullYear())) {
      date.setFullYear(y);
    }
  } else {
    date = new Date(y, m, d, h, M, s, ms);
  }
  return date;
}
function createUTCDate(y) {
  var date, args;
  if (y < 100 && y >= 0) {
    args = Array.prototype.slice.call(arguments);
    args[0] = y + 400;
    date = new Date(Date.UTC.apply(null, args));
    if (isFinite(date.getUTCFullYear())) {
      date.setUTCFullYear(y);
    }
  } else {
    date = new Date(Date.UTC.apply(null, arguments));
  }
  return date;
}
function firstWeekOffset(year, dow, doy) {
  var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
  return -fwdlw + fwd - 1;
}
function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
  var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
  if (dayOfYear <= 0) {
    resYear = year - 1;
    resDayOfYear = daysInYear(resYear) + dayOfYear;
  } else if (dayOfYear > daysInYear(year)) {
    resYear = year + 1;
    resDayOfYear = dayOfYear - daysInYear(year);
  } else {
    resYear = year;
    resDayOfYear = dayOfYear;
  }
  return {
    year: resYear,
    dayOfYear: resDayOfYear
  };
}
function weekOfYear(mom, dow, doy) {
  var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
  if (week < 1) {
    resYear = mom.year() - 1;
    resWeek = week + weeksInYear(resYear, dow, doy);
  } else if (week > weeksInYear(mom.year(), dow, doy)) {
    resWeek = week - weeksInYear(mom.year(), dow, doy);
    resYear = mom.year() + 1;
  } else {
    resYear = mom.year();
    resWeek = week;
  }
  return {
    week: resWeek,
    year: resYear
  };
}
function weeksInYear(year, dow, doy) {
  var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
  return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
}
function localeWeek(mom) {
  return weekOfYear(mom, this._week.dow, this._week.doy).week;
}
function localeFirstDayOfWeek() {
  return this._week.dow;
}
function localeFirstDayOfYear() {
  return this._week.doy;
}
function getSetWeek(input) {
  var week = this.localeData().week(this);
  return input == null ? week : this.add((input - week) * 7, "d");
}
function getSetISOWeek(input) {
  var week = weekOfYear(this, 1, 4).week;
  return input == null ? week : this.add((input - week) * 7, "d");
}
function parseWeekday(input, locale2) {
  if (typeof input !== "string") {
    return input;
  }
  if (!isNaN(input)) {
    return parseInt(input, 10);
  }
  input = locale2.weekdaysParse(input);
  if (typeof input === "number") {
    return input;
  }
  return null;
}
function parseIsoWeekday(input, locale2) {
  if (typeof input === "string") {
    return locale2.weekdaysParse(input) % 7 || 7;
  }
  return isNaN(input) ? null : input;
}
function shiftWeekdays(ws, n) {
  return ws.slice(n, 7).concat(ws.slice(0, n));
}
function localeWeekdays(m, format2) {
  var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
  return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
}
function localeWeekdaysShort(m) {
  return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
}
function localeWeekdaysMin(m) {
  return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
}
function handleStrictParse$1(weekdayName, format2, strict) {
  var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
  if (!this._weekdaysParse) {
    this._weekdaysParse = [];
    this._shortWeekdaysParse = [];
    this._minWeekdaysParse = [];
    for (i = 0; i < 7; ++i) {
      mom = createUTC([2e3, 1]).day(i);
      this._minWeekdaysParse[i] = this.weekdaysMin(
        mom,
        ""
      ).toLocaleLowerCase();
      this._shortWeekdaysParse[i] = this.weekdaysShort(
        mom,
        ""
      ).toLocaleLowerCase();
      this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
    }
  }
  if (strict) {
    if (format2 === "dddd") {
      ii = indexOf.call(this._weekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else if (format2 === "ddd") {
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    }
  } else {
    if (format2 === "dddd") {
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else if (format2 === "ddd") {
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._minWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    }
  }
}
function localeWeekdaysParse(weekdayName, format2, strict) {
  var i, mom, regex;
  if (this._weekdaysParseExact) {
    return handleStrictParse$1.call(this, weekdayName, format2, strict);
  }
  if (!this._weekdaysParse) {
    this._weekdaysParse = [];
    this._minWeekdaysParse = [];
    this._shortWeekdaysParse = [];
    this._fullWeekdaysParse = [];
  }
  for (i = 0; i < 7; i++) {
    mom = createUTC([2e3, 1]).day(i);
    if (strict && !this._fullWeekdaysParse[i]) {
      this._fullWeekdaysParse[i] = new RegExp(
        "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
        "i"
      );
      this._shortWeekdaysParse[i] = new RegExp(
        "^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$",
        "i"
      );
      this._minWeekdaysParse[i] = new RegExp(
        "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
        "i"
      );
    }
    if (!this._weekdaysParse[i]) {
      regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
      this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
    }
    if (strict && format2 === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) {
      return i;
    } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) {
      return i;
    } else if (strict && format2 === "dd" && this._minWeekdaysParse[i].test(weekdayName)) {
      return i;
    } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
      return i;
    }
  }
}
function getSetDayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
  if (input != null) {
    input = parseWeekday(input, this.localeData());
    return this.add(input - day, "d");
  } else {
    return day;
  }
}
function getSetLocaleDayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
  return input == null ? weekday : this.add(input - weekday, "d");
}
function getSetISODayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  if (input != null) {
    var weekday = parseIsoWeekday(input, this.localeData());
    return this.day(this.day() % 7 ? weekday : weekday - 7);
  } else {
    return this.day() || 7;
  }
}
function weekdaysRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysStrictRegex;
    } else {
      return this._weekdaysRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      this._weekdaysRegex = defaultWeekdaysRegex;
    }
    return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
  }
}
function weekdaysShortRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysShortStrictRegex;
    } else {
      return this._weekdaysShortRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysShortRegex")) {
      this._weekdaysShortRegex = defaultWeekdaysShortRegex;
    }
    return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
  }
}
function weekdaysMinRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysMinStrictRegex;
    } else {
      return this._weekdaysMinRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysMinRegex")) {
      this._weekdaysMinRegex = defaultWeekdaysMinRegex;
    }
    return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
  }
}
function computeWeekdaysParse() {
  function cmpLenRev(a, b) {
    return b.length - a.length;
  }
  var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
  for (i = 0; i < 7; i++) {
    mom = createUTC([2e3, 1]).day(i);
    minp = regexEscape(this.weekdaysMin(mom, ""));
    shortp = regexEscape(this.weekdaysShort(mom, ""));
    longp = regexEscape(this.weekdays(mom, ""));
    minPieces.push(minp);
    shortPieces.push(shortp);
    longPieces.push(longp);
    mixedPieces.push(minp);
    mixedPieces.push(shortp);
    mixedPieces.push(longp);
  }
  minPieces.sort(cmpLenRev);
  shortPieces.sort(cmpLenRev);
  longPieces.sort(cmpLenRev);
  mixedPieces.sort(cmpLenRev);
  this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._weekdaysShortRegex = this._weekdaysRegex;
  this._weekdaysMinRegex = this._weekdaysRegex;
  this._weekdaysStrictRegex = new RegExp(
    "^(" + longPieces.join("|") + ")",
    "i"
  );
  this._weekdaysShortStrictRegex = new RegExp(
    "^(" + shortPieces.join("|") + ")",
    "i"
  );
  this._weekdaysMinStrictRegex = new RegExp(
    "^(" + minPieces.join("|") + ")",
    "i"
  );
}
function hFormat() {
  return this.hours() % 12 || 12;
}
function kFormat() {
  return this.hours() || 24;
}
function meridiem(token2, lowercase) {
  addFormatToken(token2, 0, 0, function() {
    return this.localeData().meridiem(
      this.hours(),
      this.minutes(),
      lowercase
    );
  });
}
function matchMeridiem(isStrict, locale2) {
  return locale2._meridiemParse;
}
function localeIsPM(input) {
  return (input + "").toLowerCase().charAt(0) === "p";
}
function localeMeridiem(hours2, minutes2, isLower) {
  if (hours2 > 11) {
    return isLower ? "pm" : "PM";
  } else {
    return isLower ? "am" : "AM";
  }
}
function commonPrefix(arr1, arr2) {
  var i, minl = Math.min(arr1.length, arr2.length);
  for (i = 0; i < minl; i += 1) {
    if (arr1[i] !== arr2[i]) {
      return i;
    }
  }
  return minl;
}
function normalizeLocale(key) {
  return key ? key.toLowerCase().replace("_", "-") : key;
}
function chooseLocale(names) {
  var i = 0, j, next, locale2, split;
  while (i < names.length) {
    split = normalizeLocale(names[i]).split("-");
    j = split.length;
    next = normalizeLocale(names[i + 1]);
    next = next ? next.split("-") : null;
    while (j > 0) {
      locale2 = loadLocale(split.slice(0, j).join("-"));
      if (locale2) {
        return locale2;
      }
      if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
        break;
      }
      j--;
    }
    i++;
  }
  return globalLocale;
}
function isLocaleNameSane(name) {
  return name.match("^[^/\\\\]*$") != null;
}
function loadLocale(name) {
  var oldLocale = null, aliasedRequire;
  if (locales[name] === void 0 && typeof module !== "undefined" && module && module.exports && isLocaleNameSane(name)) {
    try {
      oldLocale = globalLocale._abbr;
      aliasedRequire = __require;
      aliasedRequire("./locale/" + name);
      getSetGlobalLocale(oldLocale);
    } catch (e) {
      locales[name] = null;
    }
  }
  return locales[name];
}
function getSetGlobalLocale(key, values) {
  var data;
  if (key) {
    if (isUndefined(values)) {
      data = getLocale(key);
    } else {
      data = defineLocale(key, values);
    }
    if (data) {
      globalLocale = data;
    } else {
      if (typeof console !== "undefined" && console.warn) {
        console.warn(
          "Locale " + key + " not found. Did you forget to load it?"
        );
      }
    }
  }
  return globalLocale._abbr;
}
function defineLocale(name, config) {
  if (config !== null) {
    var locale2, parentConfig = baseConfig;
    config.abbr = name;
    if (locales[name] != null) {
      deprecateSimple(
        "defineLocaleOverride",
        "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
      );
      parentConfig = locales[name]._config;
    } else if (config.parentLocale != null) {
      if (locales[config.parentLocale] != null) {
        parentConfig = locales[config.parentLocale]._config;
      } else {
        locale2 = loadLocale(config.parentLocale);
        if (locale2 != null) {
          parentConfig = locale2._config;
        } else {
          if (!localeFamilies[config.parentLocale]) {
            localeFamilies[config.parentLocale] = [];
          }
          localeFamilies[config.parentLocale].push({
            name,
            config
          });
          return null;
        }
      }
    }
    locales[name] = new Locale(mergeConfigs(parentConfig, config));
    if (localeFamilies[name]) {
      localeFamilies[name].forEach(function(x) {
        defineLocale(x.name, x.config);
      });
    }
    getSetGlobalLocale(name);
    return locales[name];
  } else {
    delete locales[name];
    return null;
  }
}
function updateLocale(name, config) {
  if (config != null) {
    var locale2, tmpLocale, parentConfig = baseConfig;
    if (locales[name] != null && locales[name].parentLocale != null) {
      locales[name].set(mergeConfigs(locales[name]._config, config));
    } else {
      tmpLocale = loadLocale(name);
      if (tmpLocale != null) {
        parentConfig = tmpLocale._config;
      }
      config = mergeConfigs(parentConfig, config);
      if (tmpLocale == null) {
        config.abbr = name;
      }
      locale2 = new Locale(config);
      locale2.parentLocale = locales[name];
      locales[name] = locale2;
    }
    getSetGlobalLocale(name);
  } else {
    if (locales[name] != null) {
      if (locales[name].parentLocale != null) {
        locales[name] = locales[name].parentLocale;
        if (name === getSetGlobalLocale()) {
          getSetGlobalLocale(name);
        }
      } else if (locales[name] != null) {
        delete locales[name];
      }
    }
  }
  return locales[name];
}
function getLocale(key) {
  var locale2;
  if (key && key._locale && key._locale._abbr) {
    key = key._locale._abbr;
  }
  if (!key) {
    return globalLocale;
  }
  if (!isArray(key)) {
    locale2 = loadLocale(key);
    if (locale2) {
      return locale2;
    }
    key = [key];
  }
  return chooseLocale(key);
}
function listLocales() {
  return keys(locales);
}
function checkOverflow(m) {
  var overflow, a = m._a;
  if (a && getParsingFlags(m).overflow === -2) {
    overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
    if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
      overflow = DATE;
    }
    if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
      overflow = WEEK;
    }
    if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
      overflow = WEEKDAY;
    }
    getParsingFlags(m).overflow = overflow;
  }
  return m;
}
function configFromISO(config) {
  var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
  if (match) {
    getParsingFlags(config).iso = true;
    for (i = 0, l = isoDatesLen; i < l; i++) {
      if (isoDates[i][1].exec(match[1])) {
        dateFormat = isoDates[i][0];
        allowTime = isoDates[i][2] !== false;
        break;
      }
    }
    if (dateFormat == null) {
      config._isValid = false;
      return;
    }
    if (match[3]) {
      for (i = 0, l = isoTimesLen; i < l; i++) {
        if (isoTimes[i][1].exec(match[3])) {
          timeFormat = (match[2] || " ") + isoTimes[i][0];
          break;
        }
      }
      if (timeFormat == null) {
        config._isValid = false;
        return;
      }
    }
    if (!allowTime && timeFormat != null) {
      config._isValid = false;
      return;
    }
    if (match[4]) {
      if (tzRegex.exec(match[4])) {
        tzFormat = "Z";
      } else {
        config._isValid = false;
        return;
      }
    }
    config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
    configFromStringAndFormat(config);
  } else {
    config._isValid = false;
  }
}
function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
  var result = [
    untruncateYear(yearStr),
    defaultLocaleMonthsShort.indexOf(monthStr),
    parseInt(dayStr, 10),
    parseInt(hourStr, 10),
    parseInt(minuteStr, 10)
  ];
  if (secondStr) {
    result.push(parseInt(secondStr, 10));
  }
  return result;
}
function untruncateYear(yearStr) {
  var year = parseInt(yearStr, 10);
  if (year <= 49) {
    return 2e3 + year;
  } else if (year <= 999) {
    return 1900 + year;
  }
  return year;
}
function preprocessRFC2822(s) {
  return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
}
function checkWeekday(weekdayStr, parsedInput, config) {
  if (weekdayStr) {
    var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(
      parsedInput[0],
      parsedInput[1],
      parsedInput[2]
    ).getDay();
    if (weekdayProvided !== weekdayActual) {
      getParsingFlags(config).weekdayMismatch = true;
      config._isValid = false;
      return false;
    }
  }
  return true;
}
function calculateOffset(obsOffset, militaryOffset, numOffset) {
  if (obsOffset) {
    return obsOffsets[obsOffset];
  } else if (militaryOffset) {
    return 0;
  } else {
    var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
    return h * 60 + m;
  }
}
function configFromRFC2822(config) {
  var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
  if (match) {
    parsedArray = extractFromRFC2822Strings(
      match[4],
      match[3],
      match[2],
      match[5],
      match[6],
      match[7]
    );
    if (!checkWeekday(match[1], parsedArray, config)) {
      return;
    }
    config._a = parsedArray;
    config._tzm = calculateOffset(match[8], match[9], match[10]);
    config._d = createUTCDate.apply(null, config._a);
    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    getParsingFlags(config).rfc2822 = true;
  } else {
    config._isValid = false;
  }
}
function configFromString(config) {
  var matched = aspNetJsonRegex.exec(config._i);
  if (matched !== null) {
    config._d = /* @__PURE__ */ new Date(+matched[1]);
    return;
  }
  configFromISO(config);
  if (config._isValid === false) {
    delete config._isValid;
  } else {
    return;
  }
  configFromRFC2822(config);
  if (config._isValid === false) {
    delete config._isValid;
  } else {
    return;
  }
  if (config._strict) {
    config._isValid = false;
  } else {
    hooks.createFromInputFallback(config);
  }
}
function defaults(a, b, c) {
  if (a != null) {
    return a;
  }
  if (b != null) {
    return b;
  }
  return c;
}
function currentDateArray(config) {
  var nowValue = new Date(hooks.now());
  if (config._useUTC) {
    return [
      nowValue.getUTCFullYear(),
      nowValue.getUTCMonth(),
      nowValue.getUTCDate()
    ];
  }
  return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
}
function configFromArray(config) {
  var i, date, input = [], currentDate, expectedWeekday, yearToUse;
  if (config._d) {
    return;
  }
  currentDate = currentDateArray(config);
  if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
    dayOfYearFromWeekInfo(config);
  }
  if (config._dayOfYear != null) {
    yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
    if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
      getParsingFlags(config)._overflowDayOfYear = true;
    }
    date = createUTCDate(yearToUse, 0, config._dayOfYear);
    config._a[MONTH] = date.getUTCMonth();
    config._a[DATE] = date.getUTCDate();
  }
  for (i = 0; i < 3 && config._a[i] == null; ++i) {
    config._a[i] = input[i] = currentDate[i];
  }
  for (; i < 7; i++) {
    config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
  }
  if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
    config._nextDay = true;
    config._a[HOUR] = 0;
  }
  config._d = (config._useUTC ? createUTCDate : createDate).apply(
    null,
    input
  );
  expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
  if (config._tzm != null) {
    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
  }
  if (config._nextDay) {
    config._a[HOUR] = 24;
  }
  if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
    getParsingFlags(config).weekdayMismatch = true;
  }
}
function dayOfYearFromWeekInfo(config) {
  var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
  w = config._w;
  if (w.GG != null || w.W != null || w.E != null) {
    dow = 1;
    doy = 4;
    weekYear = defaults(
      w.GG,
      config._a[YEAR],
      weekOfYear(createLocal(), 1, 4).year
    );
    week = defaults(w.W, 1);
    weekday = defaults(w.E, 1);
    if (weekday < 1 || weekday > 7) {
      weekdayOverflow = true;
    }
  } else {
    dow = config._locale._week.dow;
    doy = config._locale._week.doy;
    curWeek = weekOfYear(createLocal(), dow, doy);
    weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
    week = defaults(w.w, curWeek.week);
    if (w.d != null) {
      weekday = w.d;
      if (weekday < 0 || weekday > 6) {
        weekdayOverflow = true;
      }
    } else if (w.e != null) {
      weekday = w.e + dow;
      if (w.e < 0 || w.e > 6) {
        weekdayOverflow = true;
      }
    } else {
      weekday = dow;
    }
  }
  if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
    getParsingFlags(config)._overflowWeeks = true;
  } else if (weekdayOverflow != null) {
    getParsingFlags(config)._overflowWeekday = true;
  } else {
    temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
    config._a[YEAR] = temp.year;
    config._dayOfYear = temp.dayOfYear;
  }
}
function configFromStringAndFormat(config) {
  if (config._f === hooks.ISO_8601) {
    configFromISO(config);
    return;
  }
  if (config._f === hooks.RFC_2822) {
    configFromRFC2822(config);
    return;
  }
  config._a = [];
  getParsingFlags(config).empty = true;
  var string = "" + config._i, i, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
  tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
  tokenLen = tokens2.length;
  for (i = 0; i < tokenLen; i++) {
    token2 = tokens2[i];
    parsedInput = (string.match(getParseRegexForToken(token2, config)) || [])[0];
    if (parsedInput) {
      skipped = string.substr(0, string.indexOf(parsedInput));
      if (skipped.length > 0) {
        getParsingFlags(config).unusedInput.push(skipped);
      }
      string = string.slice(
        string.indexOf(parsedInput) + parsedInput.length
      );
      totalParsedInputLength += parsedInput.length;
    }
    if (formatTokenFunctions[token2]) {
      if (parsedInput) {
        getParsingFlags(config).empty = false;
      } else {
        getParsingFlags(config).unusedTokens.push(token2);
      }
      addTimeToArrayFromToken(token2, parsedInput, config);
    } else if (config._strict && !parsedInput) {
      getParsingFlags(config).unusedTokens.push(token2);
    }
  }
  getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
  if (string.length > 0) {
    getParsingFlags(config).unusedInput.push(string);
  }
  if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
    getParsingFlags(config).bigHour = void 0;
  }
  getParsingFlags(config).parsedDateParts = config._a.slice(0);
  getParsingFlags(config).meridiem = config._meridiem;
  config._a[HOUR] = meridiemFixWrap(
    config._locale,
    config._a[HOUR],
    config._meridiem
  );
  era = getParsingFlags(config).era;
  if (era !== null) {
    config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
  }
  configFromArray(config);
  checkOverflow(config);
}
function meridiemFixWrap(locale2, hour, meridiem2) {
  var isPm;
  if (meridiem2 == null) {
    return hour;
  }
  if (locale2.meridiemHour != null) {
    return locale2.meridiemHour(hour, meridiem2);
  } else if (locale2.isPM != null) {
    isPm = locale2.isPM(meridiem2);
    if (isPm && hour < 12) {
      hour += 12;
    }
    if (!isPm && hour === 12) {
      hour = 0;
    }
    return hour;
  } else {
    return hour;
  }
}
function configFromStringAndArray(config) {
  var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
  if (configfLen === 0) {
    getParsingFlags(config).invalidFormat = true;
    config._d = /* @__PURE__ */ new Date(NaN);
    return;
  }
  for (i = 0; i < configfLen; i++) {
    currentScore = 0;
    validFormatFound = false;
    tempConfig = copyConfig({}, config);
    if (config._useUTC != null) {
      tempConfig._useUTC = config._useUTC;
    }
    tempConfig._f = config._f[i];
    configFromStringAndFormat(tempConfig);
    if (isValid(tempConfig)) {
      validFormatFound = true;
    }
    currentScore += getParsingFlags(tempConfig).charsLeftOver;
    currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
    getParsingFlags(tempConfig).score = currentScore;
    if (!bestFormatIsValid) {
      if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
        scoreToBeat = currentScore;
        bestMoment = tempConfig;
        if (validFormatFound) {
          bestFormatIsValid = true;
        }
      }
    } else {
      if (currentScore < scoreToBeat) {
        scoreToBeat = currentScore;
        bestMoment = tempConfig;
      }
    }
  }
  extend(config, bestMoment || tempConfig);
}
function configFromObject(config) {
  if (config._d) {
    return;
  }
  var i = normalizeObjectUnits(config._i), dayOrDate = i.day === void 0 ? i.date : i.day;
  config._a = map(
    [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
    function(obj) {
      return obj && parseInt(obj, 10);
    }
  );
  configFromArray(config);
}
function createFromConfig(config) {
  var res = new Moment(checkOverflow(prepareConfig(config)));
  if (res._nextDay) {
    res.add(1, "d");
    res._nextDay = void 0;
  }
  return res;
}
function prepareConfig(config) {
  var input = config._i, format2 = config._f;
  config._locale = config._locale || getLocale(config._l);
  if (input === null || format2 === void 0 && input === "") {
    return createInvalid({ nullInput: true });
  }
  if (typeof input === "string") {
    config._i = input = config._locale.preparse(input);
  }
  if (isMoment(input)) {
    return new Moment(checkOverflow(input));
  } else if (isDate(input)) {
    config._d = input;
  } else if (isArray(format2)) {
    configFromStringAndArray(config);
  } else if (format2) {
    configFromStringAndFormat(config);
  } else {
    configFromInput(config);
  }
  if (!isValid(config)) {
    config._d = null;
  }
  return config;
}
function configFromInput(config) {
  var input = config._i;
  if (isUndefined(input)) {
    config._d = new Date(hooks.now());
  } else if (isDate(input)) {
    config._d = new Date(input.valueOf());
  } else if (typeof input === "string") {
    configFromString(config);
  } else if (isArray(input)) {
    config._a = map(input.slice(0), function(obj) {
      return parseInt(obj, 10);
    });
    configFromArray(config);
  } else if (isObject(input)) {
    configFromObject(config);
  } else if (isNumber(input)) {
    config._d = new Date(input);
  } else {
    hooks.createFromInputFallback(config);
  }
}
function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
  var c = {};
  if (format2 === true || format2 === false) {
    strict = format2;
    format2 = void 0;
  }
  if (locale2 === true || locale2 === false) {
    strict = locale2;
    locale2 = void 0;
  }
  if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
    input = void 0;
  }
  c._isAMomentObject = true;
  c._useUTC = c._isUTC = isUTC;
  c._l = locale2;
  c._i = input;
  c._f = format2;
  c._strict = strict;
  return createFromConfig(c);
}
function createLocal(input, format2, locale2, strict) {
  return createLocalOrUTC(input, format2, locale2, strict, false);
}
function pickBy(fn, moments) {
  var res, i;
  if (moments.length === 1 && isArray(moments[0])) {
    moments = moments[0];
  }
  if (!moments.length) {
    return createLocal();
  }
  res = moments[0];
  for (i = 1; i < moments.length; ++i) {
    if (!moments[i].isValid() || moments[i][fn](res)) {
      res = moments[i];
    }
  }
  return res;
}
function min() {
  var args = [].slice.call(arguments, 0);
  return pickBy("isBefore", args);
}
function max() {
  var args = [].slice.call(arguments, 0);
  return pickBy("isAfter", args);
}
function isDurationValid(m) {
  var key, unitHasDecimal = false, i, orderLen = ordering.length;
  for (key in m) {
    if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
      return false;
    }
  }
  for (i = 0; i < orderLen; ++i) {
    if (m[ordering[i]]) {
      if (unitHasDecimal) {
        return false;
      }
      if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
        unitHasDecimal = true;
      }
    }
  }
  return true;
}
function isValid$1() {
  return this._isValid;
}
function createInvalid$1() {
  return createDuration(NaN);
}
function Duration(duration) {
  var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
  this._isValid = isDurationValid(normalizedInput);
  this._milliseconds = +milliseconds2 + seconds2 * 1e3 + // 1000
  minutes2 * 6e4 + // 1000 * 60
  hours2 * 1e3 * 60 * 60;
  this._days = +days2 + weeks2 * 7;
  this._months = +months2 + quarters * 3 + years2 * 12;
  this._data = {};
  this._locale = getLocale();
  this._bubble();
}
function isDuration(obj) {
  return obj instanceof Duration;
}
function absRound(number) {
  if (number < 0) {
    return Math.round(-1 * number) * -1;
  } else {
    return Math.round(number);
  }
}
function compareArrays(array1, array2, dontConvert) {
  var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
  for (i = 0; i < len; i++) {
    if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
      diffs++;
    }
  }
  return diffs + lengthDiff;
}
function offset(token2, separator) {
  addFormatToken(token2, 0, 0, function() {
    var offset2 = this.utcOffset(), sign2 = "+";
    if (offset2 < 0) {
      offset2 = -offset2;
      sign2 = "-";
    }
    return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
  });
}
function offsetFromString(matcher, string) {
  var matches = (string || "").match(matcher), chunk, parts, minutes2;
  if (matches === null) {
    return null;
  }
  chunk = matches[matches.length - 1] || [];
  parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
  minutes2 = +(parts[1] * 60) + toInt(parts[2]);
  return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
}
function cloneWithOffset(input, model) {
  var res, diff2;
  if (model._isUTC) {
    res = model.clone();
    diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
    res._d.setTime(res._d.valueOf() + diff2);
    hooks.updateOffset(res, false);
    return res;
  } else {
    return createLocal(input).local();
  }
}
function getDateOffset(m) {
  return -Math.round(m._d.getTimezoneOffset());
}
function getSetOffset(input, keepLocalTime, keepMinutes) {
  var offset2 = this._offset || 0, localAdjust;
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  if (input != null) {
    if (typeof input === "string") {
      input = offsetFromString(matchShortOffset, input);
      if (input === null) {
        return this;
      }
    } else if (Math.abs(input) < 16 && !keepMinutes) {
      input = input * 60;
    }
    if (!this._isUTC && keepLocalTime) {
      localAdjust = getDateOffset(this);
    }
    this._offset = input;
    this._isUTC = true;
    if (localAdjust != null) {
      this.add(localAdjust, "m");
    }
    if (offset2 !== input) {
      if (!keepLocalTime || this._changeInProgress) {
        addSubtract(
          this,
          createDuration(input - offset2, "m"),
          1,
          false
        );
      } else if (!this._changeInProgress) {
        this._changeInProgress = true;
        hooks.updateOffset(this, true);
        this._changeInProgress = null;
      }
    }
    return this;
  } else {
    return this._isUTC ? offset2 : getDateOffset(this);
  }
}
function getSetZone(input, keepLocalTime) {
  if (input != null) {
    if (typeof input !== "string") {
      input = -input;
    }
    this.utcOffset(input, keepLocalTime);
    return this;
  } else {
    return -this.utcOffset();
  }
}
function setOffsetToUTC(keepLocalTime) {
  return this.utcOffset(0, keepLocalTime);
}
function setOffsetToLocal(keepLocalTime) {
  if (this._isUTC) {
    this.utcOffset(0, keepLocalTime);
    this._isUTC = false;
    if (keepLocalTime) {
      this.subtract(getDateOffset(this), "m");
    }
  }
  return this;
}
function setOffsetToParsedOffset() {
  if (this._tzm != null) {
    this.utcOffset(this._tzm, false, true);
  } else if (typeof this._i === "string") {
    var tZone = offsetFromString(matchOffset, this._i);
    if (tZone != null) {
      this.utcOffset(tZone);
    } else {
      this.utcOffset(0, true);
    }
  }
  return this;
}
function hasAlignedHourOffset(input) {
  if (!this.isValid()) {
    return false;
  }
  input = input ? createLocal(input).utcOffset() : 0;
  return (this.utcOffset() - input) % 60 === 0;
}
function isDaylightSavingTime() {
  return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
}
function isDaylightSavingTimeShifted() {
  if (!isUndefined(this._isDSTShifted)) {
    return this._isDSTShifted;
  }
  var c = {}, other;
  copyConfig(c, this);
  c = prepareConfig(c);
  if (c._a) {
    other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
    this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
  } else {
    this._isDSTShifted = false;
  }
  return this._isDSTShifted;
}
function isLocal() {
  return this.isValid() ? !this._isUTC : false;
}
function isUtcOffset() {
  return this.isValid() ? this._isUTC : false;
}
function isUtc() {
  return this.isValid() ? this._isUTC && this._offset === 0 : false;
}
function createDuration(input, key) {
  var duration = input, match = null, sign2, ret, diffRes;
  if (isDuration(input)) {
    duration = {
      ms: input._milliseconds,
      d: input._days,
      M: input._months
    };
  } else if (isNumber(input) || !isNaN(+input)) {
    duration = {};
    if (key) {
      duration[key] = +input;
    } else {
      duration.milliseconds = +input;
    }
  } else if (match = aspNetRegex.exec(input)) {
    sign2 = match[1] === "-" ? -1 : 1;
    duration = {
      y: 0,
      d: toInt(match[DATE]) * sign2,
      h: toInt(match[HOUR]) * sign2,
      m: toInt(match[MINUTE]) * sign2,
      s: toInt(match[SECOND]) * sign2,
      ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
      // the millisecond decimal point is included in the match
    };
  } else if (match = isoRegex.exec(input)) {
    sign2 = match[1] === "-" ? -1 : 1;
    duration = {
      y: parseIso(match[2], sign2),
      M: parseIso(match[3], sign2),
      w: parseIso(match[4], sign2),
      d: parseIso(match[5], sign2),
      h: parseIso(match[6], sign2),
      m: parseIso(match[7], sign2),
      s: parseIso(match[8], sign2)
    };
  } else if (duration == null) {
    duration = {};
  } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
    diffRes = momentsDifference(
      createLocal(duration.from),
      createLocal(duration.to)
    );
    duration = {};
    duration.ms = diffRes.milliseconds;
    duration.M = diffRes.months;
  }
  ret = new Duration(duration);
  if (isDuration(input) && hasOwnProp(input, "_locale")) {
    ret._locale = input._locale;
  }
  if (isDuration(input) && hasOwnProp(input, "_isValid")) {
    ret._isValid = input._isValid;
  }
  return ret;
}
function parseIso(inp, sign2) {
  var res = inp && parseFloat(inp.replace(",", "."));
  return (isNaN(res) ? 0 : res) * sign2;
}
function positiveMomentsDifference(base, other) {
  var res = {};
  res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
  if (base.clone().add(res.months, "M").isAfter(other)) {
    --res.months;
  }
  res.milliseconds = +other - +base.clone().add(res.months, "M");
  return res;
}
function momentsDifference(base, other) {
  var res;
  if (!(base.isValid() && other.isValid())) {
    return { milliseconds: 0, months: 0 };
  }
  other = cloneWithOffset(other, base);
  if (base.isBefore(other)) {
    res = positiveMomentsDifference(base, other);
  } else {
    res = positiveMomentsDifference(other, base);
    res.milliseconds = -res.milliseconds;
    res.months = -res.months;
  }
  return res;
}
function createAdder(direction, name) {
  return function(val, period) {
    var dur, tmp;
    if (period !== null && !isNaN(+period)) {
      deprecateSimple(
        name,
        "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
      );
      tmp = val;
      val = period;
      period = tmp;
    }
    dur = createDuration(val, period);
    addSubtract(this, dur, direction);
    return this;
  };
}
function addSubtract(mom, duration, isAdding, updateOffset) {
  var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
  if (!mom.isValid()) {
    return;
  }
  updateOffset = updateOffset == null ? true : updateOffset;
  if (months2) {
    setMonth(mom, get(mom, "Month") + months2 * isAdding);
  }
  if (days2) {
    set$1(mom, "Date", get(mom, "Date") + days2 * isAdding);
  }
  if (milliseconds2) {
    mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
  }
  if (updateOffset) {
    hooks.updateOffset(mom, days2 || months2);
  }
}
function isString(input) {
  return typeof input === "string" || input instanceof String;
}
function isMomentInput(input) {
  return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
}
function isMomentInputObject(input) {
  var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
    "years",
    "year",
    "y",
    "months",
    "month",
    "M",
    "days",
    "day",
    "d",
    "dates",
    "date",
    "D",
    "hours",
    "hour",
    "h",
    "minutes",
    "minute",
    "m",
    "seconds",
    "second",
    "s",
    "milliseconds",
    "millisecond",
    "ms"
  ], i, property, propertyLen = properties.length;
  for (i = 0; i < propertyLen; i += 1) {
    property = properties[i];
    propertyTest = propertyTest || hasOwnProp(input, property);
  }
  return objectTest && propertyTest;
}
function isNumberOrStringArray(input) {
  var arrayTest = isArray(input), dataTypeTest = false;
  if (arrayTest) {
    dataTypeTest = input.filter(function(item) {
      return !isNumber(item) && isString(input);
    }).length === 0;
  }
  return arrayTest && dataTypeTest;
}
function isCalendarSpec(input) {
  var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
    "sameDay",
    "nextDay",
    "lastDay",
    "nextWeek",
    "lastWeek",
    "sameElse"
  ], i, property;
  for (i = 0; i < properties.length; i += 1) {
    property = properties[i];
    propertyTest = propertyTest || hasOwnProp(input, property);
  }
  return objectTest && propertyTest;
}
function getCalendarFormat(myMoment, now2) {
  var diff2 = myMoment.diff(now2, "days", true);
  return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
}
function calendar$1(time, formats) {
  if (arguments.length === 1) {
    if (!arguments[0]) {
      time = void 0;
      formats = void 0;
    } else if (isMomentInput(arguments[0])) {
      time = arguments[0];
      formats = void 0;
    } else if (isCalendarSpec(arguments[0])) {
      formats = arguments[0];
      time = void 0;
    }
  }
  var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
  return this.format(
    output || this.localeData().calendar(format2, this, createLocal(now2))
  );
}
function clone() {
  return new Moment(this);
}
function isAfter(input, units) {
  var localInput = isMoment(input) ? input : createLocal(input);
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() > localInput.valueOf();
  } else {
    return localInput.valueOf() < this.clone().startOf(units).valueOf();
  }
}
function isBefore(input, units) {
  var localInput = isMoment(input) ? input : createLocal(input);
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() < localInput.valueOf();
  } else {
    return this.clone().endOf(units).valueOf() < localInput.valueOf();
  }
}
function isBetween(from2, to2, units, inclusivity) {
  var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
  if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
    return false;
  }
  inclusivity = inclusivity || "()";
  return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
}
function isSame(input, units) {
  var localInput = isMoment(input) ? input : createLocal(input), inputMs;
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() === localInput.valueOf();
  } else {
    inputMs = localInput.valueOf();
    return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
  }
}
function isSameOrAfter(input, units) {
  return this.isSame(input, units) || this.isAfter(input, units);
}
function isSameOrBefore(input, units) {
  return this.isSame(input, units) || this.isBefore(input, units);
}
function diff(input, units, asFloat) {
  var that, zoneDelta, output;
  if (!this.isValid()) {
    return NaN;
  }
  that = cloneWithOffset(input, this);
  if (!that.isValid()) {
    return NaN;
  }
  zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
  units = normalizeUnits(units);
  switch (units) {
    case "year":
      output = monthDiff(this, that) / 12;
      break;
    case "month":
      output = monthDiff(this, that);
      break;
    case "quarter":
      output = monthDiff(this, that) / 3;
      break;
    case "second":
      output = (this - that) / 1e3;
      break;
    case "minute":
      output = (this - that) / 6e4;
      break;
    case "hour":
      output = (this - that) / 36e5;
      break;
    case "day":
      output = (this - that - zoneDelta) / 864e5;
      break;
    case "week":
      output = (this - that - zoneDelta) / 6048e5;
      break;
    default:
      output = this - that;
  }
  return asFloat ? output : absFloor(output);
}
function monthDiff(a, b) {
  if (a.date() < b.date()) {
    return -monthDiff(b, a);
  }
  var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
  if (b - anchor < 0) {
    anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
    adjust = (b - anchor) / (anchor - anchor2);
  } else {
    anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
    adjust = (b - anchor) / (anchor2 - anchor);
  }
  return -(wholeMonthDiff + adjust) || 0;
}
function toString() {
  return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
}
function toISOString(keepOffset) {
  if (!this.isValid()) {
    return null;
  }
  var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
  if (m.year() < 0 || m.year() > 9999) {
    return formatMoment(
      m,
      utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
    );
  }
  if (isFunction(Date.prototype.toISOString)) {
    if (utc) {
      return this.toDate().toISOString();
    } else {
      return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m, "Z"));
    }
  }
  return formatMoment(
    m,
    utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
  );
}
function inspect() {
  if (!this.isValid()) {
    return "moment.invalid(/* " + this._i + " */)";
  }
  var func = "moment", zone = "", prefix, year, datetime, suffix;
  if (!this.isLocal()) {
    func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
    zone = "Z";
  }
  prefix = "[" + func + '("]';
  year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
  datetime = "-MM-DD[T]HH:mm:ss.SSS";
  suffix = zone + '[")]';
  return this.format(prefix + year + datetime + suffix);
}
function format(inputString) {
  if (!inputString) {
    inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
  }
  var output = formatMoment(this, inputString);
  return this.localeData().postformat(output);
}
function from(time, withoutSuffix) {
  if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
    return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
  } else {
    return this.localeData().invalidDate();
  }
}
function fromNow(withoutSuffix) {
  return this.from(createLocal(), withoutSuffix);
}
function to(time, withoutSuffix) {
  if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
    return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
  } else {
    return this.localeData().invalidDate();
  }
}
function toNow(withoutSuffix) {
  return this.to(createLocal(), withoutSuffix);
}
function locale(key) {
  var newLocaleData;
  if (key === void 0) {
    return this._locale._abbr;
  } else {
    newLocaleData = getLocale(key);
    if (newLocaleData != null) {
      this._locale = newLocaleData;
    }
    return this;
  }
}
function localeData() {
  return this._locale;
}
function mod$1(dividend, divisor) {
  return (dividend % divisor + divisor) % divisor;
}
function localStartOfDate(y, m, d) {
  if (y < 100 && y >= 0) {
    return new Date(y + 400, m, d) - MS_PER_400_YEARS;
  } else {
    return new Date(y, m, d).valueOf();
  }
}
function utcStartOfDate(y, m, d) {
  if (y < 100 && y >= 0) {
    return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
  } else {
    return Date.UTC(y, m, d);
  }
}
function startOf(units) {
  var time, startOfDate;
  units = normalizeUnits(units);
  if (units === void 0 || units === "millisecond" || !this.isValid()) {
    return this;
  }
  startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
  switch (units) {
    case "year":
      time = startOfDate(this.year(), 0, 1);
      break;
    case "quarter":
      time = startOfDate(
        this.year(),
        this.month() - this.month() % 3,
        1
      );
      break;
    case "month":
      time = startOfDate(this.year(), this.month(), 1);
      break;
    case "week":
      time = startOfDate(
        this.year(),
        this.month(),
        this.date() - this.weekday()
      );
      break;
    case "isoWeek":
      time = startOfDate(
        this.year(),
        this.month(),
        this.date() - (this.isoWeekday() - 1)
      );
      break;
    case "day":
    case "date":
      time = startOfDate(this.year(), this.month(), this.date());
      break;
    case "hour":
      time = this._d.valueOf();
      time -= mod$1(
        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
        MS_PER_HOUR
      );
      break;
    case "minute":
      time = this._d.valueOf();
      time -= mod$1(time, MS_PER_MINUTE);
      break;
    case "second":
      time = this._d.valueOf();
      time -= mod$1(time, MS_PER_SECOND);
      break;
  }
  this._d.setTime(time);
  hooks.updateOffset(this, true);
  return this;
}
function endOf(units) {
  var time, startOfDate;
  units = normalizeUnits(units);
  if (units === void 0 || units === "millisecond" || !this.isValid()) {
    return this;
  }
  startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
  switch (units) {
    case "year":
      time = startOfDate(this.year() + 1, 0, 1) - 1;
      break;
    case "quarter":
      time = startOfDate(
        this.year(),
        this.month() - this.month() % 3 + 3,
        1
      ) - 1;
      break;
    case "month":
      time = startOfDate(this.year(), this.month() + 1, 1) - 1;
      break;
    case "week":
      time = startOfDate(
        this.year(),
        this.month(),
        this.date() - this.weekday() + 7
      ) - 1;
      break;
    case "isoWeek":
      time = startOfDate(
        this.year(),
        this.month(),
        this.date() - (this.isoWeekday() - 1) + 7
      ) - 1;
      break;
    case "day":
    case "date":
      time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
      break;
    case "hour":
      time = this._d.valueOf();
      time += MS_PER_HOUR - mod$1(
        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
        MS_PER_HOUR
      ) - 1;
      break;
    case "minute":
      time = this._d.valueOf();
      time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
      break;
    case "second":
      time = this._d.valueOf();
      time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
      break;
  }
  this._d.setTime(time);
  hooks.updateOffset(this, true);
  return this;
}
function valueOf() {
  return this._d.valueOf() - (this._offset || 0) * 6e4;
}
function unix() {
  return Math.floor(this.valueOf() / 1e3);
}
function toDate() {
  return new Date(this.valueOf());
}
function toArray() {
  var m = this;
  return [
    m.year(),
    m.month(),
    m.date(),
    m.hour(),
    m.minute(),
    m.second(),
    m.millisecond()
  ];
}
function toObject() {
  var m = this;
  return {
    years: m.year(),
    months: m.month(),
    date: m.date(),
    hours: m.hours(),
    minutes: m.minutes(),
    seconds: m.seconds(),
    milliseconds: m.milliseconds()
  };
}
function toJSON() {
  return this.isValid() ? this.toISOString() : null;
}
function isValid$2() {
  return isValid(this);
}
function parsingFlags() {
  return extend({}, getParsingFlags(this));
}
function invalidAt() {
  return getParsingFlags(this).overflow;
}
function creationData() {
  return {
    input: this._i,
    format: this._f,
    locale: this._locale,
    isUTC: this._isUTC,
    strict: this._strict
  };
}
function localeEras(m, format2) {
  var i, l, date, eras = this._eras || getLocale("en")._eras;
  for (i = 0, l = eras.length; i < l; ++i) {
    switch (typeof eras[i].since) {
      case "string":
        date = hooks(eras[i].since).startOf("day");
        eras[i].since = date.valueOf();
        break;
    }
    switch (typeof eras[i].until) {
      case "undefined":
        eras[i].until = Infinity;
        break;
      case "string":
        date = hooks(eras[i].until).startOf("day").valueOf();
        eras[i].until = date.valueOf();
        break;
    }
  }
  return eras;
}
function localeErasParse(eraName, format2, strict) {
  var i, l, eras = this.eras(), name, abbr, narrow;
  eraName = eraName.toUpperCase();
  for (i = 0, l = eras.length; i < l; ++i) {
    name = eras[i].name.toUpperCase();
    abbr = eras[i].abbr.toUpperCase();
    narrow = eras[i].narrow.toUpperCase();
    if (strict) {
      switch (format2) {
        case "N":
        case "NN":
        case "NNN":
          if (abbr === eraName) {
            return eras[i];
          }
          break;
        case "NNNN":
          if (name === eraName) {
            return eras[i];
          }
          break;
        case "NNNNN":
          if (narrow === eraName) {
            return eras[i];
          }
          break;
      }
    } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
      return eras[i];
    }
  }
}
function localeErasConvertYear(era, year) {
  var dir = era.since <= era.until ? 1 : -1;
  if (year === void 0) {
    return hooks(era.since).year();
  } else {
    return hooks(era.since).year() + (year - era.offset) * dir;
  }
}
function getEraName() {
  var i, l, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].name;
    }
    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].name;
    }
  }
  return "";
}
function getEraNarrow() {
  var i, l, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].narrow;
    }
    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].narrow;
    }
  }
  return "";
}
function getEraAbbr() {
  var i, l, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].abbr;
    }
    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].abbr;
    }
  }
  return "";
}
function getEraYear() {
  var i, l, dir, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    dir = eras[i].since <= eras[i].until ? 1 : -1;
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
      return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
    }
  }
  return this.year();
}
function erasNameRegex(isStrict) {
  if (!hasOwnProp(this, "_erasNameRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasNameRegex : this._erasRegex;
}
function erasAbbrRegex(isStrict) {
  if (!hasOwnProp(this, "_erasAbbrRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasAbbrRegex : this._erasRegex;
}
function erasNarrowRegex(isStrict) {
  if (!hasOwnProp(this, "_erasNarrowRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasNarrowRegex : this._erasRegex;
}
function matchEraAbbr(isStrict, locale2) {
  return locale2.erasAbbrRegex(isStrict);
}
function matchEraName(isStrict, locale2) {
  return locale2.erasNameRegex(isStrict);
}
function matchEraNarrow(isStrict, locale2) {
  return locale2.erasNarrowRegex(isStrict);
}
function matchEraYearOrdinal(isStrict, locale2) {
  return locale2._eraYearOrdinalRegex || matchUnsigned;
}
function computeErasParse() {
  var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, eras = this.eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    namePieces.push(regexEscape(eras[i].name));
    abbrPieces.push(regexEscape(eras[i].abbr));
    narrowPieces.push(regexEscape(eras[i].narrow));
    mixedPieces.push(regexEscape(eras[i].name));
    mixedPieces.push(regexEscape(eras[i].abbr));
    mixedPieces.push(regexEscape(eras[i].narrow));
  }
  this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
  this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
  this._erasNarrowRegex = new RegExp(
    "^(" + narrowPieces.join("|") + ")",
    "i"
  );
}
function addWeekYearFormatToken(token2, getter) {
  addFormatToken(0, [token2, token2.length], 0, getter);
}
function getSetWeekYear(input) {
  return getSetWeekYearHelper.call(
    this,
    input,
    this.week(),
    this.weekday(),
    this.localeData()._week.dow,
    this.localeData()._week.doy
  );
}
function getSetISOWeekYear(input) {
  return getSetWeekYearHelper.call(
    this,
    input,
    this.isoWeek(),
    this.isoWeekday(),
    1,
    4
  );
}
function getISOWeeksInYear() {
  return weeksInYear(this.year(), 1, 4);
}
function getISOWeeksInISOWeekYear() {
  return weeksInYear(this.isoWeekYear(), 1, 4);
}
function getWeeksInYear() {
  var weekInfo = this.localeData()._week;
  return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
}
function getWeeksInWeekYear() {
  var weekInfo = this.localeData()._week;
  return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
}
function getSetWeekYearHelper(input, week, weekday, dow, doy) {
  var weeksTarget;
  if (input == null) {
    return weekOfYear(this, dow, doy).year;
  } else {
    weeksTarget = weeksInYear(input, dow, doy);
    if (week > weeksTarget) {
      week = weeksTarget;
    }
    return setWeekAll.call(this, input, week, weekday, dow, doy);
  }
}
function setWeekAll(weekYear, week, weekday, dow, doy) {
  var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
  this.year(date.getUTCFullYear());
  this.month(date.getUTCMonth());
  this.date(date.getUTCDate());
  return this;
}
function getSetQuarter(input) {
  return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
}
function getSetDayOfYear(input) {
  var dayOfYear = Math.round(
    (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
  ) + 1;
  return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
}
function parseMs(input, array) {
  array[MILLISECOND] = toInt(("0." + input) * 1e3);
}
function getZoneAbbr() {
  return this._isUTC ? "UTC" : "";
}
function getZoneName() {
  return this._isUTC ? "Coordinated Universal Time" : "";
}
function createUnix(input) {
  return createLocal(input * 1e3);
}
function createInZone() {
  return createLocal.apply(null, arguments).parseZone();
}
function preParsePostFormat(string) {
  return string;
}
function get$1(format2, index, field, setter) {
  var locale2 = getLocale(), utc = createUTC().set(setter, index);
  return locale2[field](utc, format2);
}
function listMonthsImpl(format2, index, field) {
  if (isNumber(format2)) {
    index = format2;
    format2 = void 0;
  }
  format2 = format2 || "";
  if (index != null) {
    return get$1(format2, index, field, "month");
  }
  var i, out = [];
  for (i = 0; i < 12; i++) {
    out[i] = get$1(format2, i, field, "month");
  }
  return out;
}
function listWeekdaysImpl(localeSorted, format2, index, field) {
  if (typeof localeSorted === "boolean") {
    if (isNumber(format2)) {
      index = format2;
      format2 = void 0;
    }
    format2 = format2 || "";
  } else {
    format2 = localeSorted;
    index = format2;
    localeSorted = false;
    if (isNumber(format2)) {
      index = format2;
      format2 = void 0;
    }
    format2 = format2 || "";
  }
  var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i, out = [];
  if (index != null) {
    return get$1(format2, (index + shift) % 7, field, "day");
  }
  for (i = 0; i < 7; i++) {
    out[i] = get$1(format2, (i + shift) % 7, field, "day");
  }
  return out;
}
function listMonths(format2, index) {
  return listMonthsImpl(format2, index, "months");
}
function listMonthsShort(format2, index) {
  return listMonthsImpl(format2, index, "monthsShort");
}
function listWeekdays(localeSorted, format2, index) {
  return listWeekdaysImpl(localeSorted, format2, index, "weekdays");
}
function listWeekdaysShort(localeSorted, format2, index) {
  return listWeekdaysImpl(localeSorted, format2, index, "weekdaysShort");
}
function listWeekdaysMin(localeSorted, format2, index) {
  return listWeekdaysImpl(localeSorted, format2, index, "weekdaysMin");
}
function abs() {
  var data = this._data;
  this._milliseconds = mathAbs(this._milliseconds);
  this._days = mathAbs(this._days);
  this._months = mathAbs(this._months);
  data.milliseconds = mathAbs(data.milliseconds);
  data.seconds = mathAbs(data.seconds);
  data.minutes = mathAbs(data.minutes);
  data.hours = mathAbs(data.hours);
  data.months = mathAbs(data.months);
  data.years = mathAbs(data.years);
  return this;
}
function addSubtract$1(duration, input, value, direction) {
  var other = createDuration(input, value);
  duration._milliseconds += direction * other._milliseconds;
  duration._days += direction * other._days;
  duration._months += direction * other._months;
  return duration._bubble();
}
function add$1(input, value) {
  return addSubtract$1(this, input, value, 1);
}
function subtract$1(input, value) {
  return addSubtract$1(this, input, value, -1);
}
function absCeil(number) {
  if (number < 0) {
    return Math.floor(number);
  } else {
    return Math.ceil(number);
  }
}
function bubble() {
  var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
  if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
    milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
    days2 = 0;
    months2 = 0;
  }
  data.milliseconds = milliseconds2 % 1e3;
  seconds2 = absFloor(milliseconds2 / 1e3);
  data.seconds = seconds2 % 60;
  minutes2 = absFloor(seconds2 / 60);
  data.minutes = minutes2 % 60;
  hours2 = absFloor(minutes2 / 60);
  data.hours = hours2 % 24;
  days2 += absFloor(hours2 / 24);
  monthsFromDays = absFloor(daysToMonths(days2));
  months2 += monthsFromDays;
  days2 -= absCeil(monthsToDays(monthsFromDays));
  years2 = absFloor(months2 / 12);
  months2 %= 12;
  data.days = days2;
  data.months = months2;
  data.years = years2;
  return this;
}
function daysToMonths(days2) {
  return days2 * 4800 / 146097;
}
function monthsToDays(months2) {
  return months2 * 146097 / 4800;
}
function as(units) {
  if (!this.isValid()) {
    return NaN;
  }
  var days2, months2, milliseconds2 = this._milliseconds;
  units = normalizeUnits(units);
  if (units === "month" || units === "quarter" || units === "year") {
    days2 = this._days + milliseconds2 / 864e5;
    months2 = this._months + daysToMonths(days2);
    switch (units) {
      case "month":
        return months2;
      case "quarter":
        return months2 / 3;
      case "year":
        return months2 / 12;
    }
  } else {
    days2 = this._days + Math.round(monthsToDays(this._months));
    switch (units) {
      case "week":
        return days2 / 7 + milliseconds2 / 6048e5;
      case "day":
        return days2 + milliseconds2 / 864e5;
      case "hour":
        return days2 * 24 + milliseconds2 / 36e5;
      case "minute":
        return days2 * 1440 + milliseconds2 / 6e4;
      case "second":
        return days2 * 86400 + milliseconds2 / 1e3;
      case "millisecond":
        return Math.floor(days2 * 864e5) + milliseconds2;
      default:
        throw new Error("Unknown unit " + units);
    }
  }
}
function valueOf$1() {
  if (!this.isValid()) {
    return NaN;
  }
  return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
}
function makeAs(alias) {
  return function() {
    return this.as(alias);
  };
}
function clone$1() {
  return createDuration(this);
}
function get$2(units) {
  units = normalizeUnits(units);
  return this.isValid() ? this[units + "s"]() : NaN;
}
function makeGetter(name) {
  return function() {
    return this.isValid() ? this._data[name] : NaN;
  };
}
function weeks() {
  return absFloor(this.days() / 7);
}
function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
  return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
}
function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
  var duration = createDuration(posNegDuration).abs(), seconds2 = round(duration.as("s")), minutes2 = round(duration.as("m")), hours2 = round(duration.as("h")), days2 = round(duration.as("d")), months2 = round(duration.as("M")), weeks2 = round(duration.as("w")), years2 = round(duration.as("y")), a = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
  if (thresholds2.w != null) {
    a = a || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
  }
  a = a || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
  a[2] = withoutSuffix;
  a[3] = +posNegDuration > 0;
  a[4] = locale2;
  return substituteTimeAgo.apply(null, a);
}
function getSetRelativeTimeRounding(roundingFunction) {
  if (roundingFunction === void 0) {
    return round;
  }
  if (typeof roundingFunction === "function") {
    round = roundingFunction;
    return true;
  }
  return false;
}
function getSetRelativeTimeThreshold(threshold, limit) {
  if (thresholds[threshold] === void 0) {
    return false;
  }
  if (limit === void 0) {
    return thresholds[threshold];
  }
  thresholds[threshold] = limit;
  if (threshold === "s") {
    thresholds.ss = limit - 1;
  }
  return true;
}
function humanize(argWithSuffix, argThresholds) {
  if (!this.isValid()) {
    return this.localeData().invalidDate();
  }
  var withSuffix = false, th = thresholds, locale2, output;
  if (typeof argWithSuffix === "object") {
    argThresholds = argWithSuffix;
    argWithSuffix = false;
  }
  if (typeof argWithSuffix === "boolean") {
    withSuffix = argWithSuffix;
  }
  if (typeof argThresholds === "object") {
    th = Object.assign({}, thresholds, argThresholds);
    if (argThresholds.s != null && argThresholds.ss == null) {
      th.ss = argThresholds.s - 1;
    }
  }
  locale2 = this.localeData();
  output = relativeTime$1(this, !withSuffix, th, locale2);
  if (withSuffix) {
    output = locale2.pastFuture(+this, output);
  }
  return locale2.postformat(output);
}
function sign(x) {
  return (x > 0) - (x < 0) || +x;
}
function toISOString$1() {
  if (!this.isValid()) {
    return this.localeData().invalidDate();
  }
  var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
  if (!total) {
    return "P0D";
  }
  minutes2 = absFloor(seconds2 / 60);
  hours2 = absFloor(minutes2 / 60);
  seconds2 %= 60;
  minutes2 %= 60;
  years2 = absFloor(months2 / 12);
  months2 %= 12;
  s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
  totalSign = total < 0 ? "-" : "";
  ymSign = sign(this._months) !== sign(total) ? "-" : "";
  daysSign = sign(this._days) !== sign(total) ? "-" : "";
  hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
  return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s + "S" : "");
}
var hookCallback, some, momentProperties, updateInProgress, deprecations, keys, defaultCalendar, formattingTokens, localFormattingTokens, formatFunctions, formatTokenFunctions, defaultLongDateFormat, defaultInvalidDate, defaultOrdinal, defaultDayOfMonthOrdinalParse, defaultRelativeTime, aliases, priorities, match1, match2, match3, match4, match6, match1to2, match3to4, match5to6, match1to3, match1to4, match1to6, matchUnsigned, matchSigned, matchOffset, matchShortOffset, matchTimestamp, matchWord, regexes, tokens, YEAR, MONTH, DATE, HOUR, MINUTE, SECOND, MILLISECOND, WEEK, WEEKDAY, indexOf, defaultLocaleMonths, defaultLocaleMonthsShort, MONTHS_IN_FORMAT, defaultMonthsShortRegex, defaultMonthsRegex, getSetYear, defaultLocaleWeek, defaultLocaleWeekdays, defaultLocaleWeekdaysShort, defaultLocaleWeekdaysMin, defaultWeekdaysRegex, defaultWeekdaysShortRegex, defaultWeekdaysMinRegex, defaultLocaleMeridiemParse, getSetHour, baseConfig, locales, localeFamilies, globalLocale, extendedIsoRegex, basicIsoRegex, tzRegex, isoDates, isoTimes, aspNetJsonRegex, rfc2822, obsOffsets, prototypeMin, prototypeMax, now, ordering, chunkOffset, aspNetRegex, isoRegex, add, subtract, lang, MS_PER_SECOND, MS_PER_MINUTE, MS_PER_HOUR, MS_PER_400_YEARS, getSetDayOfMonth, getSetMinute, getSetSecond, token, getSetMillisecond, proto, proto$1, mathAbs, asMilliseconds, asSeconds, asMinutes, asHours, asDays, asWeeks, asMonths, asQuarters, asYears, milliseconds, seconds, minutes, hours, days, months, years, round, thresholds, abs$1, proto$2, moment_default;
var init_moment = __esm({
  "node_modules/moment/dist/moment.js"() {
    if (Array.prototype.some) {
      some = Array.prototype.some;
    } else {
      some = function(fun) {
        var t = Object(this), len = t.length >>> 0, i;
        for (i = 0; i < len; i++) {
          if (i in t && fun.call(this, t[i], i, t)) {
            return true;
          }
        }
        return false;
      };
    }
    momentProperties = hooks.momentProperties = [];
    updateInProgress = false;
    deprecations = {};
    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;
    if (Object.keys) {
      keys = Object.keys;
    } else {
      keys = function(obj) {
        var i, res = [];
        for (i in obj) {
          if (hasOwnProp(obj, i)) {
            res.push(i);
          }
        }
        return res;
      };
    }
    defaultCalendar = {
      sameDay: "[Today at] LT",
      nextDay: "[Tomorrow at] LT",
      nextWeek: "dddd [at] LT",
      lastDay: "[Yesterday at] LT",
      lastWeek: "[Last] dddd [at] LT",
      sameElse: "L"
    };
    formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
    localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
    formatFunctions = {};
    formatTokenFunctions = {};
    defaultLongDateFormat = {
      LTS: "h:mm:ss A",
      LT: "h:mm A",
      L: "MM/DD/YYYY",
      LL: "MMMM D, YYYY",
      LLL: "MMMM D, YYYY h:mm A",
      LLLL: "dddd, MMMM D, YYYY h:mm A"
    };
    defaultInvalidDate = "Invalid date";
    defaultOrdinal = "%d";
    defaultDayOfMonthOrdinalParse = /\d{1,2}/;
    defaultRelativeTime = {
      future: "in %s",
      past: "%s ago",
      s: "a few seconds",
      ss: "%d seconds",
      m: "a minute",
      mm: "%d minutes",
      h: "an hour",
      hh: "%d hours",
      d: "a day",
      dd: "%d days",
      w: "a week",
      ww: "%d weeks",
      M: "a month",
      MM: "%d months",
      y: "a year",
      yy: "%d years"
    };
    aliases = {};
    priorities = {};
    match1 = /\d/;
    match2 = /\d\d/;
    match3 = /\d{3}/;
    match4 = /\d{4}/;
    match6 = /[+-]?\d{6}/;
    match1to2 = /\d\d?/;
    match3to4 = /\d\d\d\d?/;
    match5to6 = /\d\d\d\d\d\d?/;
    match1to3 = /\d{1,3}/;
    match1to4 = /\d{1,4}/;
    match1to6 = /[+-]?\d{1,6}/;
    matchUnsigned = /\d+/;
    matchSigned = /[+-]?\d+/;
    matchOffset = /Z|[+-]\d\d:?\d\d/gi;
    matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi;
    matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
    matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;
    regexes = {};
    tokens = {};
    YEAR = 0;
    MONTH = 1;
    DATE = 2;
    HOUR = 3;
    MINUTE = 4;
    SECOND = 5;
    MILLISECOND = 6;
    WEEK = 7;
    WEEKDAY = 8;
    if (Array.prototype.indexOf) {
      indexOf = Array.prototype.indexOf;
    } else {
      indexOf = function(o) {
        var i;
        for (i = 0; i < this.length; ++i) {
          if (this[i] === o) {
            return i;
          }
        }
        return -1;
      };
    }
    addFormatToken("M", ["MM", 2], "Mo", function() {
      return this.month() + 1;
    });
    addFormatToken("MMM", 0, 0, function(format2) {
      return this.localeData().monthsShort(this, format2);
    });
    addFormatToken("MMMM", 0, 0, function(format2) {
      return this.localeData().months(this, format2);
    });
    addUnitAlias("month", "M");
    addUnitPriority("month", 8);
    addRegexToken("M", match1to2);
    addRegexToken("MM", match1to2, match2);
    addRegexToken("MMM", function(isStrict, locale2) {
      return locale2.monthsShortRegex(isStrict);
    });
    addRegexToken("MMMM", function(isStrict, locale2) {
      return locale2.monthsRegex(isStrict);
    });
    addParseToken(["M", "MM"], function(input, array) {
      array[MONTH] = toInt(input) - 1;
    });
    addParseToken(["MMM", "MMMM"], function(input, array, config, token2) {
      var month = config._locale.monthsParse(input, token2, config._strict);
      if (month != null) {
        array[MONTH] = month;
      } else {
        getParsingFlags(config).invalidMonth = input;
      }
    });
    defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split(
      "_"
    );
    defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");
    MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    defaultMonthsShortRegex = matchWord;
    defaultMonthsRegex = matchWord;
    addFormatToken("Y", 0, 0, function() {
      var y = this.year();
      return y <= 9999 ? zeroFill(y, 4) : "+" + y;
    });
    addFormatToken(0, ["YY", 2], 0, function() {
      return this.year() % 100;
    });
    addFormatToken(0, ["YYYY", 4], 0, "year");
    addFormatToken(0, ["YYYYY", 5], 0, "year");
    addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
    addUnitAlias("year", "y");
    addUnitPriority("year", 1);
    addRegexToken("Y", matchSigned);
    addRegexToken("YY", match1to2, match2);
    addRegexToken("YYYY", match1to4, match4);
    addRegexToken("YYYYY", match1to6, match6);
    addRegexToken("YYYYYY", match1to6, match6);
    addParseToken(["YYYYY", "YYYYYY"], YEAR);
    addParseToken("YYYY", function(input, array) {
      array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken("YY", function(input, array) {
      array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken("Y", function(input, array) {
      array[YEAR] = parseInt(input, 10);
    });
    hooks.parseTwoDigitYear = function(input) {
      return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
    };
    getSetYear = makeGetSet("FullYear", true);
    addFormatToken("w", ["ww", 2], "wo", "week");
    addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
    addUnitAlias("week", "w");
    addUnitAlias("isoWeek", "W");
    addUnitPriority("week", 5);
    addUnitPriority("isoWeek", 5);
    addRegexToken("w", match1to2);
    addRegexToken("ww", match1to2, match2);
    addRegexToken("W", match1to2);
    addRegexToken("WW", match1to2, match2);
    addWeekParseToken(
      ["w", "ww", "W", "WW"],
      function(input, week, config, token2) {
        week[token2.substr(0, 1)] = toInt(input);
      }
    );
    defaultLocaleWeek = {
      dow: 0,
      // Sunday is the first day of the week.
      doy: 6
      // The week that contains Jan 6th is the first week of the year.
    };
    addFormatToken("d", 0, "do", "day");
    addFormatToken("dd", 0, 0, function(format2) {
      return this.localeData().weekdaysMin(this, format2);
    });
    addFormatToken("ddd", 0, 0, function(format2) {
      return this.localeData().weekdaysShort(this, format2);
    });
    addFormatToken("dddd", 0, 0, function(format2) {
      return this.localeData().weekdays(this, format2);
    });
    addFormatToken("e", 0, 0, "weekday");
    addFormatToken("E", 0, 0, "isoWeekday");
    addUnitAlias("day", "d");
    addUnitAlias("weekday", "e");
    addUnitAlias("isoWeekday", "E");
    addUnitPriority("day", 11);
    addUnitPriority("weekday", 11);
    addUnitPriority("isoWeekday", 11);
    addRegexToken("d", match1to2);
    addRegexToken("e", match1to2);
    addRegexToken("E", match1to2);
    addRegexToken("dd", function(isStrict, locale2) {
      return locale2.weekdaysMinRegex(isStrict);
    });
    addRegexToken("ddd", function(isStrict, locale2) {
      return locale2.weekdaysShortRegex(isStrict);
    });
    addRegexToken("dddd", function(isStrict, locale2) {
      return locale2.weekdaysRegex(isStrict);
    });
    addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config, token2) {
      var weekday = config._locale.weekdaysParse(input, token2, config._strict);
      if (weekday != null) {
        week.d = weekday;
      } else {
        getParsingFlags(config).invalidWeekday = input;
      }
    });
    addWeekParseToken(["d", "e", "E"], function(input, week, config, token2) {
      week[token2] = toInt(input);
    });
    defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_");
    defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_");
    defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_");
    defaultWeekdaysRegex = matchWord;
    defaultWeekdaysShortRegex = matchWord;
    defaultWeekdaysMinRegex = matchWord;
    addFormatToken("H", ["HH", 2], 0, "hour");
    addFormatToken("h", ["hh", 2], 0, hFormat);
    addFormatToken("k", ["kk", 2], 0, kFormat);
    addFormatToken("hmm", 0, 0, function() {
      return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });
    addFormatToken("hmmss", 0, 0, function() {
      return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    addFormatToken("Hmm", 0, 0, function() {
      return "" + this.hours() + zeroFill(this.minutes(), 2);
    });
    addFormatToken("Hmmss", 0, 0, function() {
      return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    meridiem("a", true);
    meridiem("A", false);
    addUnitAlias("hour", "h");
    addUnitPriority("hour", 13);
    addRegexToken("a", matchMeridiem);
    addRegexToken("A", matchMeridiem);
    addRegexToken("H", match1to2);
    addRegexToken("h", match1to2);
    addRegexToken("k", match1to2);
    addRegexToken("HH", match1to2, match2);
    addRegexToken("hh", match1to2, match2);
    addRegexToken("kk", match1to2, match2);
    addRegexToken("hmm", match3to4);
    addRegexToken("hmmss", match5to6);
    addRegexToken("Hmm", match3to4);
    addRegexToken("Hmmss", match5to6);
    addParseToken(["H", "HH"], HOUR);
    addParseToken(["k", "kk"], function(input, array, config) {
      var kInput = toInt(input);
      array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(["a", "A"], function(input, array, config) {
      config._isPm = config._locale.isPM(input);
      config._meridiem = input;
    });
    addParseToken(["h", "hh"], function(input, array, config) {
      array[HOUR] = toInt(input);
      getParsingFlags(config).bigHour = true;
    });
    addParseToken("hmm", function(input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
      getParsingFlags(config).bigHour = true;
    });
    addParseToken("hmmss", function(input, array, config) {
      var pos1 = input.length - 4, pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
      getParsingFlags(config).bigHour = true;
    });
    addParseToken("Hmm", function(input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken("Hmmss", function(input, array, config) {
      var pos1 = input.length - 4, pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
    });
    defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    getSetHour = makeGetSet("Hours", true);
    baseConfig = {
      calendar: defaultCalendar,
      longDateFormat: defaultLongDateFormat,
      invalidDate: defaultInvalidDate,
      ordinal: defaultOrdinal,
      dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
      relativeTime: defaultRelativeTime,
      months: defaultLocaleMonths,
      monthsShort: defaultLocaleMonthsShort,
      week: defaultLocaleWeek,
      weekdays: defaultLocaleWeekdays,
      weekdaysMin: defaultLocaleWeekdaysMin,
      weekdaysShort: defaultLocaleWeekdaysShort,
      meridiemParse: defaultLocaleMeridiemParse
    };
    locales = {};
    localeFamilies = {};
    extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
    isoDates = [
      ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
      ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
      ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
      ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
      ["YYYY-DDD", /\d{4}-\d{3}/],
      ["YYYY-MM", /\d{4}-\d\d/, false],
      ["YYYYYYMMDD", /[+-]\d{10}/],
      ["YYYYMMDD", /\d{8}/],
      ["GGGG[W]WWE", /\d{4}W\d{3}/],
      ["GGGG[W]WW", /\d{4}W\d{2}/, false],
      ["YYYYDDD", /\d{7}/],
      ["YYYYMM", /\d{6}/, false],
      ["YYYY", /\d{4}/, false]
    ];
    isoTimes = [
      ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
      ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
      ["HH:mm:ss", /\d\d:\d\d:\d\d/],
      ["HH:mm", /\d\d:\d\d/],
      ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
      ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
      ["HHmmss", /\d\d\d\d\d\d/],
      ["HHmm", /\d\d\d\d/],
      ["HH", /\d\d/]
    ];
    aspNetJsonRegex = /^\/?Date\((-?\d+)/i;
    rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;
    obsOffsets = {
      UT: 0,
      GMT: 0,
      EDT: -4 * 60,
      EST: -5 * 60,
      CDT: -5 * 60,
      CST: -6 * 60,
      MDT: -6 * 60,
      MST: -7 * 60,
      PDT: -7 * 60,
      PST: -8 * 60
    };
    hooks.createFromInputFallback = deprecate(
      "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
      function(config) {
        config._d = /* @__PURE__ */ new Date(config._i + (config._useUTC ? " UTC" : ""));
      }
    );
    hooks.ISO_8601 = function() {
    };
    hooks.RFC_2822 = function() {
    };
    prototypeMin = deprecate(
      "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
      function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other < this ? this : other;
        } else {
          return createInvalid();
        }
      }
    );
    prototypeMax = deprecate(
      "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
      function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other > this ? this : other;
        } else {
          return createInvalid();
        }
      }
    );
    now = function() {
      return Date.now ? Date.now() : +/* @__PURE__ */ new Date();
    };
    ordering = [
      "year",
      "quarter",
      "month",
      "week",
      "day",
      "hour",
      "minute",
      "second",
      "millisecond"
    ];
    offset("Z", ":");
    offset("ZZ", "");
    addRegexToken("Z", matchShortOffset);
    addRegexToken("ZZ", matchShortOffset);
    addParseToken(["Z", "ZZ"], function(input, array, config) {
      config._useUTC = true;
      config._tzm = offsetFromString(matchShortOffset, input);
    });
    chunkOffset = /([\+\-]|\d\d)/gi;
    hooks.updateOffset = function() {
    };
    aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/;
    isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;
    add = createAdder(1, "add");
    subtract = createAdder(-1, "subtract");
    hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
    hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
    lang = deprecate(
      "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
      function(key) {
        if (key === void 0) {
          return this.localeData();
        } else {
          return this.locale(key);
        }
      }
    );
    MS_PER_SECOND = 1e3;
    MS_PER_MINUTE = 60 * MS_PER_SECOND;
    MS_PER_HOUR = 60 * MS_PER_MINUTE;
    MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
    addFormatToken("N", 0, 0, "eraAbbr");
    addFormatToken("NN", 0, 0, "eraAbbr");
    addFormatToken("NNN", 0, 0, "eraAbbr");
    addFormatToken("NNNN", 0, 0, "eraName");
    addFormatToken("NNNNN", 0, 0, "eraNarrow");
    addFormatToken("y", ["y", 1], "yo", "eraYear");
    addFormatToken("y", ["yy", 2], 0, "eraYear");
    addFormatToken("y", ["yyy", 3], 0, "eraYear");
    addFormatToken("y", ["yyyy", 4], 0, "eraYear");
    addRegexToken("N", matchEraAbbr);
    addRegexToken("NN", matchEraAbbr);
    addRegexToken("NNN", matchEraAbbr);
    addRegexToken("NNNN", matchEraName);
    addRegexToken("NNNNN", matchEraNarrow);
    addParseToken(
      ["N", "NN", "NNN", "NNNN", "NNNNN"],
      function(input, array, config, token2) {
        var era = config._locale.erasParse(input, token2, config._strict);
        if (era) {
          getParsingFlags(config).era = era;
        } else {
          getParsingFlags(config).invalidEra = input;
        }
      }
    );
    addRegexToken("y", matchUnsigned);
    addRegexToken("yy", matchUnsigned);
    addRegexToken("yyy", matchUnsigned);
    addRegexToken("yyyy", matchUnsigned);
    addRegexToken("yo", matchEraYearOrdinal);
    addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
    addParseToken(["yo"], function(input, array, config, token2) {
      var match;
      if (config._locale._eraYearOrdinalRegex) {
        match = input.match(config._locale._eraYearOrdinalRegex);
      }
      if (config._locale.eraYearOrdinalParse) {
        array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
      } else {
        array[YEAR] = parseInt(input, 10);
      }
    });
    addFormatToken(0, ["gg", 2], 0, function() {
      return this.weekYear() % 100;
    });
    addFormatToken(0, ["GG", 2], 0, function() {
      return this.isoWeekYear() % 100;
    });
    addWeekYearFormatToken("gggg", "weekYear");
    addWeekYearFormatToken("ggggg", "weekYear");
    addWeekYearFormatToken("GGGG", "isoWeekYear");
    addWeekYearFormatToken("GGGGG", "isoWeekYear");
    addUnitAlias("weekYear", "gg");
    addUnitAlias("isoWeekYear", "GG");
    addUnitPriority("weekYear", 1);
    addUnitPriority("isoWeekYear", 1);
    addRegexToken("G", matchSigned);
    addRegexToken("g", matchSigned);
    addRegexToken("GG", match1to2, match2);
    addRegexToken("gg", match1to2, match2);
    addRegexToken("GGGG", match1to4, match4);
    addRegexToken("gggg", match1to4, match4);
    addRegexToken("GGGGG", match1to6, match6);
    addRegexToken("ggggg", match1to6, match6);
    addWeekParseToken(
      ["gggg", "ggggg", "GGGG", "GGGGG"],
      function(input, week, config, token2) {
        week[token2.substr(0, 2)] = toInt(input);
      }
    );
    addWeekParseToken(["gg", "GG"], function(input, week, config, token2) {
      week[token2] = hooks.parseTwoDigitYear(input);
    });
    addFormatToken("Q", 0, "Qo", "quarter");
    addUnitAlias("quarter", "Q");
    addUnitPriority("quarter", 7);
    addRegexToken("Q", match1);
    addParseToken("Q", function(input, array) {
      array[MONTH] = (toInt(input) - 1) * 3;
    });
    addFormatToken("D", ["DD", 2], "Do", "date");
    addUnitAlias("date", "D");
    addUnitPriority("date", 9);
    addRegexToken("D", match1to2);
    addRegexToken("DD", match1to2, match2);
    addRegexToken("Do", function(isStrict, locale2) {
      return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
    });
    addParseToken(["D", "DD"], DATE);
    addParseToken("Do", function(input, array) {
      array[DATE] = toInt(input.match(match1to2)[0]);
    });
    getSetDayOfMonth = makeGetSet("Date", true);
    addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
    addUnitAlias("dayOfYear", "DDD");
    addUnitPriority("dayOfYear", 4);
    addRegexToken("DDD", match1to3);
    addRegexToken("DDDD", match3);
    addParseToken(["DDD", "DDDD"], function(input, array, config) {
      config._dayOfYear = toInt(input);
    });
    addFormatToken("m", ["mm", 2], 0, "minute");
    addUnitAlias("minute", "m");
    addUnitPriority("minute", 14);
    addRegexToken("m", match1to2);
    addRegexToken("mm", match1to2, match2);
    addParseToken(["m", "mm"], MINUTE);
    getSetMinute = makeGetSet("Minutes", false);
    addFormatToken("s", ["ss", 2], 0, "second");
    addUnitAlias("second", "s");
    addUnitPriority("second", 15);
    addRegexToken("s", match1to2);
    addRegexToken("ss", match1to2, match2);
    addParseToken(["s", "ss"], SECOND);
    getSetSecond = makeGetSet("Seconds", false);
    addFormatToken("S", 0, 0, function() {
      return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, ["SS", 2], 0, function() {
      return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, ["SSS", 3], 0, "millisecond");
    addFormatToken(0, ["SSSS", 4], 0, function() {
      return this.millisecond() * 10;
    });
    addFormatToken(0, ["SSSSS", 5], 0, function() {
      return this.millisecond() * 100;
    });
    addFormatToken(0, ["SSSSSS", 6], 0, function() {
      return this.millisecond() * 1e3;
    });
    addFormatToken(0, ["SSSSSSS", 7], 0, function() {
      return this.millisecond() * 1e4;
    });
    addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
      return this.millisecond() * 1e5;
    });
    addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
      return this.millisecond() * 1e6;
    });
    addUnitAlias("millisecond", "ms");
    addUnitPriority("millisecond", 16);
    addRegexToken("S", match1to3, match1);
    addRegexToken("SS", match1to3, match2);
    addRegexToken("SSS", match1to3, match3);
    for (token = "SSSS"; token.length <= 9; token += "S") {
      addRegexToken(token, matchUnsigned);
    }
    for (token = "S"; token.length <= 9; token += "S") {
      addParseToken(token, parseMs);
    }
    getSetMillisecond = makeGetSet("Milliseconds", false);
    addFormatToken("z", 0, 0, "zoneAbbr");
    addFormatToken("zz", 0, 0, "zoneName");
    proto = Moment.prototype;
    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== "undefined" && Symbol.for != null) {
      proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return "Moment<" + this.format() + ">";
      };
    }
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate(
      "dates accessor is deprecated. Use date instead.",
      getSetDayOfMonth
    );
    proto.months = deprecate(
      "months accessor is deprecated. Use month instead",
      getSetMonth
    );
    proto.years = deprecate(
      "years accessor is deprecated. Use year instead",
      getSetYear
    );
    proto.zone = deprecate(
      "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
      getSetZone
    );
    proto.isDSTShifted = deprecate(
      "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
      isDaylightSavingTimeShifted
    );
    proto$1 = Locale.prototype;
    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;
    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;
    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;
    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;
    getSetGlobalLocale("en", {
      eras: [
        {
          since: "0001-01-01",
          until: Infinity,
          offset: 1,
          name: "Anno Domini",
          narrow: "AD",
          abbr: "AD"
        },
        {
          since: "0000-12-31",
          until: -Infinity,
          offset: 1,
          name: "Before Christ",
          narrow: "BC",
          abbr: "BC"
        }
      ],
      dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal: function(number) {
        var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
        return number + output;
      }
    });
    hooks.lang = deprecate(
      "moment.lang is deprecated. Use moment.locale instead.",
      getSetGlobalLocale
    );
    hooks.langData = deprecate(
      "moment.langData is deprecated. Use moment.localeData instead.",
      getLocale
    );
    mathAbs = Math.abs;
    asMilliseconds = makeAs("ms");
    asSeconds = makeAs("s");
    asMinutes = makeAs("m");
    asHours = makeAs("h");
    asDays = makeAs("d");
    asWeeks = makeAs("w");
    asMonths = makeAs("M");
    asQuarters = makeAs("Q");
    asYears = makeAs("y");
    milliseconds = makeGetter("milliseconds");
    seconds = makeGetter("seconds");
    minutes = makeGetter("minutes");
    hours = makeGetter("hours");
    days = makeGetter("days");
    months = makeGetter("months");
    years = makeGetter("years");
    round = Math.round;
    thresholds = {
      ss: 44,
      // a few seconds to seconds
      s: 45,
      // seconds to minute
      m: 45,
      // minutes to hour
      h: 22,
      // hours to day
      d: 26,
      // days to month/week
      w: null,
      // weeks to month
      M: 11
      // months to year
    };
    abs$1 = Math.abs;
    proto$2 = Duration.prototype;
    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;
    proto$2.toIsoString = deprecate(
      "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
      toISOString$1
    );
    proto$2.lang = lang;
    addFormatToken("X", 0, 0, "unix");
    addFormatToken("x", 0, 0, "valueOf");
    addRegexToken("x", matchSigned);
    addRegexToken("X", matchTimestamp);
    addParseToken("X", function(input, array, config) {
      config._d = new Date(parseFloat(input) * 1e3);
    });
    addParseToken("x", function(input, array, config) {
      config._d = new Date(toInt(input));
    });
    hooks.version = "2.29.4";
    setHookCallback(createLocal);
    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;
    hooks.HTML5_FMT = {
      DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
      // <input type="datetime-local" />
      DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
      // <input type="datetime-local" step="1" />
      DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
      // <input type="datetime-local" step="0.001" />
      DATE: "YYYY-MM-DD",
      // <input type="date" />
      TIME: "HH:mm",
      // <input type="time" />
      TIME_SECONDS: "HH:mm:ss",
      // <input type="time" step="1" />
      TIME_MS: "HH:mm:ss.SSS",
      // <input type="time" step="0.001" />
      WEEK: "GGGG-[W]WW",
      // <input type="week" />
      MONTH: "YYYY-MM"
      // <input type="month" />
    };
    moment_default = hooks;
  }
});

// node_modules/chart.js/dist/Chart.js
var require_Chart = __commonJS({
  "node_modules/chart.js/dist/Chart.js"(exports, module2) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? module2.exports = factory(function() {
        try {
          return init_moment(), __toCommonJS(moment_exports);
        } catch (e) {
        }
      }()) : typeof define === "function" && define.amd ? define(["require"], function(require2) {
        return factory(function() {
          try {
            return require2("moment");
          } catch (e) {
          }
        }());
      }) : (global2 = global2 || self, global2.Chart = factory(global2.moment));
    })(exports, function(moment) {
      "use strict";
      moment = moment && moment.hasOwnProperty("default") ? moment["default"] : moment;
      function createCommonjsModule(fn, module3) {
        return module3 = { exports: {} }, fn(module3, module3.exports), module3.exports;
      }
      function getCjsExportFromNamespace(n) {
        return n && n["default"] || n;
      }
      var colorName = {
        "aliceblue": [240, 248, 255],
        "antiquewhite": [250, 235, 215],
        "aqua": [0, 255, 255],
        "aquamarine": [127, 255, 212],
        "azure": [240, 255, 255],
        "beige": [245, 245, 220],
        "bisque": [255, 228, 196],
        "black": [0, 0, 0],
        "blanchedalmond": [255, 235, 205],
        "blue": [0, 0, 255],
        "blueviolet": [138, 43, 226],
        "brown": [165, 42, 42],
        "burlywood": [222, 184, 135],
        "cadetblue": [95, 158, 160],
        "chartreuse": [127, 255, 0],
        "chocolate": [210, 105, 30],
        "coral": [255, 127, 80],
        "cornflowerblue": [100, 149, 237],
        "cornsilk": [255, 248, 220],
        "crimson": [220, 20, 60],
        "cyan": [0, 255, 255],
        "darkblue": [0, 0, 139],
        "darkcyan": [0, 139, 139],
        "darkgoldenrod": [184, 134, 11],
        "darkgray": [169, 169, 169],
        "darkgreen": [0, 100, 0],
        "darkgrey": [169, 169, 169],
        "darkkhaki": [189, 183, 107],
        "darkmagenta": [139, 0, 139],
        "darkolivegreen": [85, 107, 47],
        "darkorange": [255, 140, 0],
        "darkorchid": [153, 50, 204],
        "darkred": [139, 0, 0],
        "darksalmon": [233, 150, 122],
        "darkseagreen": [143, 188, 143],
        "darkslateblue": [72, 61, 139],
        "darkslategray": [47, 79, 79],
        "darkslategrey": [47, 79, 79],
        "darkturquoise": [0, 206, 209],
        "darkviolet": [148, 0, 211],
        "deeppink": [255, 20, 147],
        "deepskyblue": [0, 191, 255],
        "dimgray": [105, 105, 105],
        "dimgrey": [105, 105, 105],
        "dodgerblue": [30, 144, 255],
        "firebrick": [178, 34, 34],
        "floralwhite": [255, 250, 240],
        "forestgreen": [34, 139, 34],
        "fuchsia": [255, 0, 255],
        "gainsboro": [220, 220, 220],
        "ghostwhite": [248, 248, 255],
        "gold": [255, 215, 0],
        "goldenrod": [218, 165, 32],
        "gray": [128, 128, 128],
        "green": [0, 128, 0],
        "greenyellow": [173, 255, 47],
        "grey": [128, 128, 128],
        "honeydew": [240, 255, 240],
        "hotpink": [255, 105, 180],
        "indianred": [205, 92, 92],
        "indigo": [75, 0, 130],
        "ivory": [255, 255, 240],
        "khaki": [240, 230, 140],
        "lavender": [230, 230, 250],
        "lavenderblush": [255, 240, 245],
        "lawngreen": [124, 252, 0],
        "lemonchiffon": [255, 250, 205],
        "lightblue": [173, 216, 230],
        "lightcoral": [240, 128, 128],
        "lightcyan": [224, 255, 255],
        "lightgoldenrodyellow": [250, 250, 210],
        "lightgray": [211, 211, 211],
        "lightgreen": [144, 238, 144],
        "lightgrey": [211, 211, 211],
        "lightpink": [255, 182, 193],
        "lightsalmon": [255, 160, 122],
        "lightseagreen": [32, 178, 170],
        "lightskyblue": [135, 206, 250],
        "lightslategray": [119, 136, 153],
        "lightslategrey": [119, 136, 153],
        "lightsteelblue": [176, 196, 222],
        "lightyellow": [255, 255, 224],
        "lime": [0, 255, 0],
        "limegreen": [50, 205, 50],
        "linen": [250, 240, 230],
        "magenta": [255, 0, 255],
        "maroon": [128, 0, 0],
        "mediumaquamarine": [102, 205, 170],
        "mediumblue": [0, 0, 205],
        "mediumorchid": [186, 85, 211],
        "mediumpurple": [147, 112, 219],
        "mediumseagreen": [60, 179, 113],
        "mediumslateblue": [123, 104, 238],
        "mediumspringgreen": [0, 250, 154],
        "mediumturquoise": [72, 209, 204],
        "mediumvioletred": [199, 21, 133],
        "midnightblue": [25, 25, 112],
        "mintcream": [245, 255, 250],
        "mistyrose": [255, 228, 225],
        "moccasin": [255, 228, 181],
        "navajowhite": [255, 222, 173],
        "navy": [0, 0, 128],
        "oldlace": [253, 245, 230],
        "olive": [128, 128, 0],
        "olivedrab": [107, 142, 35],
        "orange": [255, 165, 0],
        "orangered": [255, 69, 0],
        "orchid": [218, 112, 214],
        "palegoldenrod": [238, 232, 170],
        "palegreen": [152, 251, 152],
        "paleturquoise": [175, 238, 238],
        "palevioletred": [219, 112, 147],
        "papayawhip": [255, 239, 213],
        "peachpuff": [255, 218, 185],
        "peru": [205, 133, 63],
        "pink": [255, 192, 203],
        "plum": [221, 160, 221],
        "powderblue": [176, 224, 230],
        "purple": [128, 0, 128],
        "rebeccapurple": [102, 51, 153],
        "red": [255, 0, 0],
        "rosybrown": [188, 143, 143],
        "royalblue": [65, 105, 225],
        "saddlebrown": [139, 69, 19],
        "salmon": [250, 128, 114],
        "sandybrown": [244, 164, 96],
        "seagreen": [46, 139, 87],
        "seashell": [255, 245, 238],
        "sienna": [160, 82, 45],
        "silver": [192, 192, 192],
        "skyblue": [135, 206, 235],
        "slateblue": [106, 90, 205],
        "slategray": [112, 128, 144],
        "slategrey": [112, 128, 144],
        "snow": [255, 250, 250],
        "springgreen": [0, 255, 127],
        "steelblue": [70, 130, 180],
        "tan": [210, 180, 140],
        "teal": [0, 128, 128],
        "thistle": [216, 191, 216],
        "tomato": [255, 99, 71],
        "turquoise": [64, 224, 208],
        "violet": [238, 130, 238],
        "wheat": [245, 222, 179],
        "white": [255, 255, 255],
        "whitesmoke": [245, 245, 245],
        "yellow": [255, 255, 0],
        "yellowgreen": [154, 205, 50]
      };
      var conversions = createCommonjsModule(function(module3) {
        var reverseKeywords = {};
        for (var key in colorName) {
          if (colorName.hasOwnProperty(key)) {
            reverseKeywords[colorName[key]] = key;
          }
        }
        var convert2 = module3.exports = {
          rgb: { channels: 3, labels: "rgb" },
          hsl: { channels: 3, labels: "hsl" },
          hsv: { channels: 3, labels: "hsv" },
          hwb: { channels: 3, labels: "hwb" },
          cmyk: { channels: 4, labels: "cmyk" },
          xyz: { channels: 3, labels: "xyz" },
          lab: { channels: 3, labels: "lab" },
          lch: { channels: 3, labels: "lch" },
          hex: { channels: 1, labels: ["hex"] },
          keyword: { channels: 1, labels: ["keyword"] },
          ansi16: { channels: 1, labels: ["ansi16"] },
          ansi256: { channels: 1, labels: ["ansi256"] },
          hcg: { channels: 3, labels: ["h", "c", "g"] },
          apple: { channels: 3, labels: ["r16", "g16", "b16"] },
          gray: { channels: 1, labels: ["gray"] }
        };
        for (var model in convert2) {
          if (convert2.hasOwnProperty(model)) {
            if (!("channels" in convert2[model])) {
              throw new Error("missing channels property: " + model);
            }
            if (!("labels" in convert2[model])) {
              throw new Error("missing channel labels property: " + model);
            }
            if (convert2[model].labels.length !== convert2[model].channels) {
              throw new Error("channel and label counts mismatch: " + model);
            }
            var channels = convert2[model].channels;
            var labels = convert2[model].labels;
            delete convert2[model].channels;
            delete convert2[model].labels;
            Object.defineProperty(convert2[model], "channels", { value: channels });
            Object.defineProperty(convert2[model], "labels", { value: labels });
          }
        }
        convert2.rgb.hsl = function(rgb) {
          var r = rgb[0] / 255;
          var g = rgb[1] / 255;
          var b = rgb[2] / 255;
          var min2 = Math.min(r, g, b);
          var max2 = Math.max(r, g, b);
          var delta = max2 - min2;
          var h;
          var s;
          var l;
          if (max2 === min2) {
            h = 0;
          } else if (r === max2) {
            h = (g - b) / delta;
          } else if (g === max2) {
            h = 2 + (b - r) / delta;
          } else if (b === max2) {
            h = 4 + (r - g) / delta;
          }
          h = Math.min(h * 60, 360);
          if (h < 0) {
            h += 360;
          }
          l = (min2 + max2) / 2;
          if (max2 === min2) {
            s = 0;
          } else if (l <= 0.5) {
            s = delta / (max2 + min2);
          } else {
            s = delta / (2 - max2 - min2);
          }
          return [h, s * 100, l * 100];
        };
        convert2.rgb.hsv = function(rgb) {
          var rdif;
          var gdif;
          var bdif;
          var h;
          var s;
          var r = rgb[0] / 255;
          var g = rgb[1] / 255;
          var b = rgb[2] / 255;
          var v = Math.max(r, g, b);
          var diff2 = v - Math.min(r, g, b);
          var diffc = function(c) {
            return (v - c) / 6 / diff2 + 1 / 2;
          };
          if (diff2 === 0) {
            h = s = 0;
          } else {
            s = diff2 / v;
            rdif = diffc(r);
            gdif = diffc(g);
            bdif = diffc(b);
            if (r === v) {
              h = bdif - gdif;
            } else if (g === v) {
              h = 1 / 3 + rdif - bdif;
            } else if (b === v) {
              h = 2 / 3 + gdif - rdif;
            }
            if (h < 0) {
              h += 1;
            } else if (h > 1) {
              h -= 1;
            }
          }
          return [
            h * 360,
            s * 100,
            v * 100
          ];
        };
        convert2.rgb.hwb = function(rgb) {
          var r = rgb[0];
          var g = rgb[1];
          var b = rgb[2];
          var h = convert2.rgb.hsl(rgb)[0];
          var w = 1 / 255 * Math.min(r, Math.min(g, b));
          b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
          return [h, w * 100, b * 100];
        };
        convert2.rgb.cmyk = function(rgb) {
          var r = rgb[0] / 255;
          var g = rgb[1] / 255;
          var b = rgb[2] / 255;
          var c;
          var m;
          var y;
          var k2;
          k2 = Math.min(1 - r, 1 - g, 1 - b);
          c = (1 - r - k2) / (1 - k2) || 0;
          m = (1 - g - k2) / (1 - k2) || 0;
          y = (1 - b - k2) / (1 - k2) || 0;
          return [c * 100, m * 100, y * 100, k2 * 100];
        };
        function comparativeDistance(x, y) {
          return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
        }
        convert2.rgb.keyword = function(rgb) {
          var reversed = reverseKeywords[rgb];
          if (reversed) {
            return reversed;
          }
          var currentClosestDistance = Infinity;
          var currentClosestKeyword;
          for (var keyword2 in colorName) {
            if (colorName.hasOwnProperty(keyword2)) {
              var value = colorName[keyword2];
              var distance = comparativeDistance(rgb, value);
              if (distance < currentClosestDistance) {
                currentClosestDistance = distance;
                currentClosestKeyword = keyword2;
              }
            }
          }
          return currentClosestKeyword;
        };
        convert2.keyword.rgb = function(keyword2) {
          return colorName[keyword2];
        };
        convert2.rgb.xyz = function(rgb) {
          var r = rgb[0] / 255;
          var g = rgb[1] / 255;
          var b = rgb[2] / 255;
          r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
          g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
          b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
          var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
          var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
          var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
          return [x * 100, y * 100, z * 100];
        };
        convert2.rgb.lab = function(rgb) {
          var xyz = convert2.rgb.xyz(rgb);
          var x = xyz[0];
          var y = xyz[1];
          var z = xyz[2];
          var l;
          var a;
          var b;
          x /= 95.047;
          y /= 100;
          z /= 108.883;
          x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
          y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
          z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
          l = 116 * y - 16;
          a = 500 * (x - y);
          b = 200 * (y - z);
          return [l, a, b];
        };
        convert2.hsl.rgb = function(hsl) {
          var h = hsl[0] / 360;
          var s = hsl[1] / 100;
          var l = hsl[2] / 100;
          var t1;
          var t2;
          var t3;
          var rgb;
          var val;
          if (s === 0) {
            val = l * 255;
            return [val, val, val];
          }
          if (l < 0.5) {
            t2 = l * (1 + s);
          } else {
            t2 = l + s - l * s;
          }
          t1 = 2 * l - t2;
          rgb = [0, 0, 0];
          for (var i = 0; i < 3; i++) {
            t3 = h + 1 / 3 * -(i - 1);
            if (t3 < 0) {
              t3++;
            }
            if (t3 > 1) {
              t3--;
            }
            if (6 * t3 < 1) {
              val = t1 + (t2 - t1) * 6 * t3;
            } else if (2 * t3 < 1) {
              val = t2;
            } else if (3 * t3 < 2) {
              val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
            } else {
              val = t1;
            }
            rgb[i] = val * 255;
          }
          return rgb;
        };
        convert2.hsl.hsv = function(hsl) {
          var h = hsl[0];
          var s = hsl[1] / 100;
          var l = hsl[2] / 100;
          var smin = s;
          var lmin = Math.max(l, 0.01);
          var sv;
          var v;
          l *= 2;
          s *= l <= 1 ? l : 2 - l;
          smin *= lmin <= 1 ? lmin : 2 - lmin;
          v = (l + s) / 2;
          sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
          return [h, sv * 100, v * 100];
        };
        convert2.hsv.rgb = function(hsv) {
          var h = hsv[0] / 60;
          var s = hsv[1] / 100;
          var v = hsv[2] / 100;
          var hi = Math.floor(h) % 6;
          var f = h - Math.floor(h);
          var p = 255 * v * (1 - s);
          var q = 255 * v * (1 - s * f);
          var t = 255 * v * (1 - s * (1 - f));
          v *= 255;
          switch (hi) {
            case 0:
              return [v, t, p];
            case 1:
              return [q, v, p];
            case 2:
              return [p, v, t];
            case 3:
              return [p, q, v];
            case 4:
              return [t, p, v];
            case 5:
              return [v, p, q];
          }
        };
        convert2.hsv.hsl = function(hsv) {
          var h = hsv[0];
          var s = hsv[1] / 100;
          var v = hsv[2] / 100;
          var vmin = Math.max(v, 0.01);
          var lmin;
          var sl;
          var l;
          l = (2 - s) * v;
          lmin = (2 - s) * vmin;
          sl = s * vmin;
          sl /= lmin <= 1 ? lmin : 2 - lmin;
          sl = sl || 0;
          l /= 2;
          return [h, sl * 100, l * 100];
        };
        convert2.hwb.rgb = function(hwb) {
          var h = hwb[0] / 360;
          var wh = hwb[1] / 100;
          var bl = hwb[2] / 100;
          var ratio = wh + bl;
          var i;
          var v;
          var f;
          var n;
          if (ratio > 1) {
            wh /= ratio;
            bl /= ratio;
          }
          i = Math.floor(6 * h);
          v = 1 - bl;
          f = 6 * h - i;
          if ((i & 1) !== 0) {
            f = 1 - f;
          }
          n = wh + f * (v - wh);
          var r;
          var g;
          var b;
          switch (i) {
            default:
            case 6:
            case 0:
              r = v;
              g = n;
              b = wh;
              break;
            case 1:
              r = n;
              g = v;
              b = wh;
              break;
            case 2:
              r = wh;
              g = v;
              b = n;
              break;
            case 3:
              r = wh;
              g = n;
              b = v;
              break;
            case 4:
              r = n;
              g = wh;
              b = v;
              break;
            case 5:
              r = v;
              g = wh;
              b = n;
              break;
          }
          return [r * 255, g * 255, b * 255];
        };
        convert2.cmyk.rgb = function(cmyk) {
          var c = cmyk[0] / 100;
          var m = cmyk[1] / 100;
          var y = cmyk[2] / 100;
          var k2 = cmyk[3] / 100;
          var r;
          var g;
          var b;
          r = 1 - Math.min(1, c * (1 - k2) + k2);
          g = 1 - Math.min(1, m * (1 - k2) + k2);
          b = 1 - Math.min(1, y * (1 - k2) + k2);
          return [r * 255, g * 255, b * 255];
        };
        convert2.xyz.rgb = function(xyz) {
          var x = xyz[0] / 100;
          var y = xyz[1] / 100;
          var z = xyz[2] / 100;
          var r;
          var g;
          var b;
          r = x * 3.2406 + y * -1.5372 + z * -0.4986;
          g = x * -0.9689 + y * 1.8758 + z * 0.0415;
          b = x * 0.0557 + y * -0.204 + z * 1.057;
          r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
          g = g > 31308e-7 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92;
          b = b > 31308e-7 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
          r = Math.min(Math.max(0, r), 1);
          g = Math.min(Math.max(0, g), 1);
          b = Math.min(Math.max(0, b), 1);
          return [r * 255, g * 255, b * 255];
        };
        convert2.xyz.lab = function(xyz) {
          var x = xyz[0];
          var y = xyz[1];
          var z = xyz[2];
          var l;
          var a;
          var b;
          x /= 95.047;
          y /= 100;
          z /= 108.883;
          x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
          y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
          z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
          l = 116 * y - 16;
          a = 500 * (x - y);
          b = 200 * (y - z);
          return [l, a, b];
        };
        convert2.lab.xyz = function(lab) {
          var l = lab[0];
          var a = lab[1];
          var b = lab[2];
          var x;
          var y;
          var z;
          y = (l + 16) / 116;
          x = a / 500 + y;
          z = y - b / 200;
          var y2 = Math.pow(y, 3);
          var x2 = Math.pow(x, 3);
          var z2 = Math.pow(z, 3);
          y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
          x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
          z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
          x *= 95.047;
          y *= 100;
          z *= 108.883;
          return [x, y, z];
        };
        convert2.lab.lch = function(lab) {
          var l = lab[0];
          var a = lab[1];
          var b = lab[2];
          var hr;
          var h;
          var c;
          hr = Math.atan2(b, a);
          h = hr * 360 / 2 / Math.PI;
          if (h < 0) {
            h += 360;
          }
          c = Math.sqrt(a * a + b * b);
          return [l, c, h];
        };
        convert2.lch.lab = function(lch) {
          var l = lch[0];
          var c = lch[1];
          var h = lch[2];
          var a;
          var b;
          var hr;
          hr = h / 360 * 2 * Math.PI;
          a = c * Math.cos(hr);
          b = c * Math.sin(hr);
          return [l, a, b];
        };
        convert2.rgb.ansi16 = function(args) {
          var r = args[0];
          var g = args[1];
          var b = args[2];
          var value = 1 in arguments ? arguments[1] : convert2.rgb.hsv(args)[2];
          value = Math.round(value / 50);
          if (value === 0) {
            return 30;
          }
          var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
          if (value === 2) {
            ansi += 60;
          }
          return ansi;
        };
        convert2.hsv.ansi16 = function(args) {
          return convert2.rgb.ansi16(convert2.hsv.rgb(args), args[2]);
        };
        convert2.rgb.ansi256 = function(args) {
          var r = args[0];
          var g = args[1];
          var b = args[2];
          if (r === g && g === b) {
            if (r < 8) {
              return 16;
            }
            if (r > 248) {
              return 231;
            }
            return Math.round((r - 8) / 247 * 24) + 232;
          }
          var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
          return ansi;
        };
        convert2.ansi16.rgb = function(args) {
          var color = args % 10;
          if (color === 0 || color === 7) {
            if (args > 50) {
              color += 3.5;
            }
            color = color / 10.5 * 255;
            return [color, color, color];
          }
          var mult = (~~(args > 50) + 1) * 0.5;
          var r = (color & 1) * mult * 255;
          var g = (color >> 1 & 1) * mult * 255;
          var b = (color >> 2 & 1) * mult * 255;
          return [r, g, b];
        };
        convert2.ansi256.rgb = function(args) {
          if (args >= 232) {
            var c = (args - 232) * 10 + 8;
            return [c, c, c];
          }
          args -= 16;
          var rem;
          var r = Math.floor(args / 36) / 5 * 255;
          var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
          var b = rem % 6 / 5 * 255;
          return [r, g, b];
        };
        convert2.rgb.hex = function(args) {
          var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
          var string = integer.toString(16).toUpperCase();
          return "000000".substring(string.length) + string;
        };
        convert2.hex.rgb = function(args) {
          var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
          if (!match) {
            return [0, 0, 0];
          }
          var colorString2 = match[0];
          if (match[0].length === 3) {
            colorString2 = colorString2.split("").map(function(char) {
              return char + char;
            }).join("");
          }
          var integer = parseInt(colorString2, 16);
          var r = integer >> 16 & 255;
          var g = integer >> 8 & 255;
          var b = integer & 255;
          return [r, g, b];
        };
        convert2.rgb.hcg = function(rgb) {
          var r = rgb[0] / 255;
          var g = rgb[1] / 255;
          var b = rgb[2] / 255;
          var max2 = Math.max(Math.max(r, g), b);
          var min2 = Math.min(Math.min(r, g), b);
          var chroma = max2 - min2;
          var grayscale;
          var hue;
          if (chroma < 1) {
            grayscale = min2 / (1 - chroma);
          } else {
            grayscale = 0;
          }
          if (chroma <= 0) {
            hue = 0;
          } else if (max2 === r) {
            hue = (g - b) / chroma % 6;
          } else if (max2 === g) {
            hue = 2 + (b - r) / chroma;
          } else {
            hue = 4 + (r - g) / chroma + 4;
          }
          hue /= 6;
          hue %= 1;
          return [hue * 360, chroma * 100, grayscale * 100];
        };
        convert2.hsl.hcg = function(hsl) {
          var s = hsl[1] / 100;
          var l = hsl[2] / 100;
          var c = 1;
          var f = 0;
          if (l < 0.5) {
            c = 2 * s * l;
          } else {
            c = 2 * s * (1 - l);
          }
          if (c < 1) {
            f = (l - 0.5 * c) / (1 - c);
          }
          return [hsl[0], c * 100, f * 100];
        };
        convert2.hsv.hcg = function(hsv) {
          var s = hsv[1] / 100;
          var v = hsv[2] / 100;
          var c = s * v;
          var f = 0;
          if (c < 1) {
            f = (v - c) / (1 - c);
          }
          return [hsv[0], c * 100, f * 100];
        };
        convert2.hcg.rgb = function(hcg) {
          var h = hcg[0] / 360;
          var c = hcg[1] / 100;
          var g = hcg[2] / 100;
          if (c === 0) {
            return [g * 255, g * 255, g * 255];
          }
          var pure = [0, 0, 0];
          var hi = h % 1 * 6;
          var v = hi % 1;
          var w = 1 - v;
          var mg = 0;
          switch (Math.floor(hi)) {
            case 0:
              pure[0] = 1;
              pure[1] = v;
              pure[2] = 0;
              break;
            case 1:
              pure[0] = w;
              pure[1] = 1;
              pure[2] = 0;
              break;
            case 2:
              pure[0] = 0;
              pure[1] = 1;
              pure[2] = v;
              break;
            case 3:
              pure[0] = 0;
              pure[1] = w;
              pure[2] = 1;
              break;
            case 4:
              pure[0] = v;
              pure[1] = 0;
              pure[2] = 1;
              break;
            default:
              pure[0] = 1;
              pure[1] = 0;
              pure[2] = w;
          }
          mg = (1 - c) * g;
          return [
            (c * pure[0] + mg) * 255,
            (c * pure[1] + mg) * 255,
            (c * pure[2] + mg) * 255
          ];
        };
        convert2.hcg.hsv = function(hcg) {
          var c = hcg[1] / 100;
          var g = hcg[2] / 100;
          var v = c + g * (1 - c);
          var f = 0;
          if (v > 0) {
            f = c / v;
          }
          return [hcg[0], f * 100, v * 100];
        };
        convert2.hcg.hsl = function(hcg) {
          var c = hcg[1] / 100;
          var g = hcg[2] / 100;
          var l = g * (1 - c) + 0.5 * c;
          var s = 0;
          if (l > 0 && l < 0.5) {
            s = c / (2 * l);
          } else if (l >= 0.5 && l < 1) {
            s = c / (2 * (1 - l));
          }
          return [hcg[0], s * 100, l * 100];
        };
        convert2.hcg.hwb = function(hcg) {
          var c = hcg[1] / 100;
          var g = hcg[2] / 100;
          var v = c + g * (1 - c);
          return [hcg[0], (v - c) * 100, (1 - v) * 100];
        };
        convert2.hwb.hcg = function(hwb) {
          var w = hwb[1] / 100;
          var b = hwb[2] / 100;
          var v = 1 - b;
          var c = v - w;
          var g = 0;
          if (c < 1) {
            g = (v - c) / (1 - c);
          }
          return [hwb[0], c * 100, g * 100];
        };
        convert2.apple.rgb = function(apple) {
          return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
        };
        convert2.rgb.apple = function(rgb) {
          return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
        };
        convert2.gray.rgb = function(args) {
          return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
        };
        convert2.gray.hsl = convert2.gray.hsv = function(args) {
          return [0, 0, args[0]];
        };
        convert2.gray.hwb = function(gray) {
          return [0, 100, gray[0]];
        };
        convert2.gray.cmyk = function(gray) {
          return [0, 0, 0, gray[0]];
        };
        convert2.gray.lab = function(gray) {
          return [gray[0], 0, 0];
        };
        convert2.gray.hex = function(gray) {
          var val = Math.round(gray[0] / 100 * 255) & 255;
          var integer = (val << 16) + (val << 8) + val;
          var string = integer.toString(16).toUpperCase();
          return "000000".substring(string.length) + string;
        };
        convert2.rgb.gray = function(rgb) {
          var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
          return [val / 255 * 100];
        };
      });
      var conversions_1 = conversions.rgb;
      var conversions_2 = conversions.hsl;
      var conversions_3 = conversions.hsv;
      var conversions_4 = conversions.hwb;
      var conversions_5 = conversions.cmyk;
      var conversions_6 = conversions.xyz;
      var conversions_7 = conversions.lab;
      var conversions_8 = conversions.lch;
      var conversions_9 = conversions.hex;
      var conversions_10 = conversions.keyword;
      var conversions_11 = conversions.ansi16;
      var conversions_12 = conversions.ansi256;
      var conversions_13 = conversions.hcg;
      var conversions_14 = conversions.apple;
      var conversions_15 = conversions.gray;
      function buildGraph() {
        var graph = {};
        var models2 = Object.keys(conversions);
        for (var len = models2.length, i = 0; i < len; i++) {
          graph[models2[i]] = {
            // http://jsperf.com/1-vs-infinity
            // micro-opt, but this is simple.
            distance: -1,
            parent: null
          };
        }
        return graph;
      }
      function deriveBFS(fromModel) {
        var graph = buildGraph();
        var queue = [fromModel];
        graph[fromModel].distance = 0;
        while (queue.length) {
          var current = queue.pop();
          var adjacents = Object.keys(conversions[current]);
          for (var len = adjacents.length, i = 0; i < len; i++) {
            var adjacent = adjacents[i];
            var node = graph[adjacent];
            if (node.distance === -1) {
              node.distance = graph[current].distance + 1;
              node.parent = current;
              queue.unshift(adjacent);
            }
          }
        }
        return graph;
      }
      function link(from2, to2) {
        return function(args) {
          return to2(from2(args));
        };
      }
      function wrapConversion(toModel, graph) {
        var path = [graph[toModel].parent, toModel];
        var fn = conversions[graph[toModel].parent][toModel];
        var cur = graph[toModel].parent;
        while (graph[cur].parent) {
          path.unshift(graph[cur].parent);
          fn = link(conversions[graph[cur].parent][cur], fn);
          cur = graph[cur].parent;
        }
        fn.conversion = path;
        return fn;
      }
      var route = function(fromModel) {
        var graph = deriveBFS(fromModel);
        var conversion = {};
        var models2 = Object.keys(graph);
        for (var len = models2.length, i = 0; i < len; i++) {
          var toModel = models2[i];
          var node = graph[toModel];
          if (node.parent === null) {
            continue;
          }
          conversion[toModel] = wrapConversion(toModel, graph);
        }
        return conversion;
      };
      var convert = {};
      var models = Object.keys(conversions);
      function wrapRaw(fn) {
        var wrappedFn = function(args) {
          if (args === void 0 || args === null) {
            return args;
          }
          if (arguments.length > 1) {
            args = Array.prototype.slice.call(arguments);
          }
          return fn(args);
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      function wrapRounded(fn) {
        var wrappedFn = function(args) {
          if (args === void 0 || args === null) {
            return args;
          }
          if (arguments.length > 1) {
            args = Array.prototype.slice.call(arguments);
          }
          var result = fn(args);
          if (typeof result === "object") {
            for (var len = result.length, i = 0; i < len; i++) {
              result[i] = Math.round(result[i]);
            }
          }
          return result;
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      models.forEach(function(fromModel) {
        convert[fromModel] = {};
        Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
        Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
        var routes = route(fromModel);
        var routeModels = Object.keys(routes);
        routeModels.forEach(function(toModel) {
          var fn = routes[toModel];
          convert[fromModel][toModel] = wrapRounded(fn);
          convert[fromModel][toModel].raw = wrapRaw(fn);
        });
      });
      var colorConvert = convert;
      var colorName$1 = {
        "aliceblue": [240, 248, 255],
        "antiquewhite": [250, 235, 215],
        "aqua": [0, 255, 255],
        "aquamarine": [127, 255, 212],
        "azure": [240, 255, 255],
        "beige": [245, 245, 220],
        "bisque": [255, 228, 196],
        "black": [0, 0, 0],
        "blanchedalmond": [255, 235, 205],
        "blue": [0, 0, 255],
        "blueviolet": [138, 43, 226],
        "brown": [165, 42, 42],
        "burlywood": [222, 184, 135],
        "cadetblue": [95, 158, 160],
        "chartreuse": [127, 255, 0],
        "chocolate": [210, 105, 30],
        "coral": [255, 127, 80],
        "cornflowerblue": [100, 149, 237],
        "cornsilk": [255, 248, 220],
        "crimson": [220, 20, 60],
        "cyan": [0, 255, 255],
        "darkblue": [0, 0, 139],
        "darkcyan": [0, 139, 139],
        "darkgoldenrod": [184, 134, 11],
        "darkgray": [169, 169, 169],
        "darkgreen": [0, 100, 0],
        "darkgrey": [169, 169, 169],
        "darkkhaki": [189, 183, 107],
        "darkmagenta": [139, 0, 139],
        "darkolivegreen": [85, 107, 47],
        "darkorange": [255, 140, 0],
        "darkorchid": [153, 50, 204],
        "darkred": [139, 0, 0],
        "darksalmon": [233, 150, 122],
        "darkseagreen": [143, 188, 143],
        "darkslateblue": [72, 61, 139],
        "darkslategray": [47, 79, 79],
        "darkslategrey": [47, 79, 79],
        "darkturquoise": [0, 206, 209],
        "darkviolet": [148, 0, 211],
        "deeppink": [255, 20, 147],
        "deepskyblue": [0, 191, 255],
        "dimgray": [105, 105, 105],
        "dimgrey": [105, 105, 105],
        "dodgerblue": [30, 144, 255],
        "firebrick": [178, 34, 34],
        "floralwhite": [255, 250, 240],
        "forestgreen": [34, 139, 34],
        "fuchsia": [255, 0, 255],
        "gainsboro": [220, 220, 220],
        "ghostwhite": [248, 248, 255],
        "gold": [255, 215, 0],
        "goldenrod": [218, 165, 32],
        "gray": [128, 128, 128],
        "green": [0, 128, 0],
        "greenyellow": [173, 255, 47],
        "grey": [128, 128, 128],
        "honeydew": [240, 255, 240],
        "hotpink": [255, 105, 180],
        "indianred": [205, 92, 92],
        "indigo": [75, 0, 130],
        "ivory": [255, 255, 240],
        "khaki": [240, 230, 140],
        "lavender": [230, 230, 250],
        "lavenderblush": [255, 240, 245],
        "lawngreen": [124, 252, 0],
        "lemonchiffon": [255, 250, 205],
        "lightblue": [173, 216, 230],
        "lightcoral": [240, 128, 128],
        "lightcyan": [224, 255, 255],
        "lightgoldenrodyellow": [250, 250, 210],
        "lightgray": [211, 211, 211],
        "lightgreen": [144, 238, 144],
        "lightgrey": [211, 211, 211],
        "lightpink": [255, 182, 193],
        "lightsalmon": [255, 160, 122],
        "lightseagreen": [32, 178, 170],
        "lightskyblue": [135, 206, 250],
        "lightslategray": [119, 136, 153],
        "lightslategrey": [119, 136, 153],
        "lightsteelblue": [176, 196, 222],
        "lightyellow": [255, 255, 224],
        "lime": [0, 255, 0],
        "limegreen": [50, 205, 50],
        "linen": [250, 240, 230],
        "magenta": [255, 0, 255],
        "maroon": [128, 0, 0],
        "mediumaquamarine": [102, 205, 170],
        "mediumblue": [0, 0, 205],
        "mediumorchid": [186, 85, 211],
        "mediumpurple": [147, 112, 219],
        "mediumseagreen": [60, 179, 113],
        "mediumslateblue": [123, 104, 238],
        "mediumspringgreen": [0, 250, 154],
        "mediumturquoise": [72, 209, 204],
        "mediumvioletred": [199, 21, 133],
        "midnightblue": [25, 25, 112],
        "mintcream": [245, 255, 250],
        "mistyrose": [255, 228, 225],
        "moccasin": [255, 228, 181],
        "navajowhite": [255, 222, 173],
        "navy": [0, 0, 128],
        "oldlace": [253, 245, 230],
        "olive": [128, 128, 0],
        "olivedrab": [107, 142, 35],
        "orange": [255, 165, 0],
        "orangered": [255, 69, 0],
        "orchid": [218, 112, 214],
        "palegoldenrod": [238, 232, 170],
        "palegreen": [152, 251, 152],
        "paleturquoise": [175, 238, 238],
        "palevioletred": [219, 112, 147],
        "papayawhip": [255, 239, 213],
        "peachpuff": [255, 218, 185],
        "peru": [205, 133, 63],
        "pink": [255, 192, 203],
        "plum": [221, 160, 221],
        "powderblue": [176, 224, 230],
        "purple": [128, 0, 128],
        "rebeccapurple": [102, 51, 153],
        "red": [255, 0, 0],
        "rosybrown": [188, 143, 143],
        "royalblue": [65, 105, 225],
        "saddlebrown": [139, 69, 19],
        "salmon": [250, 128, 114],
        "sandybrown": [244, 164, 96],
        "seagreen": [46, 139, 87],
        "seashell": [255, 245, 238],
        "sienna": [160, 82, 45],
        "silver": [192, 192, 192],
        "skyblue": [135, 206, 235],
        "slateblue": [106, 90, 205],
        "slategray": [112, 128, 144],
        "slategrey": [112, 128, 144],
        "snow": [255, 250, 250],
        "springgreen": [0, 255, 127],
        "steelblue": [70, 130, 180],
        "tan": [210, 180, 140],
        "teal": [0, 128, 128],
        "thistle": [216, 191, 216],
        "tomato": [255, 99, 71],
        "turquoise": [64, 224, 208],
        "violet": [238, 130, 238],
        "wheat": [245, 222, 179],
        "white": [255, 255, 255],
        "whitesmoke": [245, 245, 245],
        "yellow": [255, 255, 0],
        "yellowgreen": [154, 205, 50]
      };
      var colorString = {
        getRgba,
        getHsla,
        getRgb,
        getHsl,
        getHwb,
        getAlpha,
        hexString,
        rgbString,
        rgbaString,
        percentString,
        percentaString,
        hslString,
        hslaString,
        hwbString,
        keyword
      };
      function getRgba(string) {
        if (!string) {
          return;
        }
        var abbr = /^#([a-fA-F0-9]{3,4})$/i, hex = /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i, rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i, per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i, keyword2 = /(\w+)/;
        var rgb = [0, 0, 0], a = 1, match = string.match(abbr), hexAlpha = "";
        if (match) {
          match = match[1];
          hexAlpha = match[3];
          for (var i = 0; i < rgb.length; i++) {
            rgb[i] = parseInt(match[i] + match[i], 16);
          }
          if (hexAlpha) {
            a = Math.round(parseInt(hexAlpha + hexAlpha, 16) / 255 * 100) / 100;
          }
        } else if (match = string.match(hex)) {
          hexAlpha = match[2];
          match = match[1];
          for (var i = 0; i < rgb.length; i++) {
            rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
          }
          if (hexAlpha) {
            a = Math.round(parseInt(hexAlpha, 16) / 255 * 100) / 100;
          }
        } else if (match = string.match(rgba)) {
          for (var i = 0; i < rgb.length; i++) {
            rgb[i] = parseInt(match[i + 1]);
          }
          a = parseFloat(match[4]);
        } else if (match = string.match(per)) {
          for (var i = 0; i < rgb.length; i++) {
            rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
          }
          a = parseFloat(match[4]);
        } else if (match = string.match(keyword2)) {
          if (match[1] == "transparent") {
            return [0, 0, 0, 0];
          }
          rgb = colorName$1[match[1]];
          if (!rgb) {
            return;
          }
        }
        for (var i = 0; i < rgb.length; i++) {
          rgb[i] = scale(rgb[i], 0, 255);
        }
        if (!a && a != 0) {
          a = 1;
        } else {
          a = scale(a, 0, 1);
        }
        rgb[3] = a;
        return rgb;
      }
      function getHsla(string) {
        if (!string) {
          return;
        }
        var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
        var match = string.match(hsl);
        if (match) {
          var alpha = parseFloat(match[4]);
          var h = scale(parseInt(match[1]), 0, 360), s = scale(parseFloat(match[2]), 0, 100), l = scale(parseFloat(match[3]), 0, 100), a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
          return [h, s, l, a];
        }
      }
      function getHwb(string) {
        if (!string) {
          return;
        }
        var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
        var match = string.match(hwb);
        if (match) {
          var alpha = parseFloat(match[4]);
          var h = scale(parseInt(match[1]), 0, 360), w = scale(parseFloat(match[2]), 0, 100), b = scale(parseFloat(match[3]), 0, 100), a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
          return [h, w, b, a];
        }
      }
      function getRgb(string) {
        var rgba = getRgba(string);
        return rgba && rgba.slice(0, 3);
      }
      function getHsl(string) {
        var hsla = getHsla(string);
        return hsla && hsla.slice(0, 3);
      }
      function getAlpha(string) {
        var vals = getRgba(string);
        if (vals) {
          return vals[3];
        } else if (vals = getHsla(string)) {
          return vals[3];
        } else if (vals = getHwb(string)) {
          return vals[3];
        }
      }
      function hexString(rgba, a) {
        var a = a !== void 0 && rgba.length === 3 ? a : rgba[3];
        return "#" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (a >= 0 && a < 1 ? hexDouble(Math.round(a * 255)) : "");
      }
      function rgbString(rgba, alpha) {
        if (alpha < 1 || rgba[3] && rgba[3] < 1) {
          return rgbaString(rgba, alpha);
        }
        return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
      }
      function rgbaString(rgba, alpha) {
        if (alpha === void 0) {
          alpha = rgba[3] !== void 0 ? rgba[3] : 1;
        }
        return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ", " + alpha + ")";
      }
      function percentString(rgba, alpha) {
        if (alpha < 1 || rgba[3] && rgba[3] < 1) {
          return percentaString(rgba, alpha);
        }
        var r = Math.round(rgba[0] / 255 * 100), g = Math.round(rgba[1] / 255 * 100), b = Math.round(rgba[2] / 255 * 100);
        return "rgb(" + r + "%, " + g + "%, " + b + "%)";
      }
      function percentaString(rgba, alpha) {
        var r = Math.round(rgba[0] / 255 * 100), g = Math.round(rgba[1] / 255 * 100), b = Math.round(rgba[2] / 255 * 100);
        return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
      }
      function hslString(hsla, alpha) {
        if (alpha < 1 || hsla[3] && hsla[3] < 1) {
          return hslaString(hsla, alpha);
        }
        return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
      }
      function hslaString(hsla, alpha) {
        if (alpha === void 0) {
          alpha = hsla[3] !== void 0 ? hsla[3] : 1;
        }
        return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, " + alpha + ")";
      }
      function hwbString(hwb, alpha) {
        if (alpha === void 0) {
          alpha = hwb[3] !== void 0 ? hwb[3] : 1;
        }
        return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%" + (alpha !== void 0 && alpha !== 1 ? ", " + alpha : "") + ")";
      }
      function keyword(rgb) {
        return reverseNames[rgb.slice(0, 3)];
      }
      function scale(num, min2, max2) {
        return Math.min(Math.max(min2, num), max2);
      }
      function hexDouble(num) {
        var str = num.toString(16).toUpperCase();
        return str.length < 2 ? "0" + str : str;
      }
      var reverseNames = {};
      for (var name in colorName$1) {
        reverseNames[colorName$1[name]] = name;
      }
      var Color = function(obj) {
        if (obj instanceof Color) {
          return obj;
        }
        if (!(this instanceof Color)) {
          return new Color(obj);
        }
        this.valid = false;
        this.values = {
          rgb: [0, 0, 0],
          hsl: [0, 0, 0],
          hsv: [0, 0, 0],
          hwb: [0, 0, 0],
          cmyk: [0, 0, 0, 0],
          alpha: 1
        };
        var vals;
        if (typeof obj === "string") {
          vals = colorString.getRgba(obj);
          if (vals) {
            this.setValues("rgb", vals);
          } else if (vals = colorString.getHsla(obj)) {
            this.setValues("hsl", vals);
          } else if (vals = colorString.getHwb(obj)) {
            this.setValues("hwb", vals);
          }
        } else if (typeof obj === "object") {
          vals = obj;
          if (vals.r !== void 0 || vals.red !== void 0) {
            this.setValues("rgb", vals);
          } else if (vals.l !== void 0 || vals.lightness !== void 0) {
            this.setValues("hsl", vals);
          } else if (vals.v !== void 0 || vals.value !== void 0) {
            this.setValues("hsv", vals);
          } else if (vals.w !== void 0 || vals.whiteness !== void 0) {
            this.setValues("hwb", vals);
          } else if (vals.c !== void 0 || vals.cyan !== void 0) {
            this.setValues("cmyk", vals);
          }
        }
      };
      Color.prototype = {
        isValid: function() {
          return this.valid;
        },
        rgb: function() {
          return this.setSpace("rgb", arguments);
        },
        hsl: function() {
          return this.setSpace("hsl", arguments);
        },
        hsv: function() {
          return this.setSpace("hsv", arguments);
        },
        hwb: function() {
          return this.setSpace("hwb", arguments);
        },
        cmyk: function() {
          return this.setSpace("cmyk", arguments);
        },
        rgbArray: function() {
          return this.values.rgb;
        },
        hslArray: function() {
          return this.values.hsl;
        },
        hsvArray: function() {
          return this.values.hsv;
        },
        hwbArray: function() {
          var values = this.values;
          if (values.alpha !== 1) {
            return values.hwb.concat([values.alpha]);
          }
          return values.hwb;
        },
        cmykArray: function() {
          return this.values.cmyk;
        },
        rgbaArray: function() {
          var values = this.values;
          return values.rgb.concat([values.alpha]);
        },
        hslaArray: function() {
          var values = this.values;
          return values.hsl.concat([values.alpha]);
        },
        alpha: function(val) {
          if (val === void 0) {
            return this.values.alpha;
          }
          this.setValues("alpha", val);
          return this;
        },
        red: function(val) {
          return this.setChannel("rgb", 0, val);
        },
        green: function(val) {
          return this.setChannel("rgb", 1, val);
        },
        blue: function(val) {
          return this.setChannel("rgb", 2, val);
        },
        hue: function(val) {
          if (val) {
            val %= 360;
            val = val < 0 ? 360 + val : val;
          }
          return this.setChannel("hsl", 0, val);
        },
        saturation: function(val) {
          return this.setChannel("hsl", 1, val);
        },
        lightness: function(val) {
          return this.setChannel("hsl", 2, val);
        },
        saturationv: function(val) {
          return this.setChannel("hsv", 1, val);
        },
        whiteness: function(val) {
          return this.setChannel("hwb", 1, val);
        },
        blackness: function(val) {
          return this.setChannel("hwb", 2, val);
        },
        value: function(val) {
          return this.setChannel("hsv", 2, val);
        },
        cyan: function(val) {
          return this.setChannel("cmyk", 0, val);
        },
        magenta: function(val) {
          return this.setChannel("cmyk", 1, val);
        },
        yellow: function(val) {
          return this.setChannel("cmyk", 2, val);
        },
        black: function(val) {
          return this.setChannel("cmyk", 3, val);
        },
        hexString: function() {
          return colorString.hexString(this.values.rgb);
        },
        rgbString: function() {
          return colorString.rgbString(this.values.rgb, this.values.alpha);
        },
        rgbaString: function() {
          return colorString.rgbaString(this.values.rgb, this.values.alpha);
        },
        percentString: function() {
          return colorString.percentString(this.values.rgb, this.values.alpha);
        },
        hslString: function() {
          return colorString.hslString(this.values.hsl, this.values.alpha);
        },
        hslaString: function() {
          return colorString.hslaString(this.values.hsl, this.values.alpha);
        },
        hwbString: function() {
          return colorString.hwbString(this.values.hwb, this.values.alpha);
        },
        keyword: function() {
          return colorString.keyword(this.values.rgb, this.values.alpha);
        },
        rgbNumber: function() {
          var rgb = this.values.rgb;
          return rgb[0] << 16 | rgb[1] << 8 | rgb[2];
        },
        luminosity: function() {
          var rgb = this.values.rgb;
          var lum = [];
          for (var i = 0; i < rgb.length; i++) {
            var chan = rgb[i] / 255;
            lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
          }
          return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
        },
        contrast: function(color2) {
          var lum1 = this.luminosity();
          var lum2 = color2.luminosity();
          if (lum1 > lum2) {
            return (lum1 + 0.05) / (lum2 + 0.05);
          }
          return (lum2 + 0.05) / (lum1 + 0.05);
        },
        level: function(color2) {
          var contrastRatio = this.contrast(color2);
          if (contrastRatio >= 7.1) {
            return "AAA";
          }
          return contrastRatio >= 4.5 ? "AA" : "";
        },
        dark: function() {
          var rgb = this.values.rgb;
          var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1e3;
          return yiq < 128;
        },
        light: function() {
          return !this.dark();
        },
        negate: function() {
          var rgb = [];
          for (var i = 0; i < 3; i++) {
            rgb[i] = 255 - this.values.rgb[i];
          }
          this.setValues("rgb", rgb);
          return this;
        },
        lighten: function(ratio) {
          var hsl = this.values.hsl;
          hsl[2] += hsl[2] * ratio;
          this.setValues("hsl", hsl);
          return this;
        },
        darken: function(ratio) {
          var hsl = this.values.hsl;
          hsl[2] -= hsl[2] * ratio;
          this.setValues("hsl", hsl);
          return this;
        },
        saturate: function(ratio) {
          var hsl = this.values.hsl;
          hsl[1] += hsl[1] * ratio;
          this.setValues("hsl", hsl);
          return this;
        },
        desaturate: function(ratio) {
          var hsl = this.values.hsl;
          hsl[1] -= hsl[1] * ratio;
          this.setValues("hsl", hsl);
          return this;
        },
        whiten: function(ratio) {
          var hwb = this.values.hwb;
          hwb[1] += hwb[1] * ratio;
          this.setValues("hwb", hwb);
          return this;
        },
        blacken: function(ratio) {
          var hwb = this.values.hwb;
          hwb[2] += hwb[2] * ratio;
          this.setValues("hwb", hwb);
          return this;
        },
        greyscale: function() {
          var rgb = this.values.rgb;
          var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
          this.setValues("rgb", [val, val, val]);
          return this;
        },
        clearer: function(ratio) {
          var alpha = this.values.alpha;
          this.setValues("alpha", alpha - alpha * ratio);
          return this;
        },
        opaquer: function(ratio) {
          var alpha = this.values.alpha;
          this.setValues("alpha", alpha + alpha * ratio);
          return this;
        },
        rotate: function(degrees) {
          var hsl = this.values.hsl;
          var hue = (hsl[0] + degrees) % 360;
          hsl[0] = hue < 0 ? 360 + hue : hue;
          this.setValues("hsl", hsl);
          return this;
        },
        /**
         * Ported from sass implementation in C
         * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
         */
        mix: function(mixinColor, weight) {
          var color1 = this;
          var color2 = mixinColor;
          var p = weight === void 0 ? 0.5 : weight;
          var w = 2 * p - 1;
          var a = color1.alpha() - color2.alpha();
          var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2;
          var w2 = 1 - w1;
          return this.rgb(
            w1 * color1.red() + w2 * color2.red(),
            w1 * color1.green() + w2 * color2.green(),
            w1 * color1.blue() + w2 * color2.blue()
          ).alpha(color1.alpha() * p + color2.alpha() * (1 - p));
        },
        toJSON: function() {
          return this.rgb();
        },
        clone: function() {
          var result = new Color();
          var source = this.values;
          var target = result.values;
          var value, type;
          for (var prop in source) {
            if (source.hasOwnProperty(prop)) {
              value = source[prop];
              type = {}.toString.call(value);
              if (type === "[object Array]") {
                target[prop] = value.slice(0);
              } else if (type === "[object Number]") {
                target[prop] = value;
              } else {
                console.error("unexpected color value:", value);
              }
            }
          }
          return result;
        }
      };
      Color.prototype.spaces = {
        rgb: ["red", "green", "blue"],
        hsl: ["hue", "saturation", "lightness"],
        hsv: ["hue", "saturation", "value"],
        hwb: ["hue", "whiteness", "blackness"],
        cmyk: ["cyan", "magenta", "yellow", "black"]
      };
      Color.prototype.maxes = {
        rgb: [255, 255, 255],
        hsl: [360, 100, 100],
        hsv: [360, 100, 100],
        hwb: [360, 100, 100],
        cmyk: [100, 100, 100, 100]
      };
      Color.prototype.getValues = function(space) {
        var values = this.values;
        var vals = {};
        for (var i = 0; i < space.length; i++) {
          vals[space.charAt(i)] = values[space][i];
        }
        if (values.alpha !== 1) {
          vals.a = values.alpha;
        }
        return vals;
      };
      Color.prototype.setValues = function(space, vals) {
        var values = this.values;
        var spaces = this.spaces;
        var maxes = this.maxes;
        var alpha = 1;
        var i;
        this.valid = true;
        if (space === "alpha") {
          alpha = vals;
        } else if (vals.length) {
          values[space] = vals.slice(0, space.length);
          alpha = vals[space.length];
        } else if (vals[space.charAt(0)] !== void 0) {
          for (i = 0; i < space.length; i++) {
            values[space][i] = vals[space.charAt(i)];
          }
          alpha = vals.a;
        } else if (vals[spaces[space][0]] !== void 0) {
          var chans = spaces[space];
          for (i = 0; i < space.length; i++) {
            values[space][i] = vals[chans[i]];
          }
          alpha = vals.alpha;
        }
        values.alpha = Math.max(0, Math.min(1, alpha === void 0 ? values.alpha : alpha));
        if (space === "alpha") {
          return false;
        }
        var capped;
        for (i = 0; i < space.length; i++) {
          capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
          values[space][i] = Math.round(capped);
        }
        for (var sname in spaces) {
          if (sname !== space) {
            values[sname] = colorConvert[space][sname](values[space]);
          }
        }
        return true;
      };
      Color.prototype.setSpace = function(space, args) {
        var vals = args[0];
        if (vals === void 0) {
          return this.getValues(space);
        }
        if (typeof vals === "number") {
          vals = Array.prototype.slice.call(args);
        }
        this.setValues(space, vals);
        return this;
      };
      Color.prototype.setChannel = function(space, index, val) {
        var svalues = this.values[space];
        if (val === void 0) {
          return svalues[index];
        } else if (val === svalues[index]) {
          return this;
        }
        svalues[index] = val;
        this.setValues(space, svalues);
        return this;
      };
      if (typeof window !== "undefined") {
        window.Color = Color;
      }
      var chartjsColor = Color;
      function isValidKey(key) {
        return ["__proto__", "prototype", "constructor"].indexOf(key) === -1;
      }
      var helpers = {
        /**
         * An empty function that can be used, for example, for optional callback.
         */
        noop: function() {
        },
        /**
         * Returns a unique id, sequentially generated from a global variable.
         * @returns {number}
         * @function
         */
        uid: function() {
          var id = 0;
          return function() {
            return id++;
          };
        }(),
        /**
         * Returns true if `value` is neither null nor undefined, else returns false.
         * @param {*} value - The value to test.
         * @returns {boolean}
         * @since 2.7.0
         */
        isNullOrUndef: function(value) {
          return value === null || typeof value === "undefined";
        },
        /**
         * Returns true if `value` is an array (including typed arrays), else returns false.
         * @param {*} value - The value to test.
         * @returns {boolean}
         * @function
         */
        isArray: function(value) {
          if (Array.isArray && Array.isArray(value)) {
            return true;
          }
          var type = Object.prototype.toString.call(value);
          if (type.substr(0, 7) === "[object" && type.substr(-6) === "Array]") {
            return true;
          }
          return false;
        },
        /**
         * Returns true if `value` is an object (excluding null), else returns false.
         * @param {*} value - The value to test.
         * @returns {boolean}
         * @since 2.7.0
         */
        isObject: function(value) {
          return value !== null && Object.prototype.toString.call(value) === "[object Object]";
        },
        /**
         * Returns true if `value` is a finite number, else returns false
         * @param {*} value  - The value to test.
         * @returns {boolean}
         */
        isFinite: function(value) {
          return (typeof value === "number" || value instanceof Number) && isFinite(value);
        },
        /**
         * Returns `value` if defined, else returns `defaultValue`.
         * @param {*} value - The value to return if defined.
         * @param {*} defaultValue - The value to return if `value` is undefined.
         * @returns {*}
         */
        valueOrDefault: function(value, defaultValue) {
          return typeof value === "undefined" ? defaultValue : value;
        },
        /**
         * Returns value at the given `index` in array if defined, else returns `defaultValue`.
         * @param {Array} value - The array to lookup for value at `index`.
         * @param {number} index - The index in `value` to lookup for value.
         * @param {*} defaultValue - The value to return if `value[index]` is undefined.
         * @returns {*}
         */
        valueAtIndexOrDefault: function(value, index, defaultValue) {
          return helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);
        },
        /**
         * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
         * value returned by `fn`. If `fn` is not a function, this method returns undefined.
         * @param {function} fn - The function to call.
         * @param {Array|undefined|null} args - The arguments with which `fn` should be called.
         * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
         * @returns {*}
         */
        callback: function(fn, args, thisArg) {
          if (fn && typeof fn.call === "function") {
            return fn.apply(thisArg, args);
          }
        },
        /**
         * Note(SB) for performance sake, this method should only be used when loopable type
         * is unknown or in none intensive code (not called often and small loopable). Else
         * it's preferable to use a regular for() loop and save extra function calls.
         * @param {object|Array} loopable - The object or array to be iterated.
         * @param {function} fn - The function to call for each item.
         * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
         * @param {boolean} [reverse] - If true, iterates backward on the loopable.
         */
        each: function(loopable, fn, thisArg, reverse) {
          var i, len, keys2;
          if (helpers.isArray(loopable)) {
            len = loopable.length;
            if (reverse) {
              for (i = len - 1; i >= 0; i--) {
                fn.call(thisArg, loopable[i], i);
              }
            } else {
              for (i = 0; i < len; i++) {
                fn.call(thisArg, loopable[i], i);
              }
            }
          } else if (helpers.isObject(loopable)) {
            keys2 = Object.keys(loopable);
            len = keys2.length;
            for (i = 0; i < len; i++) {
              fn.call(thisArg, loopable[keys2[i]], keys2[i]);
            }
          }
        },
        /**
         * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
         * @see https://stackoverflow.com/a/14853974
         * @param {Array} a0 - The array to compare
         * @param {Array} a1 - The array to compare
         * @returns {boolean}
         */
        arrayEquals: function(a0, a1) {
          var i, ilen, v0, v1;
          if (!a0 || !a1 || a0.length !== a1.length) {
            return false;
          }
          for (i = 0, ilen = a0.length; i < ilen; ++i) {
            v0 = a0[i];
            v1 = a1[i];
            if (v0 instanceof Array && v1 instanceof Array) {
              if (!helpers.arrayEquals(v0, v1)) {
                return false;
              }
            } else if (v0 !== v1) {
              return false;
            }
          }
          return true;
        },
        /**
         * Returns a deep copy of `source` without keeping references on objects and arrays.
         * @param {*} source - The value to clone.
         * @returns {*}
         */
        clone: function(source) {
          if (helpers.isArray(source)) {
            return source.map(helpers.clone);
          }
          if (helpers.isObject(source)) {
            var target = Object.create(source);
            var keys2 = Object.keys(source);
            var klen = keys2.length;
            var k2 = 0;
            for (; k2 < klen; ++k2) {
              target[keys2[k2]] = helpers.clone(source[keys2[k2]]);
            }
            return target;
          }
          return source;
        },
        /**
         * The default merger when Chart.helpers.merge is called without merger option.
         * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.
         * @private
         */
        _merger: function(key, target, source, options2) {
          if (!isValidKey(key)) {
            return;
          }
          var tval = target[key];
          var sval = source[key];
          if (helpers.isObject(tval) && helpers.isObject(sval)) {
            helpers.merge(tval, sval, options2);
          } else {
            target[key] = helpers.clone(sval);
          }
        },
        /**
         * Merges source[key] in target[key] only if target[key] is undefined.
         * @private
         */
        _mergerIf: function(key, target, source) {
          if (!isValidKey(key)) {
            return;
          }
          var tval = target[key];
          var sval = source[key];
          if (helpers.isObject(tval) && helpers.isObject(sval)) {
            helpers.mergeIf(tval, sval);
          } else if (!target.hasOwnProperty(key)) {
            target[key] = helpers.clone(sval);
          }
        },
        /**
         * Recursively deep copies `source` properties into `target` with the given `options`.
         * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
         * @param {object} target - The target object in which all sources are merged into.
         * @param {object|object[]} source - Object(s) to merge into `target`.
         * @param {object} [options] - Merging options:
         * @param {function} [options.merger] - The merge method (key, target, source, options)
         * @returns {object} The `target` object.
         */
        merge: function(target, source, options2) {
          var sources = helpers.isArray(source) ? source : [source];
          var ilen = sources.length;
          var merge, i, keys2, klen, k2;
          if (!helpers.isObject(target)) {
            return target;
          }
          options2 = options2 || {};
          merge = options2.merger || helpers._merger;
          for (i = 0; i < ilen; ++i) {
            source = sources[i];
            if (!helpers.isObject(source)) {
              continue;
            }
            keys2 = Object.keys(source);
            for (k2 = 0, klen = keys2.length; k2 < klen; ++k2) {
              merge(keys2[k2], target, source, options2);
            }
          }
          return target;
        },
        /**
         * Recursively deep copies `source` properties into `target` *only* if not defined in target.
         * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
         * @param {object} target - The target object in which all sources are merged into.
         * @param {object|object[]} source - Object(s) to merge into `target`.
         * @returns {object} The `target` object.
         */
        mergeIf: function(target, source) {
          return helpers.merge(target, source, { merger: helpers._mergerIf });
        },
        /**
         * Applies the contents of two or more objects together into the first object.
         * @param {object} target - The target object in which all objects are merged into.
         * @param {object} arg1 - Object containing additional properties to merge in target.
         * @param {object} argN - Additional objects containing properties to merge in target.
         * @returns {object} The `target` object.
         */
        extend: Object.assign || function(target) {
          return helpers.merge(target, [].slice.call(arguments, 1), {
            merger: function(key, dst, src2) {
              dst[key] = src2[key];
            }
          });
        },
        /**
         * Basic javascript inheritance based on the model created in Backbone.js
         */
        inherits: function(extensions) {
          var me = this;
          var ChartElement = extensions && extensions.hasOwnProperty("constructor") ? extensions.constructor : function() {
            return me.apply(this, arguments);
          };
          var Surrogate = function() {
            this.constructor = ChartElement;
          };
          Surrogate.prototype = me.prototype;
          ChartElement.prototype = new Surrogate();
          ChartElement.extend = helpers.inherits;
          if (extensions) {
            helpers.extend(ChartElement.prototype, extensions);
          }
          ChartElement.__super__ = me.prototype;
          return ChartElement;
        },
        _deprecated: function(scope, value, previous, current) {
          if (value !== void 0) {
            console.warn(scope + ': "' + previous + '" is deprecated. Please use "' + current + '" instead');
          }
        }
      };
      var helpers_core = helpers;
      helpers.callCallback = helpers.callback;
      helpers.indexOf = function(array, item, fromIndex) {
        return Array.prototype.indexOf.call(array, item, fromIndex);
      };
      helpers.getValueOrDefault = helpers.valueOrDefault;
      helpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;
      var effects = {
        linear: function(t) {
          return t;
        },
        easeInQuad: function(t) {
          return t * t;
        },
        easeOutQuad: function(t) {
          return -t * (t - 2);
        },
        easeInOutQuad: function(t) {
          if ((t /= 0.5) < 1) {
            return 0.5 * t * t;
          }
          return -0.5 * (--t * (t - 2) - 1);
        },
        easeInCubic: function(t) {
          return t * t * t;
        },
        easeOutCubic: function(t) {
          return (t = t - 1) * t * t + 1;
        },
        easeInOutCubic: function(t) {
          if ((t /= 0.5) < 1) {
            return 0.5 * t * t * t;
          }
          return 0.5 * ((t -= 2) * t * t + 2);
        },
        easeInQuart: function(t) {
          return t * t * t * t;
        },
        easeOutQuart: function(t) {
          return -((t = t - 1) * t * t * t - 1);
        },
        easeInOutQuart: function(t) {
          if ((t /= 0.5) < 1) {
            return 0.5 * t * t * t * t;
          }
          return -0.5 * ((t -= 2) * t * t * t - 2);
        },
        easeInQuint: function(t) {
          return t * t * t * t * t;
        },
        easeOutQuint: function(t) {
          return (t = t - 1) * t * t * t * t + 1;
        },
        easeInOutQuint: function(t) {
          if ((t /= 0.5) < 1) {
            return 0.5 * t * t * t * t * t;
          }
          return 0.5 * ((t -= 2) * t * t * t * t + 2);
        },
        easeInSine: function(t) {
          return -Math.cos(t * (Math.PI / 2)) + 1;
        },
        easeOutSine: function(t) {
          return Math.sin(t * (Math.PI / 2));
        },
        easeInOutSine: function(t) {
          return -0.5 * (Math.cos(Math.PI * t) - 1);
        },
        easeInExpo: function(t) {
          return t === 0 ? 0 : Math.pow(2, 10 * (t - 1));
        },
        easeOutExpo: function(t) {
          return t === 1 ? 1 : -Math.pow(2, -10 * t) + 1;
        },
        easeInOutExpo: function(t) {
          if (t === 0) {
            return 0;
          }
          if (t === 1) {
            return 1;
          }
          if ((t /= 0.5) < 1) {
            return 0.5 * Math.pow(2, 10 * (t - 1));
          }
          return 0.5 * (-Math.pow(2, -10 * --t) + 2);
        },
        easeInCirc: function(t) {
          if (t >= 1) {
            return t;
          }
          return -(Math.sqrt(1 - t * t) - 1);
        },
        easeOutCirc: function(t) {
          return Math.sqrt(1 - (t = t - 1) * t);
        },
        easeInOutCirc: function(t) {
          if ((t /= 0.5) < 1) {
            return -0.5 * (Math.sqrt(1 - t * t) - 1);
          }
          return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
        },
        easeInElastic: function(t) {
          var s = 1.70158;
          var p = 0;
          var a = 1;
          if (t === 0) {
            return 0;
          }
          if (t === 1) {
            return 1;
          }
          if (!p) {
            p = 0.3;
          }
          if (a < 1) {
            a = 1;
            s = p / 4;
          } else {
            s = p / (2 * Math.PI) * Math.asin(1 / a);
          }
          return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
        },
        easeOutElastic: function(t) {
          var s = 1.70158;
          var p = 0;
          var a = 1;
          if (t === 0) {
            return 0;
          }
          if (t === 1) {
            return 1;
          }
          if (!p) {
            p = 0.3;
          }
          if (a < 1) {
            a = 1;
            s = p / 4;
          } else {
            s = p / (2 * Math.PI) * Math.asin(1 / a);
          }
          return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;
        },
        easeInOutElastic: function(t) {
          var s = 1.70158;
          var p = 0;
          var a = 1;
          if (t === 0) {
            return 0;
          }
          if ((t /= 0.5) === 2) {
            return 1;
          }
          if (!p) {
            p = 0.45;
          }
          if (a < 1) {
            a = 1;
            s = p / 4;
          } else {
            s = p / (2 * Math.PI) * Math.asin(1 / a);
          }
          if (t < 1) {
            return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
          }
          return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;
        },
        easeInBack: function(t) {
          var s = 1.70158;
          return t * t * ((s + 1) * t - s);
        },
        easeOutBack: function(t) {
          var s = 1.70158;
          return (t = t - 1) * t * ((s + 1) * t + s) + 1;
        },
        easeInOutBack: function(t) {
          var s = 1.70158;
          if ((t /= 0.5) < 1) {
            return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));
          }
          return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
        },
        easeInBounce: function(t) {
          return 1 - effects.easeOutBounce(1 - t);
        },
        easeOutBounce: function(t) {
          if (t < 1 / 2.75) {
            return 7.5625 * t * t;
          }
          if (t < 2 / 2.75) {
            return 7.5625 * (t -= 1.5 / 2.75) * t + 0.75;
          }
          if (t < 2.5 / 2.75) {
            return 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375;
          }
          return 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;
        },
        easeInOutBounce: function(t) {
          if (t < 0.5) {
            return effects.easeInBounce(t * 2) * 0.5;
          }
          return effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;
        }
      };
      var helpers_easing = {
        effects
      };
      helpers_core.easingEffects = effects;
      var PI = Math.PI;
      var RAD_PER_DEG = PI / 180;
      var DOUBLE_PI = PI * 2;
      var HALF_PI = PI / 2;
      var QUARTER_PI = PI / 4;
      var TWO_THIRDS_PI = PI * 2 / 3;
      var exports$1 = {
        /**
         * Clears the entire canvas associated to the given `chart`.
         * @param {Chart} chart - The chart for which to clear the canvas.
         */
        clear: function(chart) {
          chart.ctx.clearRect(0, 0, chart.width, chart.height);
        },
        /**
         * Creates a "path" for a rectangle with rounded corners at position (x, y) with a
         * given size (width, height) and the same `radius` for all corners.
         * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.
         * @param {number} x - The x axis of the coordinate for the rectangle starting point.
         * @param {number} y - The y axis of the coordinate for the rectangle starting point.
         * @param {number} width - The rectangle's width.
         * @param {number} height - The rectangle's height.
         * @param {number} radius - The rounded amount (in pixels) for the four corners.
         * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?
         */
        roundedRect: function(ctx, x, y, width, height, radius) {
          if (radius) {
            var r = Math.min(radius, height / 2, width / 2);
            var left = x + r;
            var top = y + r;
            var right = x + width - r;
            var bottom = y + height - r;
            ctx.moveTo(x, top);
            if (left < right && top < bottom) {
              ctx.arc(left, top, r, -PI, -HALF_PI);
              ctx.arc(right, top, r, -HALF_PI, 0);
              ctx.arc(right, bottom, r, 0, HALF_PI);
              ctx.arc(left, bottom, r, HALF_PI, PI);
            } else if (left < right) {
              ctx.moveTo(left, y);
              ctx.arc(right, top, r, -HALF_PI, HALF_PI);
              ctx.arc(left, top, r, HALF_PI, PI + HALF_PI);
            } else if (top < bottom) {
              ctx.arc(left, top, r, -PI, 0);
              ctx.arc(left, bottom, r, 0, PI);
            } else {
              ctx.arc(left, top, r, -PI, PI);
            }
            ctx.closePath();
            ctx.moveTo(x, y);
          } else {
            ctx.rect(x, y, width, height);
          }
        },
        drawPoint: function(ctx, style, radius, x, y, rotation) {
          var type, xOffset, yOffset, size, cornerRadius;
          var rad = (rotation || 0) * RAD_PER_DEG;
          if (style && typeof style === "object") {
            type = style.toString();
            if (type === "[object HTMLImageElement]" || type === "[object HTMLCanvasElement]") {
              ctx.save();
              ctx.translate(x, y);
              ctx.rotate(rad);
              ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
              ctx.restore();
              return;
            }
          }
          if (isNaN(radius) || radius <= 0) {
            return;
          }
          ctx.beginPath();
          switch (style) {
            default:
              ctx.arc(x, y, radius, 0, DOUBLE_PI);
              ctx.closePath();
              break;
            case "triangle":
              ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
              rad += TWO_THIRDS_PI;
              ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
              rad += TWO_THIRDS_PI;
              ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
              ctx.closePath();
              break;
            case "rectRounded":
              cornerRadius = radius * 0.516;
              size = radius - cornerRadius;
              xOffset = Math.cos(rad + QUARTER_PI) * size;
              yOffset = Math.sin(rad + QUARTER_PI) * size;
              ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
              ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);
              ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);
              ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
              ctx.closePath();
              break;
            case "rect":
              if (!rotation) {
                size = Math.SQRT1_2 * radius;
                ctx.rect(x - size, y - size, 2 * size, 2 * size);
                break;
              }
              rad += QUARTER_PI;
            case "rectRot":
              xOffset = Math.cos(rad) * radius;
              yOffset = Math.sin(rad) * radius;
              ctx.moveTo(x - xOffset, y - yOffset);
              ctx.lineTo(x + yOffset, y - xOffset);
              ctx.lineTo(x + xOffset, y + yOffset);
              ctx.lineTo(x - yOffset, y + xOffset);
              ctx.closePath();
              break;
            case "crossRot":
              rad += QUARTER_PI;
            case "cross":
              xOffset = Math.cos(rad) * radius;
              yOffset = Math.sin(rad) * radius;
              ctx.moveTo(x - xOffset, y - yOffset);
              ctx.lineTo(x + xOffset, y + yOffset);
              ctx.moveTo(x + yOffset, y - xOffset);
              ctx.lineTo(x - yOffset, y + xOffset);
              break;
            case "star":
              xOffset = Math.cos(rad) * radius;
              yOffset = Math.sin(rad) * radius;
              ctx.moveTo(x - xOffset, y - yOffset);
              ctx.lineTo(x + xOffset, y + yOffset);
              ctx.moveTo(x + yOffset, y - xOffset);
              ctx.lineTo(x - yOffset, y + xOffset);
              rad += QUARTER_PI;
              xOffset = Math.cos(rad) * radius;
              yOffset = Math.sin(rad) * radius;
              ctx.moveTo(x - xOffset, y - yOffset);
              ctx.lineTo(x + xOffset, y + yOffset);
              ctx.moveTo(x + yOffset, y - xOffset);
              ctx.lineTo(x - yOffset, y + xOffset);
              break;
            case "line":
              xOffset = Math.cos(rad) * radius;
              yOffset = Math.sin(rad) * radius;
              ctx.moveTo(x - xOffset, y - yOffset);
              ctx.lineTo(x + xOffset, y + yOffset);
              break;
            case "dash":
              ctx.moveTo(x, y);
              ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);
              break;
          }
          ctx.fill();
          ctx.stroke();
        },
        /**
         * Returns true if the point is inside the rectangle
         * @param {object} point - The point to test
         * @param {object} area - The rectangle
         * @returns {boolean}
         * @private
         */
        _isPointInArea: function(point, area) {
          var epsilon = 1e-6;
          return point.x > area.left - epsilon && point.x < area.right + epsilon && point.y > area.top - epsilon && point.y < area.bottom + epsilon;
        },
        clipArea: function(ctx, area) {
          ctx.save();
          ctx.beginPath();
          ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
          ctx.clip();
        },
        unclipArea: function(ctx) {
          ctx.restore();
        },
        lineTo: function(ctx, previous, target, flip) {
          var stepped = target.steppedLine;
          if (stepped) {
            if (stepped === "middle") {
              var midpoint = (previous.x + target.x) / 2;
              ctx.lineTo(midpoint, flip ? target.y : previous.y);
              ctx.lineTo(midpoint, flip ? previous.y : target.y);
            } else if (stepped === "after" && !flip || stepped !== "after" && flip) {
              ctx.lineTo(previous.x, target.y);
            } else {
              ctx.lineTo(target.x, previous.y);
            }
            ctx.lineTo(target.x, target.y);
            return;
          }
          if (!target.tension) {
            ctx.lineTo(target.x, target.y);
            return;
          }
          ctx.bezierCurveTo(
            flip ? previous.controlPointPreviousX : previous.controlPointNextX,
            flip ? previous.controlPointPreviousY : previous.controlPointNextY,
            flip ? target.controlPointNextX : target.controlPointPreviousX,
            flip ? target.controlPointNextY : target.controlPointPreviousY,
            target.x,
            target.y
          );
        }
      };
      var helpers_canvas = exports$1;
      helpers_core.clear = exports$1.clear;
      helpers_core.drawRoundedRectangle = function(ctx) {
        ctx.beginPath();
        exports$1.roundedRect.apply(exports$1, arguments);
      };
      var defaults2 = {
        /**
         * @private
         */
        _set: function(scope, values) {
          return helpers_core.merge(this[scope] || (this[scope] = {}), values);
        }
      };
      defaults2._set("global", {
        defaultColor: "rgba(0,0,0,0.1)",
        defaultFontColor: "#666",
        defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        defaultFontSize: 12,
        defaultFontStyle: "normal",
        defaultLineHeight: 1.2,
        showLines: true
      });
      var core_defaults = defaults2;
      var valueOrDefault = helpers_core.valueOrDefault;
      function toFontString(font) {
        if (!font || helpers_core.isNullOrUndef(font.size) || helpers_core.isNullOrUndef(font.family)) {
          return null;
        }
        return (font.style ? font.style + " " : "") + (font.weight ? font.weight + " " : "") + font.size + "px " + font.family;
      }
      var helpers_options = {
        /**
         * Converts the given line height `value` in pixels for a specific font `size`.
         * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
         * @param {number} size - The font size (in pixels) used to resolve relative `value`.
         * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).
         * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
         * @since 2.7.0
         */
        toLineHeight: function(value, size) {
          var matches = ("" + value).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
          if (!matches || matches[1] === "normal") {
            return size * 1.2;
          }
          value = +matches[2];
          switch (matches[3]) {
            case "px":
              return value;
            case "%":
              value /= 100;
              break;
          }
          return size * value;
        },
        /**
         * Converts the given value into a padding object with pre-computed width/height.
         * @param {number|object} value - If a number, set the value to all TRBL component,
         *  else, if and object, use defined properties and sets undefined ones to 0.
         * @returns {object} The padding values (top, right, bottom, left, width, height)
         * @since 2.7.0
         */
        toPadding: function(value) {
          var t, r, b, l;
          if (helpers_core.isObject(value)) {
            t = +value.top || 0;
            r = +value.right || 0;
            b = +value.bottom || 0;
            l = +value.left || 0;
          } else {
            t = r = b = l = +value || 0;
          }
          return {
            top: t,
            right: r,
            bottom: b,
            left: l,
            height: t + b,
            width: l + r
          };
        },
        /**
         * Parses font options and returns the font object.
         * @param {object} options - A object that contains font options to be parsed.
         * @return {object} The font object.
         * @todo Support font.* options and renamed to toFont().
         * @private
         */
        _parseFont: function(options2) {
          var globalDefaults = core_defaults.global;
          var size = valueOrDefault(options2.fontSize, globalDefaults.defaultFontSize);
          var font = {
            family: valueOrDefault(options2.fontFamily, globalDefaults.defaultFontFamily),
            lineHeight: helpers_core.options.toLineHeight(valueOrDefault(options2.lineHeight, globalDefaults.defaultLineHeight), size),
            size,
            style: valueOrDefault(options2.fontStyle, globalDefaults.defaultFontStyle),
            weight: null,
            string: ""
          };
          font.string = toFontString(font);
          return font;
        },
        /**
         * Evaluates the given `inputs` sequentially and returns the first defined value.
         * @param {Array} inputs - An array of values, falling back to the last value.
         * @param {object} [context] - If defined and the current value is a function, the value
         * is called with `context` as first argument and the result becomes the new input.
         * @param {number} [index] - If defined and the current value is an array, the value
         * at `index` become the new input.
         * @param {object} [info] - object to return information about resolution in
         * @param {boolean} [info.cacheable] - Will be set to `false` if option is not cacheable.
         * @since 2.7.0
         */
        resolve: function(inputs, context, index, info) {
          var cacheable = true;
          var i, ilen, value;
          for (i = 0, ilen = inputs.length; i < ilen; ++i) {
            value = inputs[i];
            if (value === void 0) {
              continue;
            }
            if (context !== void 0 && typeof value === "function") {
              value = value(context);
              cacheable = false;
            }
            if (index !== void 0 && helpers_core.isArray(value)) {
              value = value[index];
              cacheable = false;
            }
            if (value !== void 0) {
              if (info && !cacheable) {
                info.cacheable = false;
              }
              return value;
            }
          }
        }
      };
      var exports$2 = {
        /**
         * Returns an array of factors sorted from 1 to sqrt(value)
         * @private
         */
        _factorize: function(value) {
          var result = [];
          var sqrt = Math.sqrt(value);
          var i;
          for (i = 1; i < sqrt; i++) {
            if (value % i === 0) {
              result.push(i);
              result.push(value / i);
            }
          }
          if (sqrt === (sqrt | 0)) {
            result.push(sqrt);
          }
          result.sort(function(a, b) {
            return a - b;
          }).pop();
          return result;
        },
        log10: Math.log10 || function(x) {
          var exponent = Math.log(x) * Math.LOG10E;
          var powerOf10 = Math.round(exponent);
          var isPowerOf10 = x === Math.pow(10, powerOf10);
          return isPowerOf10 ? powerOf10 : exponent;
        }
      };
      var helpers_math = exports$2;
      helpers_core.log10 = exports$2.log10;
      var getRtlAdapter = function(rectX, width) {
        return {
          x: function(x) {
            return rectX + rectX + width - x;
          },
          setWidth: function(w) {
            width = w;
          },
          textAlign: function(align) {
            if (align === "center") {
              return align;
            }
            return align === "right" ? "left" : "right";
          },
          xPlus: function(x, value) {
            return x - value;
          },
          leftForLtr: function(x, itemWidth) {
            return x - itemWidth;
          }
        };
      };
      var getLtrAdapter = function() {
        return {
          x: function(x) {
            return x;
          },
          setWidth: function(w) {
          },
          textAlign: function(align) {
            return align;
          },
          xPlus: function(x, value) {
            return x + value;
          },
          leftForLtr: function(x, _itemWidth) {
            return x;
          }
        };
      };
      var getAdapter = function(rtl2, rectX, width) {
        return rtl2 ? getRtlAdapter(rectX, width) : getLtrAdapter();
      };
      var overrideTextDirection = function(ctx, direction) {
        var style, original;
        if (direction === "ltr" || direction === "rtl") {
          style = ctx.canvas.style;
          original = [
            style.getPropertyValue("direction"),
            style.getPropertyPriority("direction")
          ];
          style.setProperty("direction", direction, "important");
          ctx.prevTextDirection = original;
        }
      };
      var restoreTextDirection = function(ctx) {
        var original = ctx.prevTextDirection;
        if (original !== void 0) {
          delete ctx.prevTextDirection;
          ctx.canvas.style.setProperty("direction", original[0], original[1]);
        }
      };
      var helpers_rtl = {
        getRtlAdapter: getAdapter,
        overrideTextDirection,
        restoreTextDirection
      };
      var helpers$1 = helpers_core;
      var easing = helpers_easing;
      var canvas = helpers_canvas;
      var options = helpers_options;
      var math = helpers_math;
      var rtl = helpers_rtl;
      helpers$1.easing = easing;
      helpers$1.canvas = canvas;
      helpers$1.options = options;
      helpers$1.math = math;
      helpers$1.rtl = rtl;
      function interpolate(start, view, model, ease) {
        var keys2 = Object.keys(model);
        var i, ilen, key, actual, origin, target, type, c0, c1;
        for (i = 0, ilen = keys2.length; i < ilen; ++i) {
          key = keys2[i];
          target = model[key];
          if (!view.hasOwnProperty(key)) {
            view[key] = target;
          }
          actual = view[key];
          if (actual === target || key[0] === "_") {
            continue;
          }
          if (!start.hasOwnProperty(key)) {
            start[key] = actual;
          }
          origin = start[key];
          type = typeof target;
          if (type === typeof origin) {
            if (type === "string") {
              c0 = chartjsColor(origin);
              if (c0.valid) {
                c1 = chartjsColor(target);
                if (c1.valid) {
                  view[key] = c1.mix(c0, ease).rgbString();
                  continue;
                }
              }
            } else if (helpers$1.isFinite(origin) && helpers$1.isFinite(target)) {
              view[key] = origin + (target - origin) * ease;
              continue;
            }
          }
          view[key] = target;
        }
      }
      var Element = function(configuration) {
        helpers$1.extend(this, configuration);
        this.initialize.apply(this, arguments);
      };
      helpers$1.extend(Element.prototype, {
        _type: void 0,
        initialize: function() {
          this.hidden = false;
        },
        pivot: function() {
          var me = this;
          if (!me._view) {
            me._view = helpers$1.extend({}, me._model);
          }
          me._start = {};
          return me;
        },
        transition: function(ease) {
          var me = this;
          var model = me._model;
          var start = me._start;
          var view = me._view;
          if (!model || ease === 1) {
            me._view = helpers$1.extend({}, model);
            me._start = null;
            return me;
          }
          if (!view) {
            view = me._view = {};
          }
          if (!start) {
            start = me._start = {};
          }
          interpolate(start, view, model, ease);
          return me;
        },
        tooltipPosition: function() {
          return {
            x: this._model.x,
            y: this._model.y
          };
        },
        hasValue: function() {
          return helpers$1.isNumber(this._model.x) && helpers$1.isNumber(this._model.y);
        }
      });
      Element.extend = helpers$1.inherits;
      var core_element = Element;
      var exports$3 = core_element.extend({
        chart: null,
        // the animation associated chart instance
        currentStep: 0,
        // the current animation step
        numSteps: 60,
        // default number of steps
        easing: "",
        // the easing to use for this animation
        render: null,
        // render function used by the animation service
        onAnimationProgress: null,
        // user specified callback to fire on each step of the animation
        onAnimationComplete: null
        // user specified callback to fire when the animation finishes
      });
      var core_animation = exports$3;
      Object.defineProperty(exports$3.prototype, "animationObject", {
        get: function() {
          return this;
        }
      });
      Object.defineProperty(exports$3.prototype, "chartInstance", {
        get: function() {
          return this.chart;
        },
        set: function(value) {
          this.chart = value;
        }
      });
      core_defaults._set("global", {
        animation: {
          duration: 1e3,
          easing: "easeOutQuart",
          onProgress: helpers$1.noop,
          onComplete: helpers$1.noop
        }
      });
      var core_animations = {
        animations: [],
        request: null,
        /**
         * @param {Chart} chart - The chart to animate.
         * @param {Chart.Animation} animation - The animation that we will animate.
         * @param {number} duration - The animation duration in ms.
         * @param {boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions
         */
        addAnimation: function(chart, animation, duration, lazy) {
          var animations = this.animations;
          var i, ilen;
          animation.chart = chart;
          animation.startTime = Date.now();
          animation.duration = duration;
          if (!lazy) {
            chart.animating = true;
          }
          for (i = 0, ilen = animations.length; i < ilen; ++i) {
            if (animations[i].chart === chart) {
              animations[i] = animation;
              return;
            }
          }
          animations.push(animation);
          if (animations.length === 1) {
            this.requestAnimationFrame();
          }
        },
        cancelAnimation: function(chart) {
          var index = helpers$1.findIndex(this.animations, function(animation) {
            return animation.chart === chart;
          });
          if (index !== -1) {
            this.animations.splice(index, 1);
            chart.animating = false;
          }
        },
        requestAnimationFrame: function() {
          var me = this;
          if (me.request === null) {
            me.request = helpers$1.requestAnimFrame.call(window, function() {
              me.request = null;
              me.startDigest();
            });
          }
        },
        /**
         * @private
         */
        startDigest: function() {
          var me = this;
          me.advance();
          if (me.animations.length > 0) {
            me.requestAnimationFrame();
          }
        },
        /**
         * @private
         */
        advance: function() {
          var animations = this.animations;
          var animation, chart, numSteps, nextStep;
          var i = 0;
          while (i < animations.length) {
            animation = animations[i];
            chart = animation.chart;
            numSteps = animation.numSteps;
            nextStep = Math.floor((Date.now() - animation.startTime) / animation.duration * numSteps) + 1;
            animation.currentStep = Math.min(nextStep, numSteps);
            helpers$1.callback(animation.render, [chart, animation], chart);
            helpers$1.callback(animation.onAnimationProgress, [animation], chart);
            if (animation.currentStep >= numSteps) {
              helpers$1.callback(animation.onAnimationComplete, [animation], chart);
              chart.animating = false;
              animations.splice(i, 1);
            } else {
              ++i;
            }
          }
        }
      };
      var resolve = helpers$1.options.resolve;
      var arrayEvents = ["push", "pop", "shift", "splice", "unshift"];
      function listenArrayEvents(array, listener) {
        if (array._chartjs) {
          array._chartjs.listeners.push(listener);
          return;
        }
        Object.defineProperty(array, "_chartjs", {
          configurable: true,
          enumerable: false,
          value: {
            listeners: [listener]
          }
        });
        arrayEvents.forEach(function(key) {
          var method = "onData" + key.charAt(0).toUpperCase() + key.slice(1);
          var base = array[key];
          Object.defineProperty(array, key, {
            configurable: true,
            enumerable: false,
            value: function() {
              var args = Array.prototype.slice.call(arguments);
              var res = base.apply(this, args);
              helpers$1.each(array._chartjs.listeners, function(object) {
                if (typeof object[method] === "function") {
                  object[method].apply(object, args);
                }
              });
              return res;
            }
          });
        });
      }
      function unlistenArrayEvents(array, listener) {
        var stub = array._chartjs;
        if (!stub) {
          return;
        }
        var listeners = stub.listeners;
        var index = listeners.indexOf(listener);
        if (index !== -1) {
          listeners.splice(index, 1);
        }
        if (listeners.length > 0) {
          return;
        }
        arrayEvents.forEach(function(key) {
          delete array[key];
        });
        delete array._chartjs;
      }
      var DatasetController = function(chart, datasetIndex) {
        this.initialize(chart, datasetIndex);
      };
      helpers$1.extend(DatasetController.prototype, {
        /**
         * Element type used to generate a meta dataset (e.g. Chart.element.Line).
         * @type {Chart.core.element}
         */
        datasetElementType: null,
        /**
         * Element type used to generate a meta data (e.g. Chart.element.Point).
         * @type {Chart.core.element}
         */
        dataElementType: null,
        /**
         * Dataset element option keys to be resolved in _resolveDatasetElementOptions.
         * A derived controller may override this to resolve controller-specific options.
         * The keys defined here are for backward compatibility for legend styles.
         * @private
         */
        _datasetElementOptions: [
          "backgroundColor",
          "borderCapStyle",
          "borderColor",
          "borderDash",
          "borderDashOffset",
          "borderJoinStyle",
          "borderWidth"
        ],
        /**
         * Data element option keys to be resolved in _resolveDataElementOptions.
         * A derived controller may override this to resolve controller-specific options.
         * The keys defined here are for backward compatibility for legend styles.
         * @private
         */
        _dataElementOptions: [
          "backgroundColor",
          "borderColor",
          "borderWidth",
          "pointStyle"
        ],
        initialize: function(chart, datasetIndex) {
          var me = this;
          me.chart = chart;
          me.index = datasetIndex;
          me.linkScales();
          me.addElements();
          me._type = me.getMeta().type;
        },
        updateIndex: function(datasetIndex) {
          this.index = datasetIndex;
        },
        linkScales: function() {
          var me = this;
          var meta = me.getMeta();
          var chart = me.chart;
          var scales2 = chart.scales;
          var dataset = me.getDataset();
          var scalesOpts = chart.options.scales;
          if (meta.xAxisID === null || !(meta.xAxisID in scales2) || dataset.xAxisID) {
            meta.xAxisID = dataset.xAxisID || scalesOpts.xAxes[0].id;
          }
          if (meta.yAxisID === null || !(meta.yAxisID in scales2) || dataset.yAxisID) {
            meta.yAxisID = dataset.yAxisID || scalesOpts.yAxes[0].id;
          }
        },
        getDataset: function() {
          return this.chart.data.datasets[this.index];
        },
        getMeta: function() {
          return this.chart.getDatasetMeta(this.index);
        },
        getScaleForId: function(scaleID) {
          return this.chart.scales[scaleID];
        },
        /**
         * @private
         */
        _getValueScaleId: function() {
          return this.getMeta().yAxisID;
        },
        /**
         * @private
         */
        _getIndexScaleId: function() {
          return this.getMeta().xAxisID;
        },
        /**
         * @private
         */
        _getValueScale: function() {
          return this.getScaleForId(this._getValueScaleId());
        },
        /**
         * @private
         */
        _getIndexScale: function() {
          return this.getScaleForId(this._getIndexScaleId());
        },
        reset: function() {
          this._update(true);
        },
        /**
         * @private
         */
        destroy: function() {
          if (this._data) {
            unlistenArrayEvents(this._data, this);
          }
        },
        createMetaDataset: function() {
          var me = this;
          var type = me.datasetElementType;
          return type && new type({
            _chart: me.chart,
            _datasetIndex: me.index
          });
        },
        createMetaData: function(index) {
          var me = this;
          var type = me.dataElementType;
          return type && new type({
            _chart: me.chart,
            _datasetIndex: me.index,
            _index: index
          });
        },
        addElements: function() {
          var me = this;
          var meta = me.getMeta();
          var data = me.getDataset().data || [];
          var metaData = meta.data;
          var i, ilen;
          for (i = 0, ilen = data.length; i < ilen; ++i) {
            metaData[i] = metaData[i] || me.createMetaData(i);
          }
          meta.dataset = meta.dataset || me.createMetaDataset();
        },
        addElementAndReset: function(index) {
          var element = this.createMetaData(index);
          this.getMeta().data.splice(index, 0, element);
          this.updateElement(element, index, true);
        },
        buildOrUpdateElements: function() {
          var me = this;
          var dataset = me.getDataset();
          var data = dataset.data || (dataset.data = []);
          if (me._data !== data) {
            if (me._data) {
              unlistenArrayEvents(me._data, me);
            }
            if (data && Object.isExtensible(data)) {
              listenArrayEvents(data, me);
            }
            me._data = data;
          }
          me.resyncElements();
        },
        /**
         * Returns the merged user-supplied and default dataset-level options
         * @private
         */
        _configure: function() {
          var me = this;
          me._config = helpers$1.merge(/* @__PURE__ */ Object.create(null), [
            me.chart.options.datasets[me._type],
            me.getDataset()
          ], {
            merger: function(key, target, source) {
              if (key !== "_meta" && key !== "data") {
                helpers$1._merger(key, target, source);
              }
            }
          });
        },
        _update: function(reset) {
          var me = this;
          me._configure();
          me._cachedDataOpts = null;
          me.update(reset);
        },
        update: helpers$1.noop,
        transition: function(easingValue) {
          var meta = this.getMeta();
          var elements2 = meta.data || [];
          var ilen = elements2.length;
          var i = 0;
          for (; i < ilen; ++i) {
            elements2[i].transition(easingValue);
          }
          if (meta.dataset) {
            meta.dataset.transition(easingValue);
          }
        },
        draw: function() {
          var meta = this.getMeta();
          var elements2 = meta.data || [];
          var ilen = elements2.length;
          var i = 0;
          if (meta.dataset) {
            meta.dataset.draw();
          }
          for (; i < ilen; ++i) {
            elements2[i].draw();
          }
        },
        /**
         * Returns a set of predefined style properties that should be used to represent the dataset
         * or the data if the index is specified
         * @param {number} index - data index
         * @return {IStyleInterface} style object
         */
        getStyle: function(index) {
          var me = this;
          var meta = me.getMeta();
          var dataset = meta.dataset;
          var style;
          me._configure();
          if (dataset && index === void 0) {
            style = me._resolveDatasetElementOptions(dataset || {});
          } else {
            index = index || 0;
            style = me._resolveDataElementOptions(meta.data[index] || {}, index);
          }
          if (style.fill === false || style.fill === null) {
            style.backgroundColor = style.borderColor;
          }
          return style;
        },
        /**
         * @private
         */
        _resolveDatasetElementOptions: function(element, hover) {
          var me = this;
          var chart = me.chart;
          var datasetOpts = me._config;
          var custom = element.custom || {};
          var options2 = chart.options.elements[me.datasetElementType.prototype._type] || {};
          var elementOptions = me._datasetElementOptions;
          var values = {};
          var i, ilen, key, readKey;
          var context = {
            chart,
            dataset: me.getDataset(),
            datasetIndex: me.index,
            hover
          };
          for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
            key = elementOptions[i];
            readKey = hover ? "hover" + key.charAt(0).toUpperCase() + key.slice(1) : key;
            values[key] = resolve([
              custom[readKey],
              datasetOpts[readKey],
              options2[readKey]
            ], context);
          }
          return values;
        },
        /**
         * @private
         */
        _resolveDataElementOptions: function(element, index) {
          var me = this;
          var custom = element && element.custom;
          var cached = me._cachedDataOpts;
          if (cached && !custom) {
            return cached;
          }
          var chart = me.chart;
          var datasetOpts = me._config;
          var options2 = chart.options.elements[me.dataElementType.prototype._type] || {};
          var elementOptions = me._dataElementOptions;
          var values = {};
          var context = {
            chart,
            dataIndex: index,
            dataset: me.getDataset(),
            datasetIndex: me.index
          };
          var info = { cacheable: !custom };
          var keys2, i, ilen, key;
          custom = custom || {};
          if (helpers$1.isArray(elementOptions)) {
            for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
              key = elementOptions[i];
              values[key] = resolve([
                custom[key],
                datasetOpts[key],
                options2[key]
              ], context, index, info);
            }
          } else {
            keys2 = Object.keys(elementOptions);
            for (i = 0, ilen = keys2.length; i < ilen; ++i) {
              key = keys2[i];
              values[key] = resolve([
                custom[key],
                datasetOpts[elementOptions[key]],
                datasetOpts[key],
                options2[key]
              ], context, index, info);
            }
          }
          if (info.cacheable) {
            me._cachedDataOpts = Object.freeze(values);
          }
          return values;
        },
        removeHoverStyle: function(element) {
          helpers$1.merge(element._model, element.$previousStyle || {});
          delete element.$previousStyle;
        },
        setHoverStyle: function(element) {
          var dataset = this.chart.data.datasets[element._datasetIndex];
          var index = element._index;
          var custom = element.custom || {};
          var model = element._model;
          var getHoverColor = helpers$1.getHoverColor;
          element.$previousStyle = {
            backgroundColor: model.backgroundColor,
            borderColor: model.borderColor,
            borderWidth: model.borderWidth
          };
          model.backgroundColor = resolve([custom.hoverBackgroundColor, dataset.hoverBackgroundColor, getHoverColor(model.backgroundColor)], void 0, index);
          model.borderColor = resolve([custom.hoverBorderColor, dataset.hoverBorderColor, getHoverColor(model.borderColor)], void 0, index);
          model.borderWidth = resolve([custom.hoverBorderWidth, dataset.hoverBorderWidth, model.borderWidth], void 0, index);
        },
        /**
         * @private
         */
        _removeDatasetHoverStyle: function() {
          var element = this.getMeta().dataset;
          if (element) {
            this.removeHoverStyle(element);
          }
        },
        /**
         * @private
         */
        _setDatasetHoverStyle: function() {
          var element = this.getMeta().dataset;
          var prev = {};
          var i, ilen, key, keys2, hoverOptions, model;
          if (!element) {
            return;
          }
          model = element._model;
          hoverOptions = this._resolveDatasetElementOptions(element, true);
          keys2 = Object.keys(hoverOptions);
          for (i = 0, ilen = keys2.length; i < ilen; ++i) {
            key = keys2[i];
            prev[key] = model[key];
            model[key] = hoverOptions[key];
          }
          element.$previousStyle = prev;
        },
        /**
         * @private
         */
        resyncElements: function() {
          var me = this;
          var meta = me.getMeta();
          var data = me.getDataset().data;
          var numMeta = meta.data.length;
          var numData = data.length;
          if (numData < numMeta) {
            meta.data.splice(numData, numMeta - numData);
          } else if (numData > numMeta) {
            me.insertElements(numMeta, numData - numMeta);
          }
        },
        /**
         * @private
         */
        insertElements: function(start, count) {
          for (var i = 0; i < count; ++i) {
            this.addElementAndReset(start + i);
          }
        },
        /**
         * @private
         */
        onDataPush: function() {
          var count = arguments.length;
          this.insertElements(this.getDataset().data.length - count, count);
        },
        /**
         * @private
         */
        onDataPop: function() {
          this.getMeta().data.pop();
        },
        /**
         * @private
         */
        onDataShift: function() {
          this.getMeta().data.shift();
        },
        /**
         * @private
         */
        onDataSplice: function(start, count) {
          this.getMeta().data.splice(start, count);
          this.insertElements(start, arguments.length - 2);
        },
        /**
         * @private
         */
        onDataUnshift: function() {
          this.insertElements(0, arguments.length);
        }
      });
      DatasetController.extend = helpers$1.inherits;
      var core_datasetController = DatasetController;
      var TAU = Math.PI * 2;
      core_defaults._set("global", {
        elements: {
          arc: {
            backgroundColor: core_defaults.global.defaultColor,
            borderColor: "#fff",
            borderWidth: 2,
            borderAlign: "center"
          }
        }
      });
      function clipArc(ctx, arc) {
        var startAngle = arc.startAngle;
        var endAngle = arc.endAngle;
        var pixelMargin = arc.pixelMargin;
        var angleMargin = pixelMargin / arc.outerRadius;
        var x = arc.x;
        var y = arc.y;
        ctx.beginPath();
        ctx.arc(x, y, arc.outerRadius, startAngle - angleMargin, endAngle + angleMargin);
        if (arc.innerRadius > pixelMargin) {
          angleMargin = pixelMargin / arc.innerRadius;
          ctx.arc(x, y, arc.innerRadius - pixelMargin, endAngle + angleMargin, startAngle - angleMargin, true);
        } else {
          ctx.arc(x, y, pixelMargin, endAngle + Math.PI / 2, startAngle - Math.PI / 2);
        }
        ctx.closePath();
        ctx.clip();
      }
      function drawFullCircleBorders(ctx, vm, arc, inner) {
        var endAngle = arc.endAngle;
        var i;
        if (inner) {
          arc.endAngle = arc.startAngle + TAU;
          clipArc(ctx, arc);
          arc.endAngle = endAngle;
          if (arc.endAngle === arc.startAngle && arc.fullCircles) {
            arc.endAngle += TAU;
            arc.fullCircles--;
          }
        }
        ctx.beginPath();
        ctx.arc(arc.x, arc.y, arc.innerRadius, arc.startAngle + TAU, arc.startAngle, true);
        for (i = 0; i < arc.fullCircles; ++i) {
          ctx.stroke();
        }
        ctx.beginPath();
        ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.startAngle + TAU);
        for (i = 0; i < arc.fullCircles; ++i) {
          ctx.stroke();
        }
      }
      function drawBorder(ctx, vm, arc) {
        var inner = vm.borderAlign === "inner";
        if (inner) {
          ctx.lineWidth = vm.borderWidth * 2;
          ctx.lineJoin = "round";
        } else {
          ctx.lineWidth = vm.borderWidth;
          ctx.lineJoin = "bevel";
        }
        if (arc.fullCircles) {
          drawFullCircleBorders(ctx, vm, arc, inner);
        }
        if (inner) {
          clipArc(ctx, arc);
        }
        ctx.beginPath();
        ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.endAngle);
        ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
        ctx.closePath();
        ctx.stroke();
      }
      var element_arc = core_element.extend({
        _type: "arc",
        inLabelRange: function(mouseX) {
          var vm = this._view;
          if (vm) {
            return Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2);
          }
          return false;
        },
        inRange: function(chartX, chartY) {
          var vm = this._view;
          if (vm) {
            var pointRelativePosition = helpers$1.getAngleFromPoint(vm, { x: chartX, y: chartY });
            var angle = pointRelativePosition.angle;
            var distance = pointRelativePosition.distance;
            var startAngle = vm.startAngle;
            var endAngle = vm.endAngle;
            while (endAngle < startAngle) {
              endAngle += TAU;
            }
            while (angle > endAngle) {
              angle -= TAU;
            }
            while (angle < startAngle) {
              angle += TAU;
            }
            var betweenAngles = angle >= startAngle && angle <= endAngle;
            var withinRadius = distance >= vm.innerRadius && distance <= vm.outerRadius;
            return betweenAngles && withinRadius;
          }
          return false;
        },
        getCenterPoint: function() {
          var vm = this._view;
          var halfAngle = (vm.startAngle + vm.endAngle) / 2;
          var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
          return {
            x: vm.x + Math.cos(halfAngle) * halfRadius,
            y: vm.y + Math.sin(halfAngle) * halfRadius
          };
        },
        getArea: function() {
          var vm = this._view;
          return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
        },
        tooltipPosition: function() {
          var vm = this._view;
          var centreAngle = vm.startAngle + (vm.endAngle - vm.startAngle) / 2;
          var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;
          return {
            x: vm.x + Math.cos(centreAngle) * rangeFromCentre,
            y: vm.y + Math.sin(centreAngle) * rangeFromCentre
          };
        },
        draw: function() {
          var ctx = this._chart.ctx;
          var vm = this._view;
          var pixelMargin = vm.borderAlign === "inner" ? 0.33 : 0;
          var arc = {
            x: vm.x,
            y: vm.y,
            innerRadius: vm.innerRadius,
            outerRadius: Math.max(vm.outerRadius - pixelMargin, 0),
            pixelMargin,
            startAngle: vm.startAngle,
            endAngle: vm.endAngle,
            fullCircles: Math.floor(vm.circumference / TAU)
          };
          var i;
          ctx.save();
          ctx.fillStyle = vm.backgroundColor;
          ctx.strokeStyle = vm.borderColor;
          if (arc.fullCircles) {
            arc.endAngle = arc.startAngle + TAU;
            ctx.beginPath();
            ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
            ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
            ctx.closePath();
            for (i = 0; i < arc.fullCircles; ++i) {
              ctx.fill();
            }
            arc.endAngle = arc.startAngle + vm.circumference % TAU;
          }
          ctx.beginPath();
          ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
          ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
          ctx.closePath();
          ctx.fill();
          if (vm.borderWidth) {
            drawBorder(ctx, vm, arc);
          }
          ctx.restore();
        }
      });
      var valueOrDefault$1 = helpers$1.valueOrDefault;
      var defaultColor = core_defaults.global.defaultColor;
      core_defaults._set("global", {
        elements: {
          line: {
            tension: 0.4,
            backgroundColor: defaultColor,
            borderWidth: 3,
            borderColor: defaultColor,
            borderCapStyle: "butt",
            borderDash: [],
            borderDashOffset: 0,
            borderJoinStyle: "miter",
            capBezierPoints: true,
            fill: true
            // do we fill in the area between the line and its base axis
          }
        }
      });
      var element_line = core_element.extend({
        _type: "line",
        draw: function() {
          var me = this;
          var vm = me._view;
          var ctx = me._chart.ctx;
          var spanGaps = vm.spanGaps;
          var points = me._children.slice();
          var globalDefaults = core_defaults.global;
          var globalOptionLineElements = globalDefaults.elements.line;
          var lastDrawnIndex = -1;
          var closePath = me._loop;
          var index, previous, currentVM;
          if (!points.length) {
            return;
          }
          if (me._loop) {
            for (index = 0; index < points.length; ++index) {
              previous = helpers$1.previousItem(points, index);
              if (!points[index]._view.skip && previous._view.skip) {
                points = points.slice(index).concat(points.slice(0, index));
                closePath = spanGaps;
                break;
              }
            }
            if (closePath) {
              points.push(points[0]);
            }
          }
          ctx.save();
          ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;
          if (ctx.setLineDash) {
            ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
          }
          ctx.lineDashOffset = valueOrDefault$1(vm.borderDashOffset, globalOptionLineElements.borderDashOffset);
          ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
          ctx.lineWidth = valueOrDefault$1(vm.borderWidth, globalOptionLineElements.borderWidth);
          ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;
          ctx.beginPath();
          currentVM = points[0]._view;
          if (!currentVM.skip) {
            ctx.moveTo(currentVM.x, currentVM.y);
            lastDrawnIndex = 0;
          }
          for (index = 1; index < points.length; ++index) {
            currentVM = points[index]._view;
            previous = lastDrawnIndex === -1 ? helpers$1.previousItem(points, index) : points[lastDrawnIndex];
            if (!currentVM.skip) {
              if (lastDrawnIndex !== index - 1 && !spanGaps || lastDrawnIndex === -1) {
                ctx.moveTo(currentVM.x, currentVM.y);
              } else {
                helpers$1.canvas.lineTo(ctx, previous._view, currentVM);
              }
              lastDrawnIndex = index;
            }
          }
          if (closePath) {
            ctx.closePath();
          }
          ctx.stroke();
          ctx.restore();
        }
      });
      var valueOrDefault$2 = helpers$1.valueOrDefault;
      var defaultColor$1 = core_defaults.global.defaultColor;
      core_defaults._set("global", {
        elements: {
          point: {
            radius: 3,
            pointStyle: "circle",
            backgroundColor: defaultColor$1,
            borderColor: defaultColor$1,
            borderWidth: 1,
            // Hover
            hitRadius: 1,
            hoverRadius: 4,
            hoverBorderWidth: 1
          }
        }
      });
      function xRange(mouseX) {
        var vm = this._view;
        return vm ? Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius : false;
      }
      function yRange(mouseY) {
        var vm = this._view;
        return vm ? Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius : false;
      }
      var element_point = core_element.extend({
        _type: "point",
        inRange: function(mouseX, mouseY) {
          var vm = this._view;
          return vm ? Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2) < Math.pow(vm.hitRadius + vm.radius, 2) : false;
        },
        inLabelRange: xRange,
        inXRange: xRange,
        inYRange: yRange,
        getCenterPoint: function() {
          var vm = this._view;
          return {
            x: vm.x,
            y: vm.y
          };
        },
        getArea: function() {
          return Math.PI * Math.pow(this._view.radius, 2);
        },
        tooltipPosition: function() {
          var vm = this._view;
          return {
            x: vm.x,
            y: vm.y,
            padding: vm.radius + vm.borderWidth
          };
        },
        draw: function(chartArea) {
          var vm = this._view;
          var ctx = this._chart.ctx;
          var pointStyle = vm.pointStyle;
          var rotation = vm.rotation;
          var radius = vm.radius;
          var x = vm.x;
          var y = vm.y;
          var globalDefaults = core_defaults.global;
          var defaultColor2 = globalDefaults.defaultColor;
          if (vm.skip) {
            return;
          }
          if (chartArea === void 0 || helpers$1.canvas._isPointInArea(vm, chartArea)) {
            ctx.strokeStyle = vm.borderColor || defaultColor2;
            ctx.lineWidth = valueOrDefault$2(vm.borderWidth, globalDefaults.elements.point.borderWidth);
            ctx.fillStyle = vm.backgroundColor || defaultColor2;
            helpers$1.canvas.drawPoint(ctx, pointStyle, radius, x, y, rotation);
          }
        }
      });
      var defaultColor$2 = core_defaults.global.defaultColor;
      core_defaults._set("global", {
        elements: {
          rectangle: {
            backgroundColor: defaultColor$2,
            borderColor: defaultColor$2,
            borderSkipped: "bottom",
            borderWidth: 0
          }
        }
      });
      function isVertical(vm) {
        return vm && vm.width !== void 0;
      }
      function getBarBounds(vm) {
        var x1, x2, y1, y2, half;
        if (isVertical(vm)) {
          half = vm.width / 2;
          x1 = vm.x - half;
          x2 = vm.x + half;
          y1 = Math.min(vm.y, vm.base);
          y2 = Math.max(vm.y, vm.base);
        } else {
          half = vm.height / 2;
          x1 = Math.min(vm.x, vm.base);
          x2 = Math.max(vm.x, vm.base);
          y1 = vm.y - half;
          y2 = vm.y + half;
        }
        return {
          left: x1,
          top: y1,
          right: x2,
          bottom: y2
        };
      }
      function swap(orig, v1, v2) {
        return orig === v1 ? v2 : orig === v2 ? v1 : orig;
      }
      function parseBorderSkipped(vm) {
        var edge = vm.borderSkipped;
        var res = {};
        if (!edge) {
          return res;
        }
        if (vm.horizontal) {
          if (vm.base > vm.x) {
            edge = swap(edge, "left", "right");
          }
        } else if (vm.base < vm.y) {
          edge = swap(edge, "bottom", "top");
        }
        res[edge] = true;
        return res;
      }
      function parseBorderWidth(vm, maxW, maxH) {
        var value = vm.borderWidth;
        var skip2 = parseBorderSkipped(vm);
        var t, r, b, l;
        if (helpers$1.isObject(value)) {
          t = +value.top || 0;
          r = +value.right || 0;
          b = +value.bottom || 0;
          l = +value.left || 0;
        } else {
          t = r = b = l = +value || 0;
        }
        return {
          t: skip2.top || t < 0 ? 0 : t > maxH ? maxH : t,
          r: skip2.right || r < 0 ? 0 : r > maxW ? maxW : r,
          b: skip2.bottom || b < 0 ? 0 : b > maxH ? maxH : b,
          l: skip2.left || l < 0 ? 0 : l > maxW ? maxW : l
        };
      }
      function boundingRects(vm) {
        var bounds = getBarBounds(vm);
        var width = bounds.right - bounds.left;
        var height = bounds.bottom - bounds.top;
        var border = parseBorderWidth(vm, width / 2, height / 2);
        return {
          outer: {
            x: bounds.left,
            y: bounds.top,
            w: width,
            h: height
          },
          inner: {
            x: bounds.left + border.l,
            y: bounds.top + border.t,
            w: width - border.l - border.r,
            h: height - border.t - border.b
          }
        };
      }
      function inRange(vm, x, y) {
        var skipX = x === null;
        var skipY = y === null;
        var bounds = !vm || skipX && skipY ? false : getBarBounds(vm);
        return bounds && (skipX || x >= bounds.left && x <= bounds.right) && (skipY || y >= bounds.top && y <= bounds.bottom);
      }
      var element_rectangle = core_element.extend({
        _type: "rectangle",
        draw: function() {
          var ctx = this._chart.ctx;
          var vm = this._view;
          var rects = boundingRects(vm);
          var outer = rects.outer;
          var inner = rects.inner;
          ctx.fillStyle = vm.backgroundColor;
          ctx.fillRect(outer.x, outer.y, outer.w, outer.h);
          if (outer.w === inner.w && outer.h === inner.h) {
            return;
          }
          ctx.save();
          ctx.beginPath();
          ctx.rect(outer.x, outer.y, outer.w, outer.h);
          ctx.clip();
          ctx.fillStyle = vm.borderColor;
          ctx.rect(inner.x, inner.y, inner.w, inner.h);
          ctx.fill("evenodd");
          ctx.restore();
        },
        height: function() {
          var vm = this._view;
          return vm.base - vm.y;
        },
        inRange: function(mouseX, mouseY) {
          return inRange(this._view, mouseX, mouseY);
        },
        inLabelRange: function(mouseX, mouseY) {
          var vm = this._view;
          return isVertical(vm) ? inRange(vm, mouseX, null) : inRange(vm, null, mouseY);
        },
        inXRange: function(mouseX) {
          return inRange(this._view, mouseX, null);
        },
        inYRange: function(mouseY) {
          return inRange(this._view, null, mouseY);
        },
        getCenterPoint: function() {
          var vm = this._view;
          var x, y;
          if (isVertical(vm)) {
            x = vm.x;
            y = (vm.y + vm.base) / 2;
          } else {
            x = (vm.x + vm.base) / 2;
            y = vm.y;
          }
          return { x, y };
        },
        getArea: function() {
          var vm = this._view;
          return isVertical(vm) ? vm.width * Math.abs(vm.y - vm.base) : vm.height * Math.abs(vm.x - vm.base);
        },
        tooltipPosition: function() {
          var vm = this._view;
          return {
            x: vm.x,
            y: vm.y
          };
        }
      });
      var elements = {};
      var Arc = element_arc;
      var Line = element_line;
      var Point = element_point;
      var Rectangle = element_rectangle;
      elements.Arc = Arc;
      elements.Line = Line;
      elements.Point = Point;
      elements.Rectangle = Rectangle;
      var deprecated = helpers$1._deprecated;
      var valueOrDefault$3 = helpers$1.valueOrDefault;
      core_defaults._set("bar", {
        hover: {
          mode: "label"
        },
        scales: {
          xAxes: [{
            type: "category",
            offset: true,
            gridLines: {
              offsetGridLines: true
            }
          }],
          yAxes: [{
            type: "linear"
          }]
        }
      });
      core_defaults._set("global", {
        datasets: {
          bar: {
            categoryPercentage: 0.8,
            barPercentage: 0.9
          }
        }
      });
      function computeMinSampleSize(scale2, pixels) {
        var min2 = scale2._length;
        var prev, curr, i, ilen;
        for (i = 1, ilen = pixels.length; i < ilen; ++i) {
          min2 = Math.min(min2, Math.abs(pixels[i] - pixels[i - 1]));
        }
        for (i = 0, ilen = scale2.getTicks().length; i < ilen; ++i) {
          curr = scale2.getPixelForTick(i);
          min2 = i > 0 ? Math.min(min2, Math.abs(curr - prev)) : min2;
          prev = curr;
        }
        return min2;
      }
      function computeFitCategoryTraits(index, ruler, options2) {
        var thickness = options2.barThickness;
        var count = ruler.stackCount;
        var curr = ruler.pixels[index];
        var min2 = helpers$1.isNullOrUndef(thickness) ? computeMinSampleSize(ruler.scale, ruler.pixels) : -1;
        var size, ratio;
        if (helpers$1.isNullOrUndef(thickness)) {
          size = min2 * options2.categoryPercentage;
          ratio = options2.barPercentage;
        } else {
          size = thickness * count;
          ratio = 1;
        }
        return {
          chunk: size / count,
          ratio,
          start: curr - size / 2
        };
      }
      function computeFlexCategoryTraits(index, ruler, options2) {
        var pixels = ruler.pixels;
        var curr = pixels[index];
        var prev = index > 0 ? pixels[index - 1] : null;
        var next = index < pixels.length - 1 ? pixels[index + 1] : null;
        var percent = options2.categoryPercentage;
        var start, size;
        if (prev === null) {
          prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
        }
        if (next === null) {
          next = curr + curr - prev;
        }
        start = curr - (curr - Math.min(prev, next)) / 2 * percent;
        size = Math.abs(next - prev) / 2 * percent;
        return {
          chunk: size / ruler.stackCount,
          ratio: options2.barPercentage,
          start
        };
      }
      var controller_bar = core_datasetController.extend({
        dataElementType: elements.Rectangle,
        /**
         * @private
         */
        _dataElementOptions: [
          "backgroundColor",
          "borderColor",
          "borderSkipped",
          "borderWidth",
          "barPercentage",
          "barThickness",
          "categoryPercentage",
          "maxBarThickness",
          "minBarLength"
        ],
        initialize: function() {
          var me = this;
          var meta, scaleOpts;
          core_datasetController.prototype.initialize.apply(me, arguments);
          meta = me.getMeta();
          meta.stack = me.getDataset().stack;
          meta.bar = true;
          scaleOpts = me._getIndexScale().options;
          deprecated("bar chart", scaleOpts.barPercentage, "scales.[x/y]Axes.barPercentage", "dataset.barPercentage");
          deprecated("bar chart", scaleOpts.barThickness, "scales.[x/y]Axes.barThickness", "dataset.barThickness");
          deprecated("bar chart", scaleOpts.categoryPercentage, "scales.[x/y]Axes.categoryPercentage", "dataset.categoryPercentage");
          deprecated("bar chart", me._getValueScale().options.minBarLength, "scales.[x/y]Axes.minBarLength", "dataset.minBarLength");
          deprecated("bar chart", scaleOpts.maxBarThickness, "scales.[x/y]Axes.maxBarThickness", "dataset.maxBarThickness");
        },
        update: function(reset) {
          var me = this;
          var rects = me.getMeta().data;
          var i, ilen;
          me._ruler = me.getRuler();
          for (i = 0, ilen = rects.length; i < ilen; ++i) {
            me.updateElement(rects[i], i, reset);
          }
        },
        updateElement: function(rectangle, index, reset) {
          var me = this;
          var meta = me.getMeta();
          var dataset = me.getDataset();
          var options2 = me._resolveDataElementOptions(rectangle, index);
          rectangle._xScale = me.getScaleForId(meta.xAxisID);
          rectangle._yScale = me.getScaleForId(meta.yAxisID);
          rectangle._datasetIndex = me.index;
          rectangle._index = index;
          rectangle._model = {
            backgroundColor: options2.backgroundColor,
            borderColor: options2.borderColor,
            borderSkipped: options2.borderSkipped,
            borderWidth: options2.borderWidth,
            datasetLabel: dataset.label,
            label: me.chart.data.labels[index]
          };
          if (helpers$1.isArray(dataset.data[index])) {
            rectangle._model.borderSkipped = null;
          }
          me._updateElementGeometry(rectangle, index, reset, options2);
          rectangle.pivot();
        },
        /**
         * @private
         */
        _updateElementGeometry: function(rectangle, index, reset, options2) {
          var me = this;
          var model = rectangle._model;
          var vscale = me._getValueScale();
          var base = vscale.getBasePixel();
          var horizontal = vscale.isHorizontal();
          var ruler = me._ruler || me.getRuler();
          var vpixels = me.calculateBarValuePixels(me.index, index, options2);
          var ipixels = me.calculateBarIndexPixels(me.index, index, ruler, options2);
          model.horizontal = horizontal;
          model.base = reset ? base : vpixels.base;
          model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;
          model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;
          model.height = horizontal ? ipixels.size : void 0;
          model.width = horizontal ? void 0 : ipixels.size;
        },
        /**
         * Returns the stacks based on groups and bar visibility.
         * @param {number} [last] - The dataset index
         * @returns {string[]} The list of stack IDs
         * @private
         */
        _getStacks: function(last) {
          var me = this;
          var scale2 = me._getIndexScale();
          var metasets = scale2._getMatchingVisibleMetas(me._type);
          var stacked = scale2.options.stacked;
          var ilen = metasets.length;
          var stacks = [];
          var i, meta;
          for (i = 0; i < ilen; ++i) {
            meta = metasets[i];
            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === void 0 && meta.stack === void 0) {
              stacks.push(meta.stack);
            }
            if (meta.index === last) {
              break;
            }
          }
          return stacks;
        },
        /**
         * Returns the effective number of stacks based on groups and bar visibility.
         * @private
         */
        getStackCount: function() {
          return this._getStacks().length;
        },
        /**
         * Returns the stack index for the given dataset based on groups and bar visibility.
         * @param {number} [datasetIndex] - The dataset index
         * @param {string} [name] - The stack name to find
         * @returns {number} The stack index
         * @private
         */
        getStackIndex: function(datasetIndex, name2) {
          var stacks = this._getStacks(datasetIndex);
          var index = name2 !== void 0 ? stacks.indexOf(name2) : -1;
          return index === -1 ? stacks.length - 1 : index;
        },
        /**
         * @private
         */
        getRuler: function() {
          var me = this;
          var scale2 = me._getIndexScale();
          var pixels = [];
          var i, ilen;
          for (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {
            pixels.push(scale2.getPixelForValue(null, i, me.index));
          }
          return {
            pixels,
            start: scale2._startPixel,
            end: scale2._endPixel,
            stackCount: me.getStackCount(),
            scale: scale2
          };
        },
        /**
         * Note: pixel values are not clamped to the scale area.
         * @private
         */
        calculateBarValuePixels: function(datasetIndex, index, options2) {
          var me = this;
          var chart = me.chart;
          var scale2 = me._getValueScale();
          var isHorizontal = scale2.isHorizontal();
          var datasets = chart.data.datasets;
          var metasets = scale2._getMatchingVisibleMetas(me._type);
          var value = scale2._parseValue(datasets[datasetIndex].data[index]);
          var minBarLength = options2.minBarLength;
          var stacked = scale2.options.stacked;
          var stack = me.getMeta().stack;
          var start = value.start === void 0 ? 0 : value.max >= 0 && value.min >= 0 ? value.min : value.max;
          var length = value.start === void 0 ? value.end : value.max >= 0 && value.min >= 0 ? value.max - value.min : value.min - value.max;
          var ilen = metasets.length;
          var i, imeta, ivalue, base, head, size, stackLength;
          if (stacked || stacked === void 0 && stack !== void 0) {
            for (i = 0; i < ilen; ++i) {
              imeta = metasets[i];
              if (imeta.index === datasetIndex) {
                break;
              }
              if (imeta.stack === stack) {
                stackLength = scale2._parseValue(datasets[imeta.index].data[index]);
                ivalue = stackLength.start === void 0 ? stackLength.end : stackLength.min >= 0 && stackLength.max >= 0 ? stackLength.max : stackLength.min;
                if (value.min < 0 && ivalue < 0 || value.max >= 0 && ivalue > 0) {
                  start += ivalue;
                }
              }
            }
          }
          base = scale2.getPixelForValue(start);
          head = scale2.getPixelForValue(start + length);
          size = head - base;
          if (minBarLength !== void 0 && Math.abs(size) < minBarLength) {
            size = minBarLength;
            if (length >= 0 && !isHorizontal || length < 0 && isHorizontal) {
              head = base - minBarLength;
            } else {
              head = base + minBarLength;
            }
          }
          return {
            size,
            base,
            head,
            center: head + size / 2
          };
        },
        /**
         * @private
         */
        calculateBarIndexPixels: function(datasetIndex, index, ruler, options2) {
          var me = this;
          var range = options2.barThickness === "flex" ? computeFlexCategoryTraits(index, ruler, options2) : computeFitCategoryTraits(index, ruler, options2);
          var stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);
          var center = range.start + range.chunk * stackIndex + range.chunk / 2;
          var size = Math.min(
            valueOrDefault$3(options2.maxBarThickness, Infinity),
            range.chunk * range.ratio
          );
          return {
            base: center - size / 2,
            head: center + size / 2,
            center,
            size
          };
        },
        draw: function() {
          var me = this;
          var chart = me.chart;
          var scale2 = me._getValueScale();
          var rects = me.getMeta().data;
          var dataset = me.getDataset();
          var ilen = rects.length;
          var i = 0;
          helpers$1.canvas.clipArea(chart.ctx, chart.chartArea);
          for (; i < ilen; ++i) {
            var val = scale2._parseValue(dataset.data[i]);
            if (!isNaN(val.min) && !isNaN(val.max)) {
              rects[i].draw();
            }
          }
          helpers$1.canvas.unclipArea(chart.ctx);
        },
        /**
         * @private
         */
        _resolveDataElementOptions: function() {
          var me = this;
          var values = helpers$1.extend({}, core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments));
          var indexOpts = me._getIndexScale().options;
          var valueOpts = me._getValueScale().options;
          values.barPercentage = valueOrDefault$3(indexOpts.barPercentage, values.barPercentage);
          values.barThickness = valueOrDefault$3(indexOpts.barThickness, values.barThickness);
          values.categoryPercentage = valueOrDefault$3(indexOpts.categoryPercentage, values.categoryPercentage);
          values.maxBarThickness = valueOrDefault$3(indexOpts.maxBarThickness, values.maxBarThickness);
          values.minBarLength = valueOrDefault$3(valueOpts.minBarLength, values.minBarLength);
          return values;
        }
      });
      var valueOrDefault$4 = helpers$1.valueOrDefault;
      var resolve$1 = helpers$1.options.resolve;
      core_defaults._set("bubble", {
        hover: {
          mode: "single"
        },
        scales: {
          xAxes: [{
            type: "linear",
            // bubble should probably use a linear scale by default
            position: "bottom",
            id: "x-axis-0"
            // need an ID so datasets can reference the scale
          }],
          yAxes: [{
            type: "linear",
            position: "left",
            id: "y-axis-0"
          }]
        },
        tooltips: {
          callbacks: {
            title: function() {
              return "";
            },
            label: function(item, data) {
              var datasetLabel = data.datasets[item.datasetIndex].label || "";
              var dataPoint = data.datasets[item.datasetIndex].data[item.index];
              return datasetLabel + ": (" + item.xLabel + ", " + item.yLabel + ", " + dataPoint.r + ")";
            }
          }
        }
      });
      var controller_bubble = core_datasetController.extend({
        /**
         * @protected
         */
        dataElementType: elements.Point,
        /**
         * @private
         */
        _dataElementOptions: [
          "backgroundColor",
          "borderColor",
          "borderWidth",
          "hoverBackgroundColor",
          "hoverBorderColor",
          "hoverBorderWidth",
          "hoverRadius",
          "hitRadius",
          "pointStyle",
          "rotation"
        ],
        /**
         * @protected
         */
        update: function(reset) {
          var me = this;
          var meta = me.getMeta();
          var points = meta.data;
          helpers$1.each(points, function(point, index) {
            me.updateElement(point, index, reset);
          });
        },
        /**
         * @protected
         */
        updateElement: function(point, index, reset) {
          var me = this;
          var meta = me.getMeta();
          var custom = point.custom || {};
          var xScale = me.getScaleForId(meta.xAxisID);
          var yScale = me.getScaleForId(meta.yAxisID);
          var options2 = me._resolveDataElementOptions(point, index);
          var data = me.getDataset().data[index];
          var dsIndex = me.index;
          var x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === "object" ? data : NaN, index, dsIndex);
          var y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);
          point._xScale = xScale;
          point._yScale = yScale;
          point._options = options2;
          point._datasetIndex = dsIndex;
          point._index = index;
          point._model = {
            backgroundColor: options2.backgroundColor,
            borderColor: options2.borderColor,
            borderWidth: options2.borderWidth,
            hitRadius: options2.hitRadius,
            pointStyle: options2.pointStyle,
            rotation: options2.rotation,
            radius: reset ? 0 : options2.radius,
            skip: custom.skip || isNaN(x) || isNaN(y),
            x,
            y
          };
          point.pivot();
        },
        /**
         * @protected
         */
        setHoverStyle: function(point) {
          var model = point._model;
          var options2 = point._options;
          var getHoverColor = helpers$1.getHoverColor;
          point.$previousStyle = {
            backgroundColor: model.backgroundColor,
            borderColor: model.borderColor,
            borderWidth: model.borderWidth,
            radius: model.radius
          };
          model.backgroundColor = valueOrDefault$4(options2.hoverBackgroundColor, getHoverColor(options2.backgroundColor));
          model.borderColor = valueOrDefault$4(options2.hoverBorderColor, getHoverColor(options2.borderColor));
          model.borderWidth = valueOrDefault$4(options2.hoverBorderWidth, options2.borderWidth);
          model.radius = options2.radius + options2.hoverRadius;
        },
        /**
         * @private
         */
        _resolveDataElementOptions: function(point, index) {
          var me = this;
          var chart = me.chart;
          var dataset = me.getDataset();
          var custom = point.custom || {};
          var data = dataset.data[index] || {};
          var values = core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments);
          var context = {
            chart,
            dataIndex: index,
            dataset,
            datasetIndex: me.index
          };
          if (me._cachedDataOpts === values) {
            values = helpers$1.extend({}, values);
          }
          values.radius = resolve$1([
            custom.radius,
            data.r,
            me._config.radius,
            chart.options.elements.point.radius
          ], context, index);
          return values;
        }
      });
      var valueOrDefault$5 = helpers$1.valueOrDefault;
      var PI$1 = Math.PI;
      var DOUBLE_PI$1 = PI$1 * 2;
      var HALF_PI$1 = PI$1 / 2;
      core_defaults._set("doughnut", {
        animation: {
          // Boolean - Whether we animate the rotation of the Doughnut
          animateRotate: true,
          // Boolean - Whether we animate scaling the Doughnut from the centre
          animateScale: false
        },
        hover: {
          mode: "single"
        },
        legendCallback: function(chart) {
          var list = document.createElement("ul");
          var data = chart.data;
          var datasets = data.datasets;
          var labels = data.labels;
          var i, ilen, listItem, listItemSpan;
          list.setAttribute("class", chart.id + "-legend");
          if (datasets.length) {
            for (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {
              listItem = list.appendChild(document.createElement("li"));
              listItemSpan = listItem.appendChild(document.createElement("span"));
              listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];
              if (labels[i]) {
                listItem.appendChild(document.createTextNode(labels[i]));
              }
            }
          }
          return list.outerHTML;
        },
        legend: {
          labels: {
            generateLabels: function(chart) {
              var data = chart.data;
              if (data.labels.length && data.datasets.length) {
                return data.labels.map(function(label, i) {
                  var meta = chart.getDatasetMeta(0);
                  var style = meta.controller.getStyle(i);
                  return {
                    text: label,
                    fillStyle: style.backgroundColor,
                    strokeStyle: style.borderColor,
                    lineWidth: style.borderWidth,
                    hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,
                    // Extra data used for toggling the correct item
                    index: i
                  };
                });
              }
              return [];
            }
          },
          onClick: function(e, legendItem) {
            var index = legendItem.index;
            var chart = this.chart;
            var i, ilen, meta;
            for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
              meta = chart.getDatasetMeta(i);
              if (meta.data[index]) {
                meta.data[index].hidden = !meta.data[index].hidden;
              }
            }
            chart.update();
          }
        },
        // The percentage of the chart that we cut out of the middle.
        cutoutPercentage: 50,
        // The rotation of the chart, where the first data arc begins.
        rotation: -HALF_PI$1,
        // The total circumference of the chart.
        circumference: DOUBLE_PI$1,
        // Need to override these to give a nice default
        tooltips: {
          callbacks: {
            title: function() {
              return "";
            },
            label: function(tooltipItem, data) {
              var dataLabel = data.labels[tooltipItem.index];
              var value = ": " + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
              if (helpers$1.isArray(dataLabel)) {
                dataLabel = dataLabel.slice();
                dataLabel[0] += value;
              } else {
                dataLabel += value;
              }
              return dataLabel;
            }
          }
        }
      });
      var controller_doughnut = core_datasetController.extend({
        dataElementType: elements.Arc,
        linkScales: helpers$1.noop,
        /**
         * @private
         */
        _dataElementOptions: [
          "backgroundColor",
          "borderColor",
          "borderWidth",
          "borderAlign",
          "hoverBackgroundColor",
          "hoverBorderColor",
          "hoverBorderWidth"
        ],
        // Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly
        getRingIndex: function(datasetIndex) {
          var ringIndex = 0;
          for (var j = 0; j < datasetIndex; ++j) {
            if (this.chart.isDatasetVisible(j)) {
              ++ringIndex;
            }
          }
          return ringIndex;
        },
        update: function(reset) {
          var me = this;
          var chart = me.chart;
          var chartArea = chart.chartArea;
          var opts = chart.options;
          var ratioX = 1;
          var ratioY = 1;
          var offsetX = 0;
          var offsetY = 0;
          var meta = me.getMeta();
          var arcs = meta.data;
          var cutout = opts.cutoutPercentage / 100 || 0;
          var circumference = opts.circumference;
          var chartWeight = me._getRingWeight(me.index);
          var maxWidth, maxHeight, i, ilen;
          if (circumference < DOUBLE_PI$1) {
            var startAngle = opts.rotation % DOUBLE_PI$1;
            startAngle += startAngle >= PI$1 ? -DOUBLE_PI$1 : startAngle < -PI$1 ? DOUBLE_PI$1 : 0;
            var endAngle = startAngle + circumference;
            var startX = Math.cos(startAngle);
            var startY = Math.sin(startAngle);
            var endX = Math.cos(endAngle);
            var endY = Math.sin(endAngle);
            var contains0 = startAngle <= 0 && endAngle >= 0 || endAngle >= DOUBLE_PI$1;
            var contains90 = startAngle <= HALF_PI$1 && endAngle >= HALF_PI$1 || endAngle >= DOUBLE_PI$1 + HALF_PI$1;
            var contains180 = startAngle === -PI$1 || endAngle >= PI$1;
            var contains270 = startAngle <= -HALF_PI$1 && endAngle >= -HALF_PI$1 || endAngle >= PI$1 + HALF_PI$1;
            var minX = contains180 ? -1 : Math.min(startX, startX * cutout, endX, endX * cutout);
            var minY = contains270 ? -1 : Math.min(startY, startY * cutout, endY, endY * cutout);
            var maxX = contains0 ? 1 : Math.max(startX, startX * cutout, endX, endX * cutout);
            var maxY = contains90 ? 1 : Math.max(startY, startY * cutout, endY, endY * cutout);
            ratioX = (maxX - minX) / 2;
            ratioY = (maxY - minY) / 2;
            offsetX = -(maxX + minX) / 2;
            offsetY = -(maxY + minY) / 2;
          }
          for (i = 0, ilen = arcs.length; i < ilen; ++i) {
            arcs[i]._options = me._resolveDataElementOptions(arcs[i], i);
          }
          chart.borderWidth = me.getMaxBorderWidth();
          maxWidth = (chartArea.right - chartArea.left - chart.borderWidth) / ratioX;
          maxHeight = (chartArea.bottom - chartArea.top - chart.borderWidth) / ratioY;
          chart.outerRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
          chart.innerRadius = Math.max(chart.outerRadius * cutout, 0);
          chart.radiusLength = (chart.outerRadius - chart.innerRadius) / (me._getVisibleDatasetWeightTotal() || 1);
          chart.offsetX = offsetX * chart.outerRadius;
          chart.offsetY = offsetY * chart.outerRadius;
          meta.total = me.calculateTotal();
          me.outerRadius = chart.outerRadius - chart.radiusLength * me._getRingWeightOffset(me.index);
          me.innerRadius = Math.max(me.outerRadius - chart.radiusLength * chartWeight, 0);
          for (i = 0, ilen = arcs.length; i < ilen; ++i) {
            me.updateElement(arcs[i], i, reset);
          }
        },
        updateElement: function(arc, index, reset) {
          var me = this;
          var chart = me.chart;
          var chartArea = chart.chartArea;
          var opts = chart.options;
          var animationOpts = opts.animation;
          var centerX = (chartArea.left + chartArea.right) / 2;
          var centerY = (chartArea.top + chartArea.bottom) / 2;
          var startAngle = opts.rotation;
          var endAngle = opts.rotation;
          var dataset = me.getDataset();
          var circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / DOUBLE_PI$1);
          var innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;
          var outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;
          var options2 = arc._options || {};
          helpers$1.extend(arc, {
            // Utility
            _datasetIndex: me.index,
            _index: index,
            // Desired view properties
            _model: {
              backgroundColor: options2.backgroundColor,
              borderColor: options2.borderColor,
              borderWidth: options2.borderWidth,
              borderAlign: options2.borderAlign,
              x: centerX + chart.offsetX,
              y: centerY + chart.offsetY,
              startAngle,
              endAngle,
              circumference,
              outerRadius,
              innerRadius,
              label: helpers$1.valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
            }
          });
          var model = arc._model;
          if (!reset || !animationOpts.animateRotate) {
            if (index === 0) {
              model.startAngle = opts.rotation;
            } else {
              model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
            }
            model.endAngle = model.startAngle + model.circumference;
          }
          arc.pivot();
        },
        calculateTotal: function() {
          var dataset = this.getDataset();
          var meta = this.getMeta();
          var total = 0;
          var value;
          helpers$1.each(meta.data, function(element, index) {
            value = dataset.data[index];
            if (!isNaN(value) && !element.hidden) {
              total += Math.abs(value);
            }
          });
          return total;
        },
        calculateCircumference: function(value) {
          var total = this.getMeta().total;
          if (total > 0 && !isNaN(value)) {
            return DOUBLE_PI$1 * (Math.abs(value) / total);
          }
          return 0;
        },
        // gets the max border or hover width to properly scale pie charts
        getMaxBorderWidth: function(arcs) {
          var me = this;
          var max2 = 0;
          var chart = me.chart;
          var i, ilen, meta, arc, controller, options2, borderWidth, hoverWidth;
          if (!arcs) {
            for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
              if (chart.isDatasetVisible(i)) {
                meta = chart.getDatasetMeta(i);
                arcs = meta.data;
                if (i !== me.index) {
                  controller = meta.controller;
                }
                break;
              }
            }
          }
          if (!arcs) {
            return 0;
          }
          for (i = 0, ilen = arcs.length; i < ilen; ++i) {
            arc = arcs[i];
            if (controller) {
              controller._configure();
              options2 = controller._resolveDataElementOptions(arc, i);
            } else {
              options2 = arc._options;
            }
            if (options2.borderAlign !== "inner") {
              borderWidth = options2.borderWidth;
              hoverWidth = options2.hoverBorderWidth;
              max2 = borderWidth > max2 ? borderWidth : max2;
              max2 = hoverWidth > max2 ? hoverWidth : max2;
            }
          }
          return max2;
        },
        /**
         * @protected
         */
        setHoverStyle: function(arc) {
          var model = arc._model;
          var options2 = arc._options;
          var getHoverColor = helpers$1.getHoverColor;
          arc.$previousStyle = {
            backgroundColor: model.backgroundColor,
            borderColor: model.borderColor,
            borderWidth: model.borderWidth
          };
          model.backgroundColor = valueOrDefault$5(options2.hoverBackgroundColor, getHoverColor(options2.backgroundColor));
          model.borderColor = valueOrDefault$5(options2.hoverBorderColor, getHoverColor(options2.borderColor));
          model.borderWidth = valueOrDefault$5(options2.hoverBorderWidth, options2.borderWidth);
        },
        /**
         * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly
         * @private
         */
        _getRingWeightOffset: function(datasetIndex) {
          var ringWeightOffset = 0;
          for (var i = 0; i < datasetIndex; ++i) {
            if (this.chart.isDatasetVisible(i)) {
              ringWeightOffset += this._getRingWeight(i);
            }
          }
          return ringWeightOffset;
        },
        /**
         * @private
         */
        _getRingWeight: function(dataSetIndex) {
          return Math.max(valueOrDefault$5(this.chart.data.datasets[dataSetIndex].weight, 1), 0);
        },
        /**
         * Returns the sum of all visibile data set weights.  This value can be 0.
         * @private
         */
        _getVisibleDatasetWeightTotal: function() {
          return this._getRingWeightOffset(this.chart.data.datasets.length);
        }
      });
      core_defaults._set("horizontalBar", {
        hover: {
          mode: "index",
          axis: "y"
        },
        scales: {
          xAxes: [{
            type: "linear",
            position: "bottom"
          }],
          yAxes: [{
            type: "category",
            position: "left",
            offset: true,
            gridLines: {
              offsetGridLines: true
            }
          }]
        },
        elements: {
          rectangle: {
            borderSkipped: "left"
          }
        },
        tooltips: {
          mode: "index",
          axis: "y"
        }
      });
      core_defaults._set("global", {
        datasets: {
          horizontalBar: {
            categoryPercentage: 0.8,
            barPercentage: 0.9
          }
        }
      });
      var controller_horizontalBar = controller_bar.extend({
        /**
         * @private
         */
        _getValueScaleId: function() {
          return this.getMeta().xAxisID;
        },
        /**
         * @private
         */
        _getIndexScaleId: function() {
          return this.getMeta().yAxisID;
        }
      });
      var valueOrDefault$6 = helpers$1.valueOrDefault;
      var resolve$2 = helpers$1.options.resolve;
      var isPointInArea = helpers$1.canvas._isPointInArea;
      core_defaults._set("line", {
        showLines: true,
        spanGaps: false,
        hover: {
          mode: "label"
        },
        scales: {
          xAxes: [{
            type: "category",
            id: "x-axis-0"
          }],
          yAxes: [{
            type: "linear",
            id: "y-axis-0"
          }]
        }
      });
      function scaleClip(scale2, halfBorderWidth) {
        var tickOpts = scale2 && scale2.options.ticks || {};
        var reverse = tickOpts.reverse;
        var min2 = tickOpts.min === void 0 ? halfBorderWidth : 0;
        var max2 = tickOpts.max === void 0 ? halfBorderWidth : 0;
        return {
          start: reverse ? max2 : min2,
          end: reverse ? min2 : max2
        };
      }
      function defaultClip(xScale, yScale, borderWidth) {
        var halfBorderWidth = borderWidth / 2;
        var x = scaleClip(xScale, halfBorderWidth);
        var y = scaleClip(yScale, halfBorderWidth);
        return {
          top: y.end,
          right: x.end,
          bottom: y.start,
          left: x.start
        };
      }
      function toClip(value) {
        var t, r, b, l;
        if (helpers$1.isObject(value)) {
          t = value.top;
          r = value.right;
          b = value.bottom;
          l = value.left;
        } else {
          t = r = b = l = value;
        }
        return {
          top: t,
          right: r,
          bottom: b,
          left: l
        };
      }
      var controller_line = core_datasetController.extend({
        datasetElementType: elements.Line,
        dataElementType: elements.Point,
        /**
         * @private
         */
        _datasetElementOptions: [
          "backgroundColor",
          "borderCapStyle",
          "borderColor",
          "borderDash",
          "borderDashOffset",
          "borderJoinStyle",
          "borderWidth",
          "cubicInterpolationMode",
          "fill"
        ],
        /**
         * @private
         */
        _dataElementOptions: {
          backgroundColor: "pointBackgroundColor",
          borderColor: "pointBorderColor",
          borderWidth: "pointBorderWidth",
          hitRadius: "pointHitRadius",
          hoverBackgroundColor: "pointHoverBackgroundColor",
          hoverBorderColor: "pointHoverBorderColor",
          hoverBorderWidth: "pointHoverBorderWidth",
          hoverRadius: "pointHoverRadius",
          pointStyle: "pointStyle",
          radius: "pointRadius",
          rotation: "pointRotation"
        },
        update: function(reset) {
          var me = this;
          var meta = me.getMeta();
          var line = meta.dataset;
          var points = meta.data || [];
          var options2 = me.chart.options;
          var config = me._config;
          var showLine = me._showLine = valueOrDefault$6(config.showLine, options2.showLines);
          var i, ilen;
          me._xScale = me.getScaleForId(meta.xAxisID);
          me._yScale = me.getScaleForId(meta.yAxisID);
          if (showLine) {
            if (config.tension !== void 0 && config.lineTension === void 0) {
              config.lineTension = config.tension;
            }
            line._scale = me._yScale;
            line._datasetIndex = me.index;
            line._children = points;
            line._model = me._resolveDatasetElementOptions(line);
            line.pivot();
          }
          for (i = 0, ilen = points.length; i < ilen; ++i) {
            me.updateElement(points[i], i, reset);
          }
          if (showLine && line._model.tension !== 0) {
            me.updateBezierControlPoints();
          }
          for (i = 0, ilen = points.length; i < ilen; ++i) {
            points[i].pivot();
          }
        },
        updateElement: function(point, index, reset) {
          var me = this;
          var meta = me.getMeta();
          var custom = point.custom || {};
          var dataset = me.getDataset();
          var datasetIndex = me.index;
          var value = dataset.data[index];
          var xScale = me._xScale;
          var yScale = me._yScale;
          var lineModel = meta.dataset._model;
          var x, y;
          var options2 = me._resolveDataElementOptions(point, index);
          x = xScale.getPixelForValue(typeof value === "object" ? value : NaN, index, datasetIndex);
          y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);
          point._xScale = xScale;
          point._yScale = yScale;
          point._options = options2;
          point._datasetIndex = datasetIndex;
          point._index = index;
          point._model = {
            x,
            y,
            skip: custom.skip || isNaN(x) || isNaN(y),
            // Appearance
            radius: options2.radius,
            pointStyle: options2.pointStyle,
            rotation: options2.rotation,
            backgroundColor: options2.backgroundColor,
            borderColor: options2.borderColor,
            borderWidth: options2.borderWidth,
            tension: valueOrDefault$6(custom.tension, lineModel ? lineModel.tension : 0),
            steppedLine: lineModel ? lineModel.steppedLine : false,
            // Tooltip
            hitRadius: options2.hitRadius
          };
        },
        /**
         * @private
         */
        _resolveDatasetElementOptions: function(element) {
          var me = this;
          var config = me._config;
          var custom = element.custom || {};
          var options2 = me.chart.options;
          var lineOptions = options2.elements.line;
          var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);
          values.spanGaps = valueOrDefault$6(config.spanGaps, options2.spanGaps);
          values.tension = valueOrDefault$6(config.lineTension, lineOptions.tension);
          values.steppedLine = resolve$2([custom.steppedLine, config.steppedLine, lineOptions.stepped]);
          values.clip = toClip(valueOrDefault$6(config.clip, defaultClip(me._xScale, me._yScale, values.borderWidth)));
          return values;
        },
        calculatePointY: function(value, index, datasetIndex) {
          var me = this;
          var chart = me.chart;
          var yScale = me._yScale;
          var sumPos = 0;
          var sumNeg = 0;
          var i, ds, dsMeta, stackedRightValue, rightValue, metasets, ilen;
          if (yScale.options.stacked) {
            rightValue = +yScale.getRightValue(value);
            metasets = chart._getSortedVisibleDatasetMetas();
            ilen = metasets.length;
            for (i = 0; i < ilen; ++i) {
              dsMeta = metasets[i];
              if (dsMeta.index === datasetIndex) {
                break;
              }
              ds = chart.data.datasets[dsMeta.index];
              if (dsMeta.type === "line" && dsMeta.yAxisID === yScale.id) {
                stackedRightValue = +yScale.getRightValue(ds.data[index]);
                if (stackedRightValue < 0) {
                  sumNeg += stackedRightValue || 0;
                } else {
                  sumPos += stackedRightValue || 0;
                }
              }
            }
            if (rightValue < 0) {
              return yScale.getPixelForValue(sumNeg + rightValue);
            }
            return yScale.getPixelForValue(sumPos + rightValue);
          }
          return yScale.getPixelForValue(value);
        },
        updateBezierControlPoints: function() {
          var me = this;
          var chart = me.chart;
          var meta = me.getMeta();
          var lineModel = meta.dataset._model;
          var area = chart.chartArea;
          var points = meta.data || [];
          var i, ilen, model, controlPoints;
          if (lineModel.spanGaps) {
            points = points.filter(function(pt) {
              return !pt._model.skip;
            });
          }
          function capControlPoint(pt, min2, max2) {
            return Math.max(Math.min(pt, max2), min2);
          }
          if (lineModel.cubicInterpolationMode === "monotone") {
            helpers$1.splineCurveMonotone(points);
          } else {
            for (i = 0, ilen = points.length; i < ilen; ++i) {
              model = points[i]._model;
              controlPoints = helpers$1.splineCurve(
                helpers$1.previousItem(points, i)._model,
                model,
                helpers$1.nextItem(points, i)._model,
                lineModel.tension
              );
              model.controlPointPreviousX = controlPoints.previous.x;
              model.controlPointPreviousY = controlPoints.previous.y;
              model.controlPointNextX = controlPoints.next.x;
              model.controlPointNextY = controlPoints.next.y;
            }
          }
          if (chart.options.elements.line.capBezierPoints) {
            for (i = 0, ilen = points.length; i < ilen; ++i) {
              model = points[i]._model;
              if (isPointInArea(model, area)) {
                if (i > 0 && isPointInArea(points[i - 1]._model, area)) {
                  model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
                  model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
                }
                if (i < points.length - 1 && isPointInArea(points[i + 1]._model, area)) {
                  model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
                  model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
                }
              }
            }
          }
        },
        draw: function() {
          var me = this;
          var chart = me.chart;
          var meta = me.getMeta();
          var points = meta.data || [];
          var area = chart.chartArea;
          var canvas2 = chart.canvas;
          var i = 0;
          var ilen = points.length;
          var clip;
          if (me._showLine) {
            clip = meta.dataset._model.clip;
            helpers$1.canvas.clipArea(chart.ctx, {
              left: clip.left === false ? 0 : area.left - clip.left,
              right: clip.right === false ? canvas2.width : area.right + clip.right,
              top: clip.top === false ? 0 : area.top - clip.top,
              bottom: clip.bottom === false ? canvas2.height : area.bottom + clip.bottom
            });
            meta.dataset.draw();
            helpers$1.canvas.unclipArea(chart.ctx);
          }
          for (; i < ilen; ++i) {
            points[i].draw(area);
          }
        },
        /**
         * @protected
         */
        setHoverStyle: function(point) {
          var model = point._model;
          var options2 = point._options;
          var getHoverColor = helpers$1.getHoverColor;
          point.$previousStyle = {
            backgroundColor: model.backgroundColor,
            borderColor: model.borderColor,
            borderWidth: model.borderWidth,
            radius: model.radius
          };
          model.backgroundColor = valueOrDefault$6(options2.hoverBackgroundColor, getHoverColor(options2.backgroundColor));
          model.borderColor = valueOrDefault$6(options2.hoverBorderColor, getHoverColor(options2.borderColor));
          model.borderWidth = valueOrDefault$6(options2.hoverBorderWidth, options2.borderWidth);
          model.radius = valueOrDefault$6(options2.hoverRadius, options2.radius);
        }
      });
      var resolve$3 = helpers$1.options.resolve;
      core_defaults._set("polarArea", {
        scale: {
          type: "radialLinear",
          angleLines: {
            display: false
          },
          gridLines: {
            circular: true
          },
          pointLabels: {
            display: false
          },
          ticks: {
            beginAtZero: true
          }
        },
        // Boolean - Whether to animate the rotation of the chart
        animation: {
          animateRotate: true,
          animateScale: true
        },
        startAngle: -0.5 * Math.PI,
        legendCallback: function(chart) {
          var list = document.createElement("ul");
          var data = chart.data;
          var datasets = data.datasets;
          var labels = data.labels;
          var i, ilen, listItem, listItemSpan;
          list.setAttribute("class", chart.id + "-legend");
          if (datasets.length) {
            for (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {
              listItem = list.appendChild(document.createElement("li"));
              listItemSpan = listItem.appendChild(document.createElement("span"));
              listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];
              if (labels[i]) {
                listItem.appendChild(document.createTextNode(labels[i]));
              }
            }
          }
          return list.outerHTML;
        },
        legend: {
          labels: {
            generateLabels: function(chart) {
              var data = chart.data;
              if (data.labels.length && data.datasets.length) {
                return data.labels.map(function(label, i) {
                  var meta = chart.getDatasetMeta(0);
                  var style = meta.controller.getStyle(i);
                  return {
                    text: label,
                    fillStyle: style.backgroundColor,
                    strokeStyle: style.borderColor,
                    lineWidth: style.borderWidth,
                    hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,
                    // Extra data used for toggling the correct item
                    index: i
                  };
                });
              }
              return [];
            }
          },
          onClick: function(e, legendItem) {
            var index = legendItem.index;
            var chart = this.chart;
            var i, ilen, meta;
            for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
              meta = chart.getDatasetMeta(i);
              meta.data[index].hidden = !meta.data[index].hidden;
            }
            chart.update();
          }
        },
        // Need to override these to give a nice default
        tooltips: {
          callbacks: {
            title: function() {
              return "";
            },
            label: function(item, data) {
              return data.labels[item.index] + ": " + item.yLabel;
            }
          }
        }
      });
      var controller_polarArea = core_datasetController.extend({
        dataElementType: elements.Arc,
        linkScales: helpers$1.noop,
        /**
         * @private
         */
        _dataElementOptions: [
          "backgroundColor",
          "borderColor",
          "borderWidth",
          "borderAlign",
          "hoverBackgroundColor",
          "hoverBorderColor",
          "hoverBorderWidth"
        ],
        /**
         * @private
         */
        _getIndexScaleId: function() {
          return this.chart.scale.id;
        },
        /**
         * @private
         */
        _getValueScaleId: function() {
          return this.chart.scale.id;
        },
        update: function(reset) {
          var me = this;
          var dataset = me.getDataset();
          var meta = me.getMeta();
          var start = me.chart.options.startAngle || 0;
          var starts = me._starts = [];
          var angles = me._angles = [];
          var arcs = meta.data;
          var i, ilen, angle;
          me._updateRadius();
          meta.count = me.countVisibleElements();
          for (i = 0, ilen = dataset.data.length; i < ilen; i++) {
            starts[i] = start;
            angle = me._computeAngle(i);
            angles[i] = angle;
            start += angle;
          }
          for (i = 0, ilen = arcs.length; i < ilen; ++i) {
            arcs[i]._options = me._resolveDataElementOptions(arcs[i], i);
            me.updateElement(arcs[i], i, reset);
          }
        },
        /**
         * @private
         */
        _updateRadius: function() {
          var me = this;
          var chart = me.chart;
          var chartArea = chart.chartArea;
          var opts = chart.options;
          var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
          chart.outerRadius = Math.max(minSize / 2, 0);
          chart.innerRadius = Math.max(opts.cutoutPercentage ? chart.outerRadius / 100 * opts.cutoutPercentage : 1, 0);
          chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
          me.outerRadius = chart.outerRadius - chart.radiusLength * me.index;
          me.innerRadius = me.outerRadius - chart.radiusLength;
        },
        updateElement: function(arc, index, reset) {
          var me = this;
          var chart = me.chart;
          var dataset = me.getDataset();
          var opts = chart.options;
          var animationOpts = opts.animation;
          var scale2 = chart.scale;
          var labels = chart.data.labels;
          var centerX = scale2.xCenter;
          var centerY = scale2.yCenter;
          var datasetStartAngle = opts.startAngle;
          var distance = arc.hidden ? 0 : scale2.getDistanceFromCenterForValue(dataset.data[index]);
          var startAngle = me._starts[index];
          var endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);
          var resetRadius = animationOpts.animateScale ? 0 : scale2.getDistanceFromCenterForValue(dataset.data[index]);
          var options2 = arc._options || {};
          helpers$1.extend(arc, {
            // Utility
            _datasetIndex: me.index,
            _index: index,
            _scale: scale2,
            // Desired view properties
            _model: {
              backgroundColor: options2.backgroundColor,
              borderColor: options2.borderColor,
              borderWidth: options2.borderWidth,
              borderAlign: options2.borderAlign,
              x: centerX,
              y: centerY,
              innerRadius: 0,
              outerRadius: reset ? resetRadius : distance,
              startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
              endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
              label: helpers$1.valueAtIndexOrDefault(labels, index, labels[index])
            }
          });
          arc.pivot();
        },
        countVisibleElements: function() {
          var dataset = this.getDataset();
          var meta = this.getMeta();
          var count = 0;
          helpers$1.each(meta.data, function(element, index) {
            if (!isNaN(dataset.data[index]) && !element.hidden) {
              count++;
            }
          });
          return count;
        },
        /**
         * @protected
         */
        setHoverStyle: function(arc) {
          var model = arc._model;
          var options2 = arc._options;
          var getHoverColor = helpers$1.getHoverColor;
          var valueOrDefault2 = helpers$1.valueOrDefault;
          arc.$previousStyle = {
            backgroundColor: model.backgroundColor,
            borderColor: model.borderColor,
            borderWidth: model.borderWidth
          };
          model.backgroundColor = valueOrDefault2(options2.hoverBackgroundColor, getHoverColor(options2.backgroundColor));
          model.borderColor = valueOrDefault2(options2.hoverBorderColor, getHoverColor(options2.borderColor));
          model.borderWidth = valueOrDefault2(options2.hoverBorderWidth, options2.borderWidth);
        },
        /**
         * @private
         */
        _computeAngle: function(index) {
          var me = this;
          var count = this.getMeta().count;
          var dataset = me.getDataset();
          var meta = me.getMeta();
          if (isNaN(dataset.data[index]) || meta.data[index].hidden) {
            return 0;
          }
          var context = {
            chart: me.chart,
            dataIndex: index,
            dataset,
            datasetIndex: me.index
          };
          return resolve$3([
            me.chart.options.elements.arc.angle,
            2 * Math.PI / count
          ], context, index);
        }
      });
      core_defaults._set("pie", helpers$1.clone(core_defaults.doughnut));
      core_defaults._set("pie", {
        cutoutPercentage: 0
      });
      var controller_pie = controller_doughnut;
      var valueOrDefault$7 = helpers$1.valueOrDefault;
      core_defaults._set("radar", {
        spanGaps: false,
        scale: {
          type: "radialLinear"
        },
        elements: {
          line: {
            fill: "start",
            tension: 0
            // no bezier in radar
          }
        }
      });
      var controller_radar = core_datasetController.extend({
        datasetElementType: elements.Line,
        dataElementType: elements.Point,
        linkScales: helpers$1.noop,
        /**
         * @private
         */
        _datasetElementOptions: [
          "backgroundColor",
          "borderWidth",
          "borderColor",
          "borderCapStyle",
          "borderDash",
          "borderDashOffset",
          "borderJoinStyle",
          "fill"
        ],
        /**
         * @private
         */
        _dataElementOptions: {
          backgroundColor: "pointBackgroundColor",
          borderColor: "pointBorderColor",
          borderWidth: "pointBorderWidth",
          hitRadius: "pointHitRadius",
          hoverBackgroundColor: "pointHoverBackgroundColor",
          hoverBorderColor: "pointHoverBorderColor",
          hoverBorderWidth: "pointHoverBorderWidth",
          hoverRadius: "pointHoverRadius",
          pointStyle: "pointStyle",
          radius: "pointRadius",
          rotation: "pointRotation"
        },
        /**
         * @private
         */
        _getIndexScaleId: function() {
          return this.chart.scale.id;
        },
        /**
         * @private
         */
        _getValueScaleId: function() {
          return this.chart.scale.id;
        },
        update: function(reset) {
          var me = this;
          var meta = me.getMeta();
          var line = meta.dataset;
          var points = meta.data || [];
          var scale2 = me.chart.scale;
          var config = me._config;
          var i, ilen;
          if (config.tension !== void 0 && config.lineTension === void 0) {
            config.lineTension = config.tension;
          }
          line._scale = scale2;
          line._datasetIndex = me.index;
          line._children = points;
          line._loop = true;
          line._model = me._resolveDatasetElementOptions(line);
          line.pivot();
          for (i = 0, ilen = points.length; i < ilen; ++i) {
            me.updateElement(points[i], i, reset);
          }
          me.updateBezierControlPoints();
          for (i = 0, ilen = points.length; i < ilen; ++i) {
            points[i].pivot();
          }
        },
        updateElement: function(point, index, reset) {
          var me = this;
          var custom = point.custom || {};
          var dataset = me.getDataset();
          var scale2 = me.chart.scale;
          var pointPosition = scale2.getPointPositionForValue(index, dataset.data[index]);
          var options2 = me._resolveDataElementOptions(point, index);
          var lineModel = me.getMeta().dataset._model;
          var x = reset ? scale2.xCenter : pointPosition.x;
          var y = reset ? scale2.yCenter : pointPosition.y;
          point._scale = scale2;
          point._options = options2;
          point._datasetIndex = me.index;
          point._index = index;
          point._model = {
            x,
            // value not used in dataset scale, but we want a consistent API between scales
            y,
            skip: custom.skip || isNaN(x) || isNaN(y),
            // Appearance
            radius: options2.radius,
            pointStyle: options2.pointStyle,
            rotation: options2.rotation,
            backgroundColor: options2.backgroundColor,
            borderColor: options2.borderColor,
            borderWidth: options2.borderWidth,
            tension: valueOrDefault$7(custom.tension, lineModel ? lineModel.tension : 0),
            // Tooltip
            hitRadius: options2.hitRadius
          };
        },
        /**
         * @private
         */
        _resolveDatasetElementOptions: function() {
          var me = this;
          var config = me._config;
          var options2 = me.chart.options;
          var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);
          values.spanGaps = valueOrDefault$7(config.spanGaps, options2.spanGaps);
          values.tension = valueOrDefault$7(config.lineTension, options2.elements.line.tension);
          return values;
        },
        updateBezierControlPoints: function() {
          var me = this;
          var meta = me.getMeta();
          var area = me.chart.chartArea;
          var points = meta.data || [];
          var i, ilen, model, controlPoints;
          if (meta.dataset._model.spanGaps) {
            points = points.filter(function(pt) {
              return !pt._model.skip;
            });
          }
          function capControlPoint(pt, min2, max2) {
            return Math.max(Math.min(pt, max2), min2);
          }
          for (i = 0, ilen = points.length; i < ilen; ++i) {
            model = points[i]._model;
            controlPoints = helpers$1.splineCurve(
              helpers$1.previousItem(points, i, true)._model,
              model,
              helpers$1.nextItem(points, i, true)._model,
              model.tension
            );
            model.controlPointPreviousX = capControlPoint(controlPoints.previous.x, area.left, area.right);
            model.controlPointPreviousY = capControlPoint(controlPoints.previous.y, area.top, area.bottom);
            model.controlPointNextX = capControlPoint(controlPoints.next.x, area.left, area.right);
            model.controlPointNextY = capControlPoint(controlPoints.next.y, area.top, area.bottom);
          }
        },
        setHoverStyle: function(point) {
          var model = point._model;
          var options2 = point._options;
          var getHoverColor = helpers$1.getHoverColor;
          point.$previousStyle = {
            backgroundColor: model.backgroundColor,
            borderColor: model.borderColor,
            borderWidth: model.borderWidth,
            radius: model.radius
          };
          model.backgroundColor = valueOrDefault$7(options2.hoverBackgroundColor, getHoverColor(options2.backgroundColor));
          model.borderColor = valueOrDefault$7(options2.hoverBorderColor, getHoverColor(options2.borderColor));
          model.borderWidth = valueOrDefault$7(options2.hoverBorderWidth, options2.borderWidth);
          model.radius = valueOrDefault$7(options2.hoverRadius, options2.radius);
        }
      });
      core_defaults._set("scatter", {
        hover: {
          mode: "single"
        },
        scales: {
          xAxes: [{
            id: "x-axis-1",
            // need an ID so datasets can reference the scale
            type: "linear",
            // scatter should not use a category axis
            position: "bottom"
          }],
          yAxes: [{
            id: "y-axis-1",
            type: "linear",
            position: "left"
          }]
        },
        tooltips: {
          callbacks: {
            title: function() {
              return "";
            },
            label: function(item) {
              return "(" + item.xLabel + ", " + item.yLabel + ")";
            }
          }
        }
      });
      core_defaults._set("global", {
        datasets: {
          scatter: {
            showLine: false
          }
        }
      });
      var controller_scatter = controller_line;
      var controllers = {
        bar: controller_bar,
        bubble: controller_bubble,
        doughnut: controller_doughnut,
        horizontalBar: controller_horizontalBar,
        line: controller_line,
        polarArea: controller_polarArea,
        pie: controller_pie,
        radar: controller_radar,
        scatter: controller_scatter
      };
      function getRelativePosition(e, chart) {
        if (e.native) {
          return {
            x: e.x,
            y: e.y
          };
        }
        return helpers$1.getRelativePosition(e, chart);
      }
      function parseVisibleItems(chart, handler) {
        var metasets = chart._getSortedVisibleDatasetMetas();
        var metadata, i, j, ilen, jlen, element;
        for (i = 0, ilen = metasets.length; i < ilen; ++i) {
          metadata = metasets[i].data;
          for (j = 0, jlen = metadata.length; j < jlen; ++j) {
            element = metadata[j];
            if (!element._view.skip) {
              handler(element);
            }
          }
        }
      }
      function getIntersectItems(chart, position) {
        var elements2 = [];
        parseVisibleItems(chart, function(element) {
          if (element.inRange(position.x, position.y)) {
            elements2.push(element);
          }
        });
        return elements2;
      }
      function getNearestItems(chart, position, intersect, distanceMetric) {
        var minDistance = Number.POSITIVE_INFINITY;
        var nearestItems = [];
        parseVisibleItems(chart, function(element) {
          if (intersect && !element.inRange(position.x, position.y)) {
            return;
          }
          var center = element.getCenterPoint();
          var distance = distanceMetric(position, center);
          if (distance < minDistance) {
            nearestItems = [element];
            minDistance = distance;
          } else if (distance === minDistance) {
            nearestItems.push(element);
          }
        });
        return nearestItems;
      }
      function getDistanceMetricForAxis(axis) {
        var useX = axis.indexOf("x") !== -1;
        var useY = axis.indexOf("y") !== -1;
        return function(pt1, pt2) {
          var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
          var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
          return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
        };
      }
      function indexMode(chart, e, options2) {
        var position = getRelativePosition(e, chart);
        options2.axis = options2.axis || "x";
        var distanceMetric = getDistanceMetricForAxis(options2.axis);
        var items = options2.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
        var elements2 = [];
        if (!items.length) {
          return [];
        }
        chart._getSortedVisibleDatasetMetas().forEach(function(meta) {
          var element = meta.data[items[0]._index];
          if (element && !element._view.skip) {
            elements2.push(element);
          }
        });
        return elements2;
      }
      var core_interaction = {
        // Helper function for different modes
        modes: {
          single: function(chart, e) {
            var position = getRelativePosition(e, chart);
            var elements2 = [];
            parseVisibleItems(chart, function(element) {
              if (element.inRange(position.x, position.y)) {
                elements2.push(element);
                return elements2;
              }
            });
            return elements2.slice(0, 1);
          },
          /**
           * @function Chart.Interaction.modes.label
           * @deprecated since version 2.4.0
           * @todo remove at version 3
           * @private
           */
          label: indexMode,
          /**
           * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something
           * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item
           * @function Chart.Interaction.modes.index
           * @since v2.4.0
           * @param {Chart} chart - the chart we are returning items from
           * @param {Event} e - the event we are find things at
           * @param {IInteractionOptions} options - options to use during interaction
           * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
           */
          index: indexMode,
          /**
           * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something
           * If the options.intersect is false, we find the nearest item and return the items in that dataset
           * @function Chart.Interaction.modes.dataset
           * @param {Chart} chart - the chart we are returning items from
           * @param {Event} e - the event we are find things at
           * @param {IInteractionOptions} options - options to use during interaction
           * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
           */
          dataset: function(chart, e, options2) {
            var position = getRelativePosition(e, chart);
            options2.axis = options2.axis || "xy";
            var distanceMetric = getDistanceMetricForAxis(options2.axis);
            var items = options2.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
            if (items.length > 0) {
              items = chart.getDatasetMeta(items[0]._datasetIndex).data;
            }
            return items;
          },
          /**
           * @function Chart.Interaction.modes.x-axis
           * @deprecated since version 2.4.0. Use index mode and intersect == true
           * @todo remove at version 3
           * @private
           */
          "x-axis": function(chart, e) {
            return indexMode(chart, e, { intersect: false });
          },
          /**
           * Point mode returns all elements that hit test based on the event position
           * of the event
           * @function Chart.Interaction.modes.intersect
           * @param {Chart} chart - the chart we are returning items from
           * @param {Event} e - the event we are find things at
           * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
           */
          point: function(chart, e) {
            var position = getRelativePosition(e, chart);
            return getIntersectItems(chart, position);
          },
          /**
           * nearest mode returns the element closest to the point
           * @function Chart.Interaction.modes.intersect
           * @param {Chart} chart - the chart we are returning items from
           * @param {Event} e - the event we are find things at
           * @param {IInteractionOptions} options - options to use
           * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
           */
          nearest: function(chart, e, options2) {
            var position = getRelativePosition(e, chart);
            options2.axis = options2.axis || "xy";
            var distanceMetric = getDistanceMetricForAxis(options2.axis);
            return getNearestItems(chart, position, options2.intersect, distanceMetric);
          },
          /**
           * x mode returns the elements that hit-test at the current x coordinate
           * @function Chart.Interaction.modes.x
           * @param {Chart} chart - the chart we are returning items from
           * @param {Event} e - the event we are find things at
           * @param {IInteractionOptions} options - options to use
           * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
           */
          x: function(chart, e, options2) {
            var position = getRelativePosition(e, chart);
            var items = [];
            var intersectsItem = false;
            parseVisibleItems(chart, function(element) {
              if (element.inXRange(position.x)) {
                items.push(element);
              }
              if (element.inRange(position.x, position.y)) {
                intersectsItem = true;
              }
            });
            if (options2.intersect && !intersectsItem) {
              items = [];
            }
            return items;
          },
          /**
           * y mode returns the elements that hit-test at the current y coordinate
           * @function Chart.Interaction.modes.y
           * @param {Chart} chart - the chart we are returning items from
           * @param {Event} e - the event we are find things at
           * @param {IInteractionOptions} options - options to use
           * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
           */
          y: function(chart, e, options2) {
            var position = getRelativePosition(e, chart);
            var items = [];
            var intersectsItem = false;
            parseVisibleItems(chart, function(element) {
              if (element.inYRange(position.y)) {
                items.push(element);
              }
              if (element.inRange(position.x, position.y)) {
                intersectsItem = true;
              }
            });
            if (options2.intersect && !intersectsItem) {
              items = [];
            }
            return items;
          }
        }
      };
      var extend2 = helpers$1.extend;
      function filterByPosition(array, position) {
        return helpers$1.where(array, function(v) {
          return v.pos === position;
        });
      }
      function sortByWeight(array, reverse) {
        return array.sort(function(a, b) {
          var v0 = reverse ? b : a;
          var v1 = reverse ? a : b;
          return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
        });
      }
      function wrapBoxes(boxes) {
        var layoutBoxes = [];
        var i, ilen, box;
        for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {
          box = boxes[i];
          layoutBoxes.push({
            index: i,
            box,
            pos: box.position,
            horizontal: box.isHorizontal(),
            weight: box.weight
          });
        }
        return layoutBoxes;
      }
      function setLayoutDims(layouts, params) {
        var i, ilen, layout;
        for (i = 0, ilen = layouts.length; i < ilen; ++i) {
          layout = layouts[i];
          layout.width = layout.horizontal ? layout.box.fullWidth && params.availableWidth : params.vBoxMaxWidth;
          layout.height = layout.horizontal && params.hBoxMaxHeight;
        }
      }
      function buildLayoutBoxes(boxes) {
        var layoutBoxes = wrapBoxes(boxes);
        var left = sortByWeight(filterByPosition(layoutBoxes, "left"), true);
        var right = sortByWeight(filterByPosition(layoutBoxes, "right"));
        var top = sortByWeight(filterByPosition(layoutBoxes, "top"), true);
        var bottom = sortByWeight(filterByPosition(layoutBoxes, "bottom"));
        return {
          leftAndTop: left.concat(top),
          rightAndBottom: right.concat(bottom),
          chartArea: filterByPosition(layoutBoxes, "chartArea"),
          vertical: left.concat(right),
          horizontal: top.concat(bottom)
        };
      }
      function getCombinedMax(maxPadding, chartArea, a, b) {
        return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
      }
      function updateDims(chartArea, params, layout) {
        var box = layout.box;
        var maxPadding = chartArea.maxPadding;
        var newWidth, newHeight;
        if (layout.size) {
          chartArea[layout.pos] -= layout.size;
        }
        layout.size = layout.horizontal ? box.height : box.width;
        chartArea[layout.pos] += layout.size;
        if (box.getPadding) {
          var boxPadding = box.getPadding();
          maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
          maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
          maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
          maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
        }
        newWidth = params.outerWidth - getCombinedMax(maxPadding, chartArea, "left", "right");
        newHeight = params.outerHeight - getCombinedMax(maxPadding, chartArea, "top", "bottom");
        if (newWidth !== chartArea.w || newHeight !== chartArea.h) {
          chartArea.w = newWidth;
          chartArea.h = newHeight;
          var sizes = layout.horizontal ? [newWidth, chartArea.w] : [newHeight, chartArea.h];
          return sizes[0] !== sizes[1] && (!isNaN(sizes[0]) || !isNaN(sizes[1]));
        }
      }
      function handleMaxPadding(chartArea) {
        var maxPadding = chartArea.maxPadding;
        function updatePos(pos) {
          var change = Math.max(maxPadding[pos] - chartArea[pos], 0);
          chartArea[pos] += change;
          return change;
        }
        chartArea.y += updatePos("top");
        chartArea.x += updatePos("left");
        updatePos("right");
        updatePos("bottom");
      }
      function getMargins(horizontal, chartArea) {
        var maxPadding = chartArea.maxPadding;
        function marginForPositions(positions) {
          var margin = { left: 0, top: 0, right: 0, bottom: 0 };
          positions.forEach(function(pos) {
            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
          });
          return margin;
        }
        return horizontal ? marginForPositions(["left", "right"]) : marginForPositions(["top", "bottom"]);
      }
      function fitBoxes(boxes, chartArea, params) {
        var refitBoxes = [];
        var i, ilen, layout, box, refit, changed;
        for (i = 0, ilen = boxes.length; i < ilen; ++i) {
          layout = boxes[i];
          box = layout.box;
          box.update(
            layout.width || chartArea.w,
            layout.height || chartArea.h,
            getMargins(layout.horizontal, chartArea)
          );
          if (updateDims(chartArea, params, layout)) {
            changed = true;
            if (refitBoxes.length) {
              refit = true;
            }
          }
          if (!box.fullWidth) {
            refitBoxes.push(layout);
          }
        }
        return refit ? fitBoxes(refitBoxes, chartArea, params) || changed : changed;
      }
      function placeBoxes(boxes, chartArea, params) {
        var userPadding = params.padding;
        var x = chartArea.x;
        var y = chartArea.y;
        var i, ilen, layout, box;
        for (i = 0, ilen = boxes.length; i < ilen; ++i) {
          layout = boxes[i];
          box = layout.box;
          if (layout.horizontal) {
            box.left = box.fullWidth ? userPadding.left : chartArea.left;
            box.right = box.fullWidth ? params.outerWidth - userPadding.right : chartArea.left + chartArea.w;
            box.top = y;
            box.bottom = y + box.height;
            box.width = box.right - box.left;
            y = box.bottom;
          } else {
            box.left = x;
            box.right = x + box.width;
            box.top = chartArea.top;
            box.bottom = chartArea.top + chartArea.h;
            box.height = box.bottom - box.top;
            x = box.right;
          }
        }
        chartArea.x = x;
        chartArea.y = y;
      }
      core_defaults._set("global", {
        layout: {
          padding: {
            top: 0,
            right: 0,
            bottom: 0,
            left: 0
          }
        }
      });
      var core_layouts = {
        defaults: {},
        /**
         * Register a box to a chart.
         * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.
         * @param {Chart} chart - the chart to use
         * @param {ILayoutItem} item - the item to add to be layed out
         */
        addBox: function(chart, item) {
          if (!chart.boxes) {
            chart.boxes = [];
          }
          item.fullWidth = item.fullWidth || false;
          item.position = item.position || "top";
          item.weight = item.weight || 0;
          item._layers = item._layers || function() {
            return [{
              z: 0,
              draw: function() {
                item.draw.apply(item, arguments);
              }
            }];
          };
          chart.boxes.push(item);
        },
        /**
         * Remove a layoutItem from a chart
         * @param {Chart} chart - the chart to remove the box from
         * @param {ILayoutItem} layoutItem - the item to remove from the layout
         */
        removeBox: function(chart, layoutItem) {
          var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
          if (index !== -1) {
            chart.boxes.splice(index, 1);
          }
        },
        /**
         * Sets (or updates) options on the given `item`.
         * @param {Chart} chart - the chart in which the item lives (or will be added to)
         * @param {ILayoutItem} item - the item to configure with the given options
         * @param {object} options - the new item options.
         */
        configure: function(chart, item, options2) {
          var props = ["fullWidth", "position", "weight"];
          var ilen = props.length;
          var i = 0;
          var prop;
          for (; i < ilen; ++i) {
            prop = props[i];
            if (options2.hasOwnProperty(prop)) {
              item[prop] = options2[prop];
            }
          }
        },
        /**
         * Fits boxes of the given chart into the given size by having each box measure itself
         * then running a fitting algorithm
         * @param {Chart} chart - the chart
         * @param {number} width - the width to fit into
         * @param {number} height - the height to fit into
         */
        update: function(chart, width, height) {
          if (!chart) {
            return;
          }
          var layoutOptions = chart.options.layout || {};
          var padding = helpers$1.options.toPadding(layoutOptions.padding);
          var availableWidth = width - padding.width;
          var availableHeight = height - padding.height;
          var boxes = buildLayoutBoxes(chart.boxes);
          var verticalBoxes = boxes.vertical;
          var horizontalBoxes = boxes.horizontal;
          var params = Object.freeze({
            outerWidth: width,
            outerHeight: height,
            padding,
            availableWidth,
            vBoxMaxWidth: availableWidth / 2 / verticalBoxes.length,
            hBoxMaxHeight: availableHeight / 2
          });
          var chartArea = extend2({
            maxPadding: extend2({}, padding),
            w: availableWidth,
            h: availableHeight,
            x: padding.left,
            y: padding.top
          }, padding);
          setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
          fitBoxes(verticalBoxes, chartArea, params);
          if (fitBoxes(horizontalBoxes, chartArea, params)) {
            fitBoxes(verticalBoxes, chartArea, params);
          }
          handleMaxPadding(chartArea);
          placeBoxes(boxes.leftAndTop, chartArea, params);
          chartArea.x += chartArea.w;
          chartArea.y += chartArea.h;
          placeBoxes(boxes.rightAndBottom, chartArea, params);
          chart.chartArea = {
            left: chartArea.left,
            top: chartArea.top,
            right: chartArea.left + chartArea.w,
            bottom: chartArea.top + chartArea.h
          };
          helpers$1.each(boxes.chartArea, function(layout) {
            var box = layout.box;
            extend2(box, chart.chartArea);
            box.update(chartArea.w, chartArea.h);
          });
        }
      };
      var platform_basic = {
        acquireContext: function(item) {
          if (item && item.canvas) {
            item = item.canvas;
          }
          return item && item.getContext("2d") || null;
        }
      };
      var platform_dom = "/*\r\n * DOM element rendering detection\r\n * https://davidwalsh.name/detect-node-insertion\r\n */\r\n@keyframes chartjs-render-animation {\r\n	from { opacity: 0.99; }\r\n	to { opacity: 1; }\r\n}\r\n\r\n.chartjs-render-monitor {\r\n	animation: chartjs-render-animation 0.001s;\r\n}\r\n\r\n/*\r\n * DOM element resizing detection\r\n * https://github.com/marcj/css-element-queries\r\n */\r\n.chartjs-size-monitor,\r\n.chartjs-size-monitor-expand,\r\n.chartjs-size-monitor-shrink {\r\n	position: absolute;\r\n	direction: ltr;\r\n	left: 0;\r\n	top: 0;\r\n	right: 0;\r\n	bottom: 0;\r\n	overflow: hidden;\r\n	pointer-events: none;\r\n	visibility: hidden;\r\n	z-index: -1;\r\n}\r\n\r\n.chartjs-size-monitor-expand > div {\r\n	position: absolute;\r\n	width: 1000000px;\r\n	height: 1000000px;\r\n	left: 0;\r\n	top: 0;\r\n}\r\n\r\n.chartjs-size-monitor-shrink > div {\r\n	position: absolute;\r\n	width: 200%;\r\n	height: 200%;\r\n	left: 0;\r\n	top: 0;\r\n}\r\n";
      var platform_dom$1 = Object.freeze({
        __proto__: null,
        "default": platform_dom
      });
      var stylesheet = getCjsExportFromNamespace(platform_dom$1);
      var EXPANDO_KEY = "$chartjs";
      var CSS_PREFIX = "chartjs-";
      var CSS_SIZE_MONITOR = CSS_PREFIX + "size-monitor";
      var CSS_RENDER_MONITOR = CSS_PREFIX + "render-monitor";
      var CSS_RENDER_ANIMATION = CSS_PREFIX + "render-animation";
      var ANIMATION_START_EVENTS = ["animationstart", "webkitAnimationStart"];
      var EVENT_TYPES = {
        touchstart: "mousedown",
        touchmove: "mousemove",
        touchend: "mouseup",
        pointerenter: "mouseenter",
        pointerdown: "mousedown",
        pointermove: "mousemove",
        pointerup: "mouseup",
        pointerleave: "mouseout",
        pointerout: "mouseout"
      };
      function readUsedSize(element, property) {
        var value = helpers$1.getStyle(element, property);
        var matches = value && value.match(/^(\d+)(\.\d+)?px$/);
        return matches ? Number(matches[1]) : void 0;
      }
      function initCanvas(canvas2, config) {
        var style = canvas2.style;
        var renderHeight = canvas2.getAttribute("height");
        var renderWidth = canvas2.getAttribute("width");
        canvas2[EXPANDO_KEY] = {
          initial: {
            height: renderHeight,
            width: renderWidth,
            style: {
              display: style.display,
              height: style.height,
              width: style.width
            }
          }
        };
        style.display = style.display || "block";
        if (renderWidth === null || renderWidth === "") {
          var displayWidth = readUsedSize(canvas2, "width");
          if (displayWidth !== void 0) {
            canvas2.width = displayWidth;
          }
        }
        if (renderHeight === null || renderHeight === "") {
          if (canvas2.style.height === "") {
            canvas2.height = canvas2.width / (config.options.aspectRatio || 2);
          } else {
            var displayHeight = readUsedSize(canvas2, "height");
            if (displayWidth !== void 0) {
              canvas2.height = displayHeight;
            }
          }
        }
        return canvas2;
      }
      var supportsEventListenerOptions = function() {
        var supports = false;
        try {
          var options2 = Object.defineProperty({}, "passive", {
            // eslint-disable-next-line getter-return
            get: function() {
              supports = true;
            }
          });
          window.addEventListener("e", null, options2);
        } catch (e) {
        }
        return supports;
      }();
      var eventListenerOptions = supportsEventListenerOptions ? { passive: true } : false;
      function addListener(node, type, listener) {
        node.addEventListener(type, listener, eventListenerOptions);
      }
      function removeListener(node, type, listener) {
        node.removeEventListener(type, listener, eventListenerOptions);
      }
      function createEvent(type, chart, x, y, nativeEvent) {
        return {
          type,
          chart,
          native: nativeEvent || null,
          x: x !== void 0 ? x : null,
          y: y !== void 0 ? y : null
        };
      }
      function fromNativeEvent(event, chart) {
        var type = EVENT_TYPES[event.type] || event.type;
        var pos = helpers$1.getRelativePosition(event, chart);
        return createEvent(type, chart, pos.x, pos.y, event);
      }
      function throttled(fn, thisArg) {
        var ticking = false;
        var args = [];
        return function() {
          args = Array.prototype.slice.call(arguments);
          thisArg = thisArg || this;
          if (!ticking) {
            ticking = true;
            helpers$1.requestAnimFrame.call(window, function() {
              ticking = false;
              fn.apply(thisArg, args);
            });
          }
        };
      }
      function createDiv(cls) {
        var el = document.createElement("div");
        el.className = cls || "";
        return el;
      }
      function createResizer(handler) {
        var maxSize = 1e6;
        var resizer = createDiv(CSS_SIZE_MONITOR);
        var expand = createDiv(CSS_SIZE_MONITOR + "-expand");
        var shrink = createDiv(CSS_SIZE_MONITOR + "-shrink");
        expand.appendChild(createDiv());
        shrink.appendChild(createDiv());
        resizer.appendChild(expand);
        resizer.appendChild(shrink);
        resizer._reset = function() {
          expand.scrollLeft = maxSize;
          expand.scrollTop = maxSize;
          shrink.scrollLeft = maxSize;
          shrink.scrollTop = maxSize;
        };
        var onScroll = function() {
          resizer._reset();
          handler();
        };
        addListener(expand, "scroll", onScroll.bind(expand, "expand"));
        addListener(shrink, "scroll", onScroll.bind(shrink, "shrink"));
        return resizer;
      }
      function watchForRender(node, handler) {
        var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});
        var proxy = expando.renderProxy = function(e) {
          if (e.animationName === CSS_RENDER_ANIMATION) {
            handler();
          }
        };
        helpers$1.each(ANIMATION_START_EVENTS, function(type) {
          addListener(node, type, proxy);
        });
        expando.reflow = !!node.offsetParent;
        node.classList.add(CSS_RENDER_MONITOR);
      }
      function unwatchForRender(node) {
        var expando = node[EXPANDO_KEY] || {};
        var proxy = expando.renderProxy;
        if (proxy) {
          helpers$1.each(ANIMATION_START_EVENTS, function(type) {
            removeListener(node, type, proxy);
          });
          delete expando.renderProxy;
        }
        node.classList.remove(CSS_RENDER_MONITOR);
      }
      function addResizeListener(node, listener, chart) {
        var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});
        var resizer = expando.resizer = createResizer(throttled(function() {
          if (expando.resizer) {
            var container = chart.options.maintainAspectRatio && node.parentNode;
            var w = container ? container.clientWidth : 0;
            listener(createEvent("resize", chart));
            if (container && container.clientWidth < w && chart.canvas) {
              listener(createEvent("resize", chart));
            }
          }
        }));
        watchForRender(node, function() {
          if (expando.resizer) {
            var container = node.parentNode;
            if (container && container !== resizer.parentNode) {
              container.insertBefore(resizer, container.firstChild);
            }
            resizer._reset();
          }
        });
      }
      function removeResizeListener(node) {
        var expando = node[EXPANDO_KEY] || {};
        var resizer = expando.resizer;
        delete expando.resizer;
        unwatchForRender(node);
        if (resizer && resizer.parentNode) {
          resizer.parentNode.removeChild(resizer);
        }
      }
      function injectCSS(rootNode, css) {
        var expando = rootNode[EXPANDO_KEY] || (rootNode[EXPANDO_KEY] = {});
        if (!expando.containsStyles) {
          expando.containsStyles = true;
          css = "/* Chart.js */\n" + css;
          var style = document.createElement("style");
          style.setAttribute("type", "text/css");
          style.appendChild(document.createTextNode(css));
          rootNode.appendChild(style);
        }
      }
      var platform_dom$2 = {
        /**
         * When `true`, prevents the automatic injection of the stylesheet required to
         * correctly detect when the chart is added to the DOM and then resized. This
         * switch has been added to allow external stylesheet (`dist/Chart(.min)?.js`)
         * to be manually imported to make this library compatible with any CSP.
         * See https://github.com/chartjs/Chart.js/issues/5208
         */
        disableCSSInjection: false,
        /**
         * This property holds whether this platform is enabled for the current environment.
         * Currently used by platform.js to select the proper implementation.
         * @private
         */
        _enabled: typeof window !== "undefined" && typeof document !== "undefined",
        /**
         * Initializes resources that depend on platform options.
         * @param {HTMLCanvasElement} canvas - The Canvas element.
         * @private
         */
        _ensureLoaded: function(canvas2) {
          if (!this.disableCSSInjection) {
            var root = canvas2.getRootNode ? canvas2.getRootNode() : document;
            var targetNode = root.host ? root : document.head;
            injectCSS(targetNode, stylesheet);
          }
        },
        acquireContext: function(item, config) {
          if (typeof item === "string") {
            item = document.getElementById(item);
          } else if (item.length) {
            item = item[0];
          }
          if (item && item.canvas) {
            item = item.canvas;
          }
          var context = item && item.getContext && item.getContext("2d");
          if (context && context.canvas === item) {
            this._ensureLoaded(item);
            initCanvas(item, config);
            return context;
          }
          return null;
        },
        releaseContext: function(context) {
          var canvas2 = context.canvas;
          if (!canvas2[EXPANDO_KEY]) {
            return;
          }
          var initial = canvas2[EXPANDO_KEY].initial;
          ["height", "width"].forEach(function(prop) {
            var value = initial[prop];
            if (helpers$1.isNullOrUndef(value)) {
              canvas2.removeAttribute(prop);
            } else {
              canvas2.setAttribute(prop, value);
            }
          });
          helpers$1.each(initial.style || {}, function(value, key) {
            canvas2.style[key] = value;
          });
          canvas2.width = canvas2.width;
          delete canvas2[EXPANDO_KEY];
        },
        addEventListener: function(chart, type, listener) {
          var canvas2 = chart.canvas;
          if (type === "resize") {
            addResizeListener(canvas2, listener, chart);
            return;
          }
          var expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});
          var proxies = expando.proxies || (expando.proxies = {});
          var proxy = proxies[chart.id + "_" + type] = function(event) {
            listener(fromNativeEvent(event, chart));
          };
          addListener(canvas2, type, proxy);
        },
        removeEventListener: function(chart, type, listener) {
          var canvas2 = chart.canvas;
          if (type === "resize") {
            removeResizeListener(canvas2);
            return;
          }
          var expando = listener[EXPANDO_KEY] || {};
          var proxies = expando.proxies || {};
          var proxy = proxies[chart.id + "_" + type];
          if (!proxy) {
            return;
          }
          removeListener(canvas2, type, proxy);
        }
      };
      helpers$1.addEvent = addListener;
      helpers$1.removeEvent = removeListener;
      var implementation = platform_dom$2._enabled ? platform_dom$2 : platform_basic;
      var platform = helpers$1.extend({
        /**
         * @since 2.7.0
         */
        initialize: function() {
        },
        /**
         * Called at chart construction time, returns a context2d instance implementing
         * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.
         * @param {*} item - The native item from which to acquire context (platform specific)
         * @param {object} options - The chart options
         * @returns {CanvasRenderingContext2D} context2d instance
         */
        acquireContext: function() {
        },
        /**
         * Called at chart destruction time, releases any resources associated to the context
         * previously returned by the acquireContext() method.
         * @param {CanvasRenderingContext2D} context - The context2d instance
         * @returns {boolean} true if the method succeeded, else false
         */
        releaseContext: function() {
        },
        /**
         * Registers the specified listener on the given chart.
         * @param {Chart} chart - Chart from which to listen for event
         * @param {string} type - The ({@link IEvent}) type to listen for
         * @param {function} listener - Receives a notification (an object that implements
         * the {@link IEvent} interface) when an event of the specified type occurs.
         */
        addEventListener: function() {
        },
        /**
         * Removes the specified listener previously registered with addEventListener.
         * @param {Chart} chart - Chart from which to remove the listener
         * @param {string} type - The ({@link IEvent}) type to remove
         * @param {function} listener - The listener function to remove from the event target.
         */
        removeEventListener: function() {
        }
      }, implementation);
      core_defaults._set("global", {
        plugins: {}
      });
      var core_plugins = {
        /**
         * Globally registered plugins.
         * @private
         */
        _plugins: [],
        /**
         * This identifier is used to invalidate the descriptors cache attached to each chart
         * when a global plugin is registered or unregistered. In this case, the cache ID is
         * incremented and descriptors are regenerated during following API calls.
         * @private
         */
        _cacheId: 0,
        /**
         * Registers the given plugin(s) if not already registered.
         * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
         */
        register: function(plugins2) {
          var p = this._plugins;
          [].concat(plugins2).forEach(function(plugin) {
            if (p.indexOf(plugin) === -1) {
              p.push(plugin);
            }
          });
          this._cacheId++;
        },
        /**
         * Unregisters the given plugin(s) only if registered.
         * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
         */
        unregister: function(plugins2) {
          var p = this._plugins;
          [].concat(plugins2).forEach(function(plugin) {
            var idx = p.indexOf(plugin);
            if (idx !== -1) {
              p.splice(idx, 1);
            }
          });
          this._cacheId++;
        },
        /**
         * Remove all registered plugins.
         * @since 2.1.5
         */
        clear: function() {
          this._plugins = [];
          this._cacheId++;
        },
        /**
         * Returns the number of registered plugins?
         * @returns {number}
         * @since 2.1.5
         */
        count: function() {
          return this._plugins.length;
        },
        /**
         * Returns all registered plugin instances.
         * @returns {IPlugin[]} array of plugin objects.
         * @since 2.1.5
         */
        getAll: function() {
          return this._plugins;
        },
        /**
         * Calls enabled plugins for `chart` on the specified hook and with the given args.
         * This method immediately returns as soon as a plugin explicitly returns false. The
         * returned value can be used, for instance, to interrupt the current action.
         * @param {Chart} chart - The chart instance for which plugins should be called.
         * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').
         * @param {Array} [args] - Extra arguments to apply to the hook call.
         * @returns {boolean} false if any of the plugins return false, else returns true.
         */
        notify: function(chart, hook, args) {
          var descriptors = this.descriptors(chart);
          var ilen = descriptors.length;
          var i, descriptor, plugin, params, method;
          for (i = 0; i < ilen; ++i) {
            descriptor = descriptors[i];
            plugin = descriptor.plugin;
            method = plugin[hook];
            if (typeof method === "function") {
              params = [chart].concat(args || []);
              params.push(descriptor.options);
              if (method.apply(plugin, params) === false) {
                return false;
              }
            }
          }
          return true;
        },
        /**
         * Returns descriptors of enabled plugins for the given chart.
         * @returns {object[]} [{ plugin, options }]
         * @private
         */
        descriptors: function(chart) {
          var cache = chart.$plugins || (chart.$plugins = {});
          if (cache.id === this._cacheId) {
            return cache.descriptors;
          }
          var plugins2 = [];
          var descriptors = [];
          var config = chart && chart.config || {};
          var options2 = config.options && config.options.plugins || {};
          this._plugins.concat(config.plugins || []).forEach(function(plugin) {
            var idx = plugins2.indexOf(plugin);
            if (idx !== -1) {
              return;
            }
            var id = plugin.id;
            var opts = options2[id];
            if (opts === false) {
              return;
            }
            if (opts === true) {
              opts = helpers$1.clone(core_defaults.global.plugins[id]);
            }
            plugins2.push(plugin);
            descriptors.push({
              plugin,
              options: opts || {}
            });
          });
          cache.descriptors = descriptors;
          cache.id = this._cacheId;
          return descriptors;
        },
        /**
         * Invalidates cache for the given chart: descriptors hold a reference on plugin option,
         * but in some cases, this reference can be changed by the user when updating options.
         * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
         * @private
         */
        _invalidate: function(chart) {
          delete chart.$plugins;
        }
      };
      var core_scaleService = {
        // Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
        // use the new chart options to grab the correct scale
        constructors: {},
        // Use a registration function so that we can move to an ES6 map when we no longer need to support
        // old browsers
        // Scale config defaults
        defaults: {},
        registerScaleType: function(type, scaleConstructor, scaleDefaults) {
          this.constructors[type] = scaleConstructor;
          this.defaults[type] = helpers$1.clone(scaleDefaults);
        },
        getScaleConstructor: function(type) {
          return this.constructors.hasOwnProperty(type) ? this.constructors[type] : void 0;
        },
        getScaleDefaults: function(type) {
          return this.defaults.hasOwnProperty(type) ? helpers$1.merge(/* @__PURE__ */ Object.create(null), [core_defaults.scale, this.defaults[type]]) : {};
        },
        updateScaleDefaults: function(type, additions) {
          var me = this;
          if (me.defaults.hasOwnProperty(type)) {
            me.defaults[type] = helpers$1.extend(me.defaults[type], additions);
          }
        },
        addScalesToLayout: function(chart) {
          helpers$1.each(chart.scales, function(scale2) {
            scale2.fullWidth = scale2.options.fullWidth;
            scale2.position = scale2.options.position;
            scale2.weight = scale2.options.weight;
            core_layouts.addBox(chart, scale2);
          });
        }
      };
      var valueOrDefault$8 = helpers$1.valueOrDefault;
      var getRtlHelper = helpers$1.rtl.getRtlAdapter;
      core_defaults._set("global", {
        tooltips: {
          enabled: true,
          custom: null,
          mode: "nearest",
          position: "average",
          intersect: true,
          backgroundColor: "rgba(0,0,0,0.8)",
          titleFontStyle: "bold",
          titleSpacing: 2,
          titleMarginBottom: 6,
          titleFontColor: "#fff",
          titleAlign: "left",
          bodySpacing: 2,
          bodyFontColor: "#fff",
          bodyAlign: "left",
          footerFontStyle: "bold",
          footerSpacing: 2,
          footerMarginTop: 6,
          footerFontColor: "#fff",
          footerAlign: "left",
          yPadding: 6,
          xPadding: 6,
          caretPadding: 2,
          caretSize: 5,
          cornerRadius: 6,
          multiKeyBackground: "#fff",
          displayColors: true,
          borderColor: "rgba(0,0,0,0)",
          borderWidth: 0,
          callbacks: {
            // Args are: (tooltipItems, data)
            beforeTitle: helpers$1.noop,
            title: function(tooltipItems, data) {
              var title2 = "";
              var labels = data.labels;
              var labelCount = labels ? labels.length : 0;
              if (tooltipItems.length > 0) {
                var item = tooltipItems[0];
                if (item.label) {
                  title2 = item.label;
                } else if (item.xLabel) {
                  title2 = item.xLabel;
                } else if (labelCount > 0 && item.index < labelCount) {
                  title2 = labels[item.index];
                }
              }
              return title2;
            },
            afterTitle: helpers$1.noop,
            // Args are: (tooltipItems, data)
            beforeBody: helpers$1.noop,
            // Args are: (tooltipItem, data)
            beforeLabel: helpers$1.noop,
            label: function(tooltipItem, data) {
              var label = data.datasets[tooltipItem.datasetIndex].label || "";
              if (label) {
                label += ": ";
              }
              if (!helpers$1.isNullOrUndef(tooltipItem.value)) {
                label += tooltipItem.value;
              } else {
                label += tooltipItem.yLabel;
              }
              return label;
            },
            labelColor: function(tooltipItem, chart) {
              var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);
              var activeElement = meta.data[tooltipItem.index];
              var view = activeElement._view;
              return {
                borderColor: view.borderColor,
                backgroundColor: view.backgroundColor
              };
            },
            labelTextColor: function() {
              return this._options.bodyFontColor;
            },
            afterLabel: helpers$1.noop,
            // Args are: (tooltipItems, data)
            afterBody: helpers$1.noop,
            // Args are: (tooltipItems, data)
            beforeFooter: helpers$1.noop,
            footer: helpers$1.noop,
            afterFooter: helpers$1.noop
          }
        }
      });
      var positioners = {
        /**
         * Average mode places the tooltip at the average position of the elements shown
         * @function Chart.Tooltip.positioners.average
         * @param elements {ChartElement[]} the elements being displayed in the tooltip
         * @returns {object} tooltip position
         */
        average: function(elements2) {
          if (!elements2.length) {
            return false;
          }
          var i, len;
          var x = 0;
          var y = 0;
          var count = 0;
          for (i = 0, len = elements2.length; i < len; ++i) {
            var el = elements2[i];
            if (el && el.hasValue()) {
              var pos = el.tooltipPosition();
              x += pos.x;
              y += pos.y;
              ++count;
            }
          }
          return {
            x: x / count,
            y: y / count
          };
        },
        /**
         * Gets the tooltip position nearest of the item nearest to the event position
         * @function Chart.Tooltip.positioners.nearest
         * @param elements {Chart.Element[]} the tooltip elements
         * @param eventPosition {object} the position of the event in canvas coordinates
         * @returns {object} the tooltip position
         */
        nearest: function(elements2, eventPosition) {
          var x = eventPosition.x;
          var y = eventPosition.y;
          var minDistance = Number.POSITIVE_INFINITY;
          var i, len, nearestElement;
          for (i = 0, len = elements2.length; i < len; ++i) {
            var el = elements2[i];
            if (el && el.hasValue()) {
              var center = el.getCenterPoint();
              var d = helpers$1.distanceBetweenPoints(eventPosition, center);
              if (d < minDistance) {
                minDistance = d;
                nearestElement = el;
              }
            }
          }
          if (nearestElement) {
            var tp = nearestElement.tooltipPosition();
            x = tp.x;
            y = tp.y;
          }
          return {
            x,
            y
          };
        }
      };
      function pushOrConcat(base, toPush) {
        if (toPush) {
          if (helpers$1.isArray(toPush)) {
            Array.prototype.push.apply(base, toPush);
          } else {
            base.push(toPush);
          }
        }
        return base;
      }
      function splitNewlines(str) {
        if ((typeof str === "string" || str instanceof String) && str.indexOf("\n") > -1) {
          return str.split("\n");
        }
        return str;
      }
      function createTooltipItem(element) {
        var xScale = element._xScale;
        var yScale = element._yScale || element._scale;
        var index = element._index;
        var datasetIndex = element._datasetIndex;
        var controller = element._chart.getDatasetMeta(datasetIndex).controller;
        var indexScale = controller._getIndexScale();
        var valueScale = controller._getValueScale();
        return {
          xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : "",
          yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : "",
          label: indexScale ? "" + indexScale.getLabelForIndex(index, datasetIndex) : "",
          value: valueScale ? "" + valueScale.getLabelForIndex(index, datasetIndex) : "",
          index,
          datasetIndex,
          x: element._model.x,
          y: element._model.y
        };
      }
      function getBaseModel(tooltipOpts) {
        var globalDefaults = core_defaults.global;
        return {
          // Positioning
          xPadding: tooltipOpts.xPadding,
          yPadding: tooltipOpts.yPadding,
          xAlign: tooltipOpts.xAlign,
          yAlign: tooltipOpts.yAlign,
          // Drawing direction and text direction
          rtl: tooltipOpts.rtl,
          textDirection: tooltipOpts.textDirection,
          // Body
          bodyFontColor: tooltipOpts.bodyFontColor,
          _bodyFontFamily: valueOrDefault$8(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
          _bodyFontStyle: valueOrDefault$8(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
          _bodyAlign: tooltipOpts.bodyAlign,
          bodyFontSize: valueOrDefault$8(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
          bodySpacing: tooltipOpts.bodySpacing,
          // Title
          titleFontColor: tooltipOpts.titleFontColor,
          _titleFontFamily: valueOrDefault$8(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
          _titleFontStyle: valueOrDefault$8(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
          titleFontSize: valueOrDefault$8(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
          _titleAlign: tooltipOpts.titleAlign,
          titleSpacing: tooltipOpts.titleSpacing,
          titleMarginBottom: tooltipOpts.titleMarginBottom,
          // Footer
          footerFontColor: tooltipOpts.footerFontColor,
          _footerFontFamily: valueOrDefault$8(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
          _footerFontStyle: valueOrDefault$8(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
          footerFontSize: valueOrDefault$8(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
          _footerAlign: tooltipOpts.footerAlign,
          footerSpacing: tooltipOpts.footerSpacing,
          footerMarginTop: tooltipOpts.footerMarginTop,
          // Appearance
          caretSize: tooltipOpts.caretSize,
          cornerRadius: tooltipOpts.cornerRadius,
          backgroundColor: tooltipOpts.backgroundColor,
          opacity: 0,
          legendColorBackground: tooltipOpts.multiKeyBackground,
          displayColors: tooltipOpts.displayColors,
          borderColor: tooltipOpts.borderColor,
          borderWidth: tooltipOpts.borderWidth
        };
      }
      function getTooltipSize(tooltip, model) {
        var ctx = tooltip._chart.ctx;
        var height = model.yPadding * 2;
        var width = 0;
        var body = model.body;
        var combinedBodyLength = body.reduce(function(count, bodyItem) {
          return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
        }, 0);
        combinedBodyLength += model.beforeBody.length + model.afterBody.length;
        var titleLineCount = model.title.length;
        var footerLineCount = model.footer.length;
        var titleFontSize = model.titleFontSize;
        var bodyFontSize = model.bodyFontSize;
        var footerFontSize = model.footerFontSize;
        height += titleLineCount * titleFontSize;
        height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0;
        height += titleLineCount ? model.titleMarginBottom : 0;
        height += combinedBodyLength * bodyFontSize;
        height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0;
        height += footerLineCount ? model.footerMarginTop : 0;
        height += footerLineCount * footerFontSize;
        height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0;
        var widthPadding = 0;
        var maxLineWidth = function(line) {
          width = Math.max(width, ctx.measureText(line).width + widthPadding);
        };
        ctx.font = helpers$1.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
        helpers$1.each(model.title, maxLineWidth);
        ctx.font = helpers$1.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
        helpers$1.each(model.beforeBody.concat(model.afterBody), maxLineWidth);
        widthPadding = model.displayColors ? bodyFontSize + 2 : 0;
        helpers$1.each(body, function(bodyItem) {
          helpers$1.each(bodyItem.before, maxLineWidth);
          helpers$1.each(bodyItem.lines, maxLineWidth);
          helpers$1.each(bodyItem.after, maxLineWidth);
        });
        widthPadding = 0;
        ctx.font = helpers$1.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
        helpers$1.each(model.footer, maxLineWidth);
        width += 2 * model.xPadding;
        return {
          width,
          height
        };
      }
      function determineAlignment(tooltip, size) {
        var model = tooltip._model;
        var chart = tooltip._chart;
        var chartArea = tooltip._chart.chartArea;
        var xAlign = "center";
        var yAlign = "center";
        if (model.y < size.height) {
          yAlign = "top";
        } else if (model.y > chart.height - size.height) {
          yAlign = "bottom";
        }
        var lf, rf;
        var olf, orf;
        var yf;
        var midX = (chartArea.left + chartArea.right) / 2;
        var midY = (chartArea.top + chartArea.bottom) / 2;
        if (yAlign === "center") {
          lf = function(x) {
            return x <= midX;
          };
          rf = function(x) {
            return x > midX;
          };
        } else {
          lf = function(x) {
            return x <= size.width / 2;
          };
          rf = function(x) {
            return x >= chart.width - size.width / 2;
          };
        }
        olf = function(x) {
          return x + size.width + model.caretSize + model.caretPadding > chart.width;
        };
        orf = function(x) {
          return x - size.width - model.caretSize - model.caretPadding < 0;
        };
        yf = function(y) {
          return y <= midY ? "top" : "bottom";
        };
        if (lf(model.x)) {
          xAlign = "left";
          if (olf(model.x)) {
            xAlign = "center";
            yAlign = yf(model.y);
          }
        } else if (rf(model.x)) {
          xAlign = "right";
          if (orf(model.x)) {
            xAlign = "center";
            yAlign = yf(model.y);
          }
        }
        var opts = tooltip._options;
        return {
          xAlign: opts.xAlign ? opts.xAlign : xAlign,
          yAlign: opts.yAlign ? opts.yAlign : yAlign
        };
      }
      function getBackgroundPoint(vm, size, alignment, chart) {
        var x = vm.x;
        var y = vm.y;
        var caretSize = vm.caretSize;
        var caretPadding = vm.caretPadding;
        var cornerRadius = vm.cornerRadius;
        var xAlign = alignment.xAlign;
        var yAlign = alignment.yAlign;
        var paddingAndSize = caretSize + caretPadding;
        var radiusAndPadding = cornerRadius + caretPadding;
        if (xAlign === "right") {
          x -= size.width;
        } else if (xAlign === "center") {
          x -= size.width / 2;
          if (x + size.width > chart.width) {
            x = chart.width - size.width;
          }
          if (x < 0) {
            x = 0;
          }
        }
        if (yAlign === "top") {
          y += paddingAndSize;
        } else if (yAlign === "bottom") {
          y -= size.height + paddingAndSize;
        } else {
          y -= size.height / 2;
        }
        if (yAlign === "center") {
          if (xAlign === "left") {
            x += paddingAndSize;
          } else if (xAlign === "right") {
            x -= paddingAndSize;
          }
        } else if (xAlign === "left") {
          x -= radiusAndPadding;
        } else if (xAlign === "right") {
          x += radiusAndPadding;
        }
        return {
          x,
          y
        };
      }
      function getAlignedX(vm, align) {
        return align === "center" ? vm.x + vm.width / 2 : align === "right" ? vm.x + vm.width - vm.xPadding : vm.x + vm.xPadding;
      }
      function getBeforeAfterBodyLines(callback) {
        return pushOrConcat([], splitNewlines(callback));
      }
      var exports$4 = core_element.extend({
        initialize: function() {
          this._model = getBaseModel(this._options);
          this._lastActive = [];
        },
        // Get the title
        // Args are: (tooltipItem, data)
        getTitle: function() {
          var me = this;
          var opts = me._options;
          var callbacks = opts.callbacks;
          var beforeTitle = callbacks.beforeTitle.apply(me, arguments);
          var title2 = callbacks.title.apply(me, arguments);
          var afterTitle = callbacks.afterTitle.apply(me, arguments);
          var lines = [];
          lines = pushOrConcat(lines, splitNewlines(beforeTitle));
          lines = pushOrConcat(lines, splitNewlines(title2));
          lines = pushOrConcat(lines, splitNewlines(afterTitle));
          return lines;
        },
        // Args are: (tooltipItem, data)
        getBeforeBody: function() {
          return getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));
        },
        // Args are: (tooltipItem, data)
        getBody: function(tooltipItems, data) {
          var me = this;
          var callbacks = me._options.callbacks;
          var bodyItems = [];
          helpers$1.each(tooltipItems, function(tooltipItem) {
            var bodyItem = {
              before: [],
              lines: [],
              after: []
            };
            pushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));
            pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
            pushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));
            bodyItems.push(bodyItem);
          });
          return bodyItems;
        },
        // Args are: (tooltipItem, data)
        getAfterBody: function() {
          return getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));
        },
        // Get the footer and beforeFooter and afterFooter lines
        // Args are: (tooltipItem, data)
        getFooter: function() {
          var me = this;
          var callbacks = me._options.callbacks;
          var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
          var footer = callbacks.footer.apply(me, arguments);
          var afterFooter = callbacks.afterFooter.apply(me, arguments);
          var lines = [];
          lines = pushOrConcat(lines, splitNewlines(beforeFooter));
          lines = pushOrConcat(lines, splitNewlines(footer));
          lines = pushOrConcat(lines, splitNewlines(afterFooter));
          return lines;
        },
        update: function(changed) {
          var me = this;
          var opts = me._options;
          var existingModel = me._model;
          var model = me._model = getBaseModel(opts);
          var active = me._active;
          var data = me._data;
          var alignment = {
            xAlign: existingModel.xAlign,
            yAlign: existingModel.yAlign
          };
          var backgroundPoint = {
            x: existingModel.x,
            y: existingModel.y
          };
          var tooltipSize = {
            width: existingModel.width,
            height: existingModel.height
          };
          var tooltipPosition = {
            x: existingModel.caretX,
            y: existingModel.caretY
          };
          var i, len;
          if (active.length) {
            model.opacity = 1;
            var labelColors = [];
            var labelTextColors = [];
            tooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);
            var tooltipItems = [];
            for (i = 0, len = active.length; i < len; ++i) {
              tooltipItems.push(createTooltipItem(active[i]));
            }
            if (opts.filter) {
              tooltipItems = tooltipItems.filter(function(a) {
                return opts.filter(a, data);
              });
            }
            if (opts.itemSort) {
              tooltipItems = tooltipItems.sort(function(a, b) {
                return opts.itemSort(a, b, data);
              });
            }
            helpers$1.each(tooltipItems, function(tooltipItem) {
              labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));
              labelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));
            });
            model.title = me.getTitle(tooltipItems, data);
            model.beforeBody = me.getBeforeBody(tooltipItems, data);
            model.body = me.getBody(tooltipItems, data);
            model.afterBody = me.getAfterBody(tooltipItems, data);
            model.footer = me.getFooter(tooltipItems, data);
            model.x = tooltipPosition.x;
            model.y = tooltipPosition.y;
            model.caretPadding = opts.caretPadding;
            model.labelColors = labelColors;
            model.labelTextColors = labelTextColors;
            model.dataPoints = tooltipItems;
            tooltipSize = getTooltipSize(this, model);
            alignment = determineAlignment(this, tooltipSize);
            backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);
          } else {
            model.opacity = 0;
          }
          model.xAlign = alignment.xAlign;
          model.yAlign = alignment.yAlign;
          model.x = backgroundPoint.x;
          model.y = backgroundPoint.y;
          model.width = tooltipSize.width;
          model.height = tooltipSize.height;
          model.caretX = tooltipPosition.x;
          model.caretY = tooltipPosition.y;
          me._model = model;
          if (changed && opts.custom) {
            opts.custom.call(me, model);
          }
          return me;
        },
        drawCaret: function(tooltipPoint, size) {
          var ctx = this._chart.ctx;
          var vm = this._view;
          var caretPosition = this.getCaretPosition(tooltipPoint, size, vm);
          ctx.lineTo(caretPosition.x1, caretPosition.y1);
          ctx.lineTo(caretPosition.x2, caretPosition.y2);
          ctx.lineTo(caretPosition.x3, caretPosition.y3);
        },
        getCaretPosition: function(tooltipPoint, size, vm) {
          var x1, x2, x3, y1, y2, y3;
          var caretSize = vm.caretSize;
          var cornerRadius = vm.cornerRadius;
          var xAlign = vm.xAlign;
          var yAlign = vm.yAlign;
          var ptX = tooltipPoint.x;
          var ptY = tooltipPoint.y;
          var width = size.width;
          var height = size.height;
          if (yAlign === "center") {
            y2 = ptY + height / 2;
            if (xAlign === "left") {
              x1 = ptX;
              x2 = x1 - caretSize;
              x3 = x1;
              y1 = y2 + caretSize;
              y3 = y2 - caretSize;
            } else {
              x1 = ptX + width;
              x2 = x1 + caretSize;
              x3 = x1;
              y1 = y2 - caretSize;
              y3 = y2 + caretSize;
            }
          } else {
            if (xAlign === "left") {
              x2 = ptX + cornerRadius + caretSize;
              x1 = x2 - caretSize;
              x3 = x2 + caretSize;
            } else if (xAlign === "right") {
              x2 = ptX + width - cornerRadius - caretSize;
              x1 = x2 - caretSize;
              x3 = x2 + caretSize;
            } else {
              x2 = vm.caretX;
              x1 = x2 - caretSize;
              x3 = x2 + caretSize;
            }
            if (yAlign === "top") {
              y1 = ptY;
              y2 = y1 - caretSize;
              y3 = y1;
            } else {
              y1 = ptY + height;
              y2 = y1 + caretSize;
              y3 = y1;
              var tmp = x3;
              x3 = x1;
              x1 = tmp;
            }
          }
          return { x1, x2, x3, y1, y2, y3 };
        },
        drawTitle: function(pt, vm, ctx) {
          var title2 = vm.title;
          var length = title2.length;
          var titleFontSize, titleSpacing, i;
          if (length) {
            var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);
            pt.x = getAlignedX(vm, vm._titleAlign);
            ctx.textAlign = rtlHelper.textAlign(vm._titleAlign);
            ctx.textBaseline = "middle";
            titleFontSize = vm.titleFontSize;
            titleSpacing = vm.titleSpacing;
            ctx.fillStyle = vm.titleFontColor;
            ctx.font = helpers$1.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);
            for (i = 0; i < length; ++i) {
              ctx.fillText(title2[i], rtlHelper.x(pt.x), pt.y + titleFontSize / 2);
              pt.y += titleFontSize + titleSpacing;
              if (i + 1 === length) {
                pt.y += vm.titleMarginBottom - titleSpacing;
              }
            }
          }
        },
        drawBody: function(pt, vm, ctx) {
          var bodyFontSize = vm.bodyFontSize;
          var bodySpacing = vm.bodySpacing;
          var bodyAlign = vm._bodyAlign;
          var body = vm.body;
          var drawColorBoxes = vm.displayColors;
          var xLinePadding = 0;
          var colorX = drawColorBoxes ? getAlignedX(vm, "left") : 0;
          var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);
          var fillLineOfText = function(line) {
            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyFontSize / 2);
            pt.y += bodyFontSize + bodySpacing;
          };
          var bodyItem, textColor, labelColors, lines, i, j, ilen, jlen;
          var bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
          ctx.textAlign = bodyAlign;
          ctx.textBaseline = "middle";
          ctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);
          pt.x = getAlignedX(vm, bodyAlignForCalculation);
          ctx.fillStyle = vm.bodyFontColor;
          helpers$1.each(vm.beforeBody, fillLineOfText);
          xLinePadding = drawColorBoxes && bodyAlignForCalculation !== "right" ? bodyAlign === "center" ? bodyFontSize / 2 + 1 : bodyFontSize + 2 : 0;
          for (i = 0, ilen = body.length; i < ilen; ++i) {
            bodyItem = body[i];
            textColor = vm.labelTextColors[i];
            labelColors = vm.labelColors[i];
            ctx.fillStyle = textColor;
            helpers$1.each(bodyItem.before, fillLineOfText);
            lines = bodyItem.lines;
            for (j = 0, jlen = lines.length; j < jlen; ++j) {
              if (drawColorBoxes) {
                var rtlColorX = rtlHelper.x(colorX);
                ctx.fillStyle = vm.legendColorBackground;
                ctx.fillRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);
                ctx.lineWidth = 1;
                ctx.strokeStyle = labelColors.borderColor;
                ctx.strokeRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);
                ctx.fillStyle = labelColors.backgroundColor;
                ctx.fillRect(rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), bodyFontSize - 2), pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
                ctx.fillStyle = textColor;
              }
              fillLineOfText(lines[j]);
            }
            helpers$1.each(bodyItem.after, fillLineOfText);
          }
          xLinePadding = 0;
          helpers$1.each(vm.afterBody, fillLineOfText);
          pt.y -= bodySpacing;
        },
        drawFooter: function(pt, vm, ctx) {
          var footer = vm.footer;
          var length = footer.length;
          var footerFontSize, i;
          if (length) {
            var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);
            pt.x = getAlignedX(vm, vm._footerAlign);
            pt.y += vm.footerMarginTop;
            ctx.textAlign = rtlHelper.textAlign(vm._footerAlign);
            ctx.textBaseline = "middle";
            footerFontSize = vm.footerFontSize;
            ctx.fillStyle = vm.footerFontColor;
            ctx.font = helpers$1.fontString(footerFontSize, vm._footerFontStyle, vm._footerFontFamily);
            for (i = 0; i < length; ++i) {
              ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFontSize / 2);
              pt.y += footerFontSize + vm.footerSpacing;
            }
          }
        },
        drawBackground: function(pt, vm, ctx, tooltipSize) {
          ctx.fillStyle = vm.backgroundColor;
          ctx.strokeStyle = vm.borderColor;
          ctx.lineWidth = vm.borderWidth;
          var xAlign = vm.xAlign;
          var yAlign = vm.yAlign;
          var x = pt.x;
          var y = pt.y;
          var width = tooltipSize.width;
          var height = tooltipSize.height;
          var radius = vm.cornerRadius;
          ctx.beginPath();
          ctx.moveTo(x + radius, y);
          if (yAlign === "top") {
            this.drawCaret(pt, tooltipSize);
          }
          ctx.lineTo(x + width - radius, y);
          ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
          if (yAlign === "center" && xAlign === "right") {
            this.drawCaret(pt, tooltipSize);
          }
          ctx.lineTo(x + width, y + height - radius);
          ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
          if (yAlign === "bottom") {
            this.drawCaret(pt, tooltipSize);
          }
          ctx.lineTo(x + radius, y + height);
          ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
          if (yAlign === "center" && xAlign === "left") {
            this.drawCaret(pt, tooltipSize);
          }
          ctx.lineTo(x, y + radius);
          ctx.quadraticCurveTo(x, y, x + radius, y);
          ctx.closePath();
          ctx.fill();
          if (vm.borderWidth > 0) {
            ctx.stroke();
          }
        },
        draw: function() {
          var ctx = this._chart.ctx;
          var vm = this._view;
          if (vm.opacity === 0) {
            return;
          }
          var tooltipSize = {
            width: vm.width,
            height: vm.height
          };
          var pt = {
            x: vm.x,
            y: vm.y
          };
          var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;
          var hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;
          if (this._options.enabled && hasTooltipContent) {
            ctx.save();
            ctx.globalAlpha = opacity;
            this.drawBackground(pt, vm, ctx, tooltipSize);
            pt.y += vm.yPadding;
            helpers$1.rtl.overrideTextDirection(ctx, vm.textDirection);
            this.drawTitle(pt, vm, ctx);
            this.drawBody(pt, vm, ctx);
            this.drawFooter(pt, vm, ctx);
            helpers$1.rtl.restoreTextDirection(ctx, vm.textDirection);
            ctx.restore();
          }
        },
        /**
         * Handle an event
         * @private
         * @param {IEvent} event - The event to handle
         * @returns {boolean} true if the tooltip changed
         */
        handleEvent: function(e) {
          var me = this;
          var options2 = me._options;
          var changed = false;
          me._lastActive = me._lastActive || [];
          if (e.type === "mouseout") {
            me._active = [];
          } else {
            me._active = me._chart.getElementsAtEventForMode(e, options2.mode, options2);
            if (options2.reverse) {
              me._active.reverse();
            }
          }
          changed = !helpers$1.arrayEquals(me._active, me._lastActive);
          if (changed) {
            me._lastActive = me._active;
            if (options2.enabled || options2.custom) {
              me._eventPosition = {
                x: e.x,
                y: e.y
              };
              me.update(true);
              me.pivot();
            }
          }
          return changed;
        }
      });
      var positioners_1 = positioners;
      var core_tooltip = exports$4;
      core_tooltip.positioners = positioners_1;
      var valueOrDefault$9 = helpers$1.valueOrDefault;
      core_defaults._set("global", {
        elements: {},
        events: [
          "mousemove",
          "mouseout",
          "click",
          "touchstart",
          "touchmove"
        ],
        hover: {
          onHover: null,
          mode: "nearest",
          intersect: true,
          animationDuration: 400
        },
        onClick: null,
        maintainAspectRatio: true,
        responsive: true,
        responsiveAnimationDuration: 0
      });
      function mergeScaleConfig() {
        return helpers$1.merge(/* @__PURE__ */ Object.create(null), [].slice.call(arguments), {
          merger: function(key, target, source, options2) {
            if (key === "xAxes" || key === "yAxes") {
              var slen = source[key].length;
              var i, type, scale2;
              if (!target[key]) {
                target[key] = [];
              }
              for (i = 0; i < slen; ++i) {
                scale2 = source[key][i];
                type = valueOrDefault$9(scale2.type, key === "xAxes" ? "category" : "linear");
                if (i >= target[key].length) {
                  target[key].push({});
                }
                if (!target[key][i].type || scale2.type && scale2.type !== target[key][i].type) {
                  helpers$1.merge(target[key][i], [core_scaleService.getScaleDefaults(type), scale2]);
                } else {
                  helpers$1.merge(target[key][i], scale2);
                }
              }
            } else {
              helpers$1._merger(key, target, source, options2);
            }
          }
        });
      }
      function mergeConfig() {
        return helpers$1.merge(/* @__PURE__ */ Object.create(null), [].slice.call(arguments), {
          merger: function(key, target, source, options2) {
            var tval = target[key] || /* @__PURE__ */ Object.create(null);
            var sval = source[key];
            if (key === "scales") {
              target[key] = mergeScaleConfig(tval, sval);
            } else if (key === "scale") {
              target[key] = helpers$1.merge(tval, [core_scaleService.getScaleDefaults(sval.type), sval]);
            } else {
              helpers$1._merger(key, target, source, options2);
            }
          }
        });
      }
      function initConfig(config) {
        config = config || /* @__PURE__ */ Object.create(null);
        var data = config.data = config.data || {};
        data.datasets = data.datasets || [];
        data.labels = data.labels || [];
        config.options = mergeConfig(
          core_defaults.global,
          core_defaults[config.type],
          config.options || {}
        );
        return config;
      }
      function updateConfig(chart) {
        var newOptions = chart.options;
        helpers$1.each(chart.scales, function(scale2) {
          core_layouts.removeBox(chart, scale2);
        });
        newOptions = mergeConfig(
          core_defaults.global,
          core_defaults[chart.config.type],
          newOptions
        );
        chart.options = chart.config.options = newOptions;
        chart.ensureScalesHaveIDs();
        chart.buildOrUpdateScales();
        chart.tooltip._options = newOptions.tooltips;
        chart.tooltip.initialize();
      }
      function nextAvailableScaleId(axesOpts, prefix, index) {
        var id;
        var hasId = function(obj) {
          return obj.id === id;
        };
        do {
          id = prefix + index++;
        } while (helpers$1.findIndex(axesOpts, hasId) >= 0);
        return id;
      }
      function positionIsHorizontal(position) {
        return position === "top" || position === "bottom";
      }
      function compare2Level(l1, l2) {
        return function(a, b) {
          return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];
        };
      }
      var Chart = function(item, config) {
        this.construct(item, config);
        return this;
      };
      helpers$1.extend(
        Chart.prototype,
        /** @lends Chart */
        {
          /**
           * @private
           */
          construct: function(item, config) {
            var me = this;
            config = initConfig(config);
            var context = platform.acquireContext(item, config);
            var canvas2 = context && context.canvas;
            var height = canvas2 && canvas2.height;
            var width = canvas2 && canvas2.width;
            me.id = helpers$1.uid();
            me.ctx = context;
            me.canvas = canvas2;
            me.config = config;
            me.width = width;
            me.height = height;
            me.aspectRatio = height ? width / height : null;
            me.options = config.options;
            me._bufferedRender = false;
            me._layers = [];
            me.chart = me;
            me.controller = me;
            Chart.instances[me.id] = me;
            Object.defineProperty(me, "data", {
              get: function() {
                return me.config.data;
              },
              set: function(value) {
                me.config.data = value;
              }
            });
            if (!context || !canvas2) {
              console.error("Failed to create chart: can't acquire context from the given item");
              return;
            }
            me.initialize();
            me.update();
          },
          /**
           * @private
           */
          initialize: function() {
            var me = this;
            core_plugins.notify(me, "beforeInit");
            helpers$1.retinaScale(me, me.options.devicePixelRatio);
            me.bindEvents();
            if (me.options.responsive) {
              me.resize(true);
            }
            me.initToolTip();
            core_plugins.notify(me, "afterInit");
            return me;
          },
          clear: function() {
            helpers$1.canvas.clear(this);
            return this;
          },
          stop: function() {
            core_animations.cancelAnimation(this);
            return this;
          },
          resize: function(silent) {
            var me = this;
            var options2 = me.options;
            var canvas2 = me.canvas;
            var aspectRatio = options2.maintainAspectRatio && me.aspectRatio || null;
            var newWidth = Math.max(0, Math.floor(helpers$1.getMaximumWidth(canvas2)));
            var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers$1.getMaximumHeight(canvas2)));
            if (me.width === newWidth && me.height === newHeight) {
              return;
            }
            canvas2.width = me.width = newWidth;
            canvas2.height = me.height = newHeight;
            canvas2.style.width = newWidth + "px";
            canvas2.style.height = newHeight + "px";
            helpers$1.retinaScale(me, options2.devicePixelRatio);
            if (!silent) {
              var newSize = { width: newWidth, height: newHeight };
              core_plugins.notify(me, "resize", [newSize]);
              if (options2.onResize) {
                options2.onResize(me, newSize);
              }
              me.stop();
              me.update({
                duration: options2.responsiveAnimationDuration
              });
            }
          },
          ensureScalesHaveIDs: function() {
            var options2 = this.options;
            var scalesOptions = options2.scales || {};
            var scaleOptions = options2.scale;
            helpers$1.each(scalesOptions.xAxes, function(xAxisOptions, index) {
              if (!xAxisOptions.id) {
                xAxisOptions.id = nextAvailableScaleId(scalesOptions.xAxes, "x-axis-", index);
              }
            });
            helpers$1.each(scalesOptions.yAxes, function(yAxisOptions, index) {
              if (!yAxisOptions.id) {
                yAxisOptions.id = nextAvailableScaleId(scalesOptions.yAxes, "y-axis-", index);
              }
            });
            if (scaleOptions) {
              scaleOptions.id = scaleOptions.id || "scale";
            }
          },
          /**
           * Builds a map of scale ID to scale object for future lookup.
           */
          buildOrUpdateScales: function() {
            var me = this;
            var options2 = me.options;
            var scales2 = me.scales || {};
            var items = [];
            var updated = Object.keys(scales2).reduce(function(obj, id) {
              obj[id] = false;
              return obj;
            }, {});
            if (options2.scales) {
              items = items.concat(
                (options2.scales.xAxes || []).map(function(xAxisOptions) {
                  return { options: xAxisOptions, dtype: "category", dposition: "bottom" };
                }),
                (options2.scales.yAxes || []).map(function(yAxisOptions) {
                  return { options: yAxisOptions, dtype: "linear", dposition: "left" };
                })
              );
            }
            if (options2.scale) {
              items.push({
                options: options2.scale,
                dtype: "radialLinear",
                isDefault: true,
                dposition: "chartArea"
              });
            }
            helpers$1.each(items, function(item) {
              var scaleOptions = item.options;
              var id = scaleOptions.id;
              var scaleType = valueOrDefault$9(scaleOptions.type, item.dtype);
              if (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {
                scaleOptions.position = item.dposition;
              }
              updated[id] = true;
              var scale2 = null;
              if (id in scales2 && scales2[id].type === scaleType) {
                scale2 = scales2[id];
                scale2.options = scaleOptions;
                scale2.ctx = me.ctx;
                scale2.chart = me;
              } else {
                var scaleClass = core_scaleService.getScaleConstructor(scaleType);
                if (!scaleClass) {
                  return;
                }
                scale2 = new scaleClass({
                  id,
                  type: scaleType,
                  options: scaleOptions,
                  ctx: me.ctx,
                  chart: me
                });
                scales2[scale2.id] = scale2;
              }
              scale2.mergeTicksOptions();
              if (item.isDefault) {
                me.scale = scale2;
              }
            });
            helpers$1.each(updated, function(hasUpdated, id) {
              if (!hasUpdated) {
                delete scales2[id];
              }
            });
            me.scales = scales2;
            core_scaleService.addScalesToLayout(this);
          },
          buildOrUpdateControllers: function() {
            var me = this;
            var newControllers = [];
            var datasets = me.data.datasets;
            var i, ilen;
            for (i = 0, ilen = datasets.length; i < ilen; i++) {
              var dataset = datasets[i];
              var meta = me.getDatasetMeta(i);
              var type = dataset.type || me.config.type;
              if (meta.type && meta.type !== type) {
                me.destroyDatasetMeta(i);
                meta = me.getDatasetMeta(i);
              }
              meta.type = type;
              meta.order = dataset.order || 0;
              meta.index = i;
              if (meta.controller) {
                meta.controller.updateIndex(i);
                meta.controller.linkScales();
              } else {
                var ControllerClass = controllers[meta.type];
                if (ControllerClass === void 0) {
                  throw new Error('"' + meta.type + '" is not a chart type.');
                }
                meta.controller = new ControllerClass(me, i);
                newControllers.push(meta.controller);
              }
            }
            return newControllers;
          },
          /**
           * Reset the elements of all datasets
           * @private
           */
          resetElements: function() {
            var me = this;
            helpers$1.each(me.data.datasets, function(dataset, datasetIndex) {
              me.getDatasetMeta(datasetIndex).controller.reset();
            }, me);
          },
          /**
          * Resets the chart back to it's state before the initial animation
          */
          reset: function() {
            this.resetElements();
            this.tooltip.initialize();
          },
          update: function(config) {
            var me = this;
            var i, ilen;
            if (!config || typeof config !== "object") {
              config = {
                duration: config,
                lazy: arguments[1]
              };
            }
            updateConfig(me);
            core_plugins._invalidate(me);
            if (core_plugins.notify(me, "beforeUpdate") === false) {
              return;
            }
            me.tooltip._data = me.data;
            var newControllers = me.buildOrUpdateControllers();
            for (i = 0, ilen = me.data.datasets.length; i < ilen; i++) {
              me.getDatasetMeta(i).controller.buildOrUpdateElements();
            }
            me.updateLayout();
            if (me.options.animation && me.options.animation.duration) {
              helpers$1.each(newControllers, function(controller) {
                controller.reset();
              });
            }
            me.updateDatasets();
            me.tooltip.initialize();
            me.lastActive = [];
            core_plugins.notify(me, "afterUpdate");
            me._layers.sort(compare2Level("z", "_idx"));
            if (me._bufferedRender) {
              me._bufferedRequest = {
                duration: config.duration,
                easing: config.easing,
                lazy: config.lazy
              };
            } else {
              me.render(config);
            }
          },
          /**
           * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`
           * hook, in which case, plugins will not be called on `afterLayout`.
           * @private
           */
          updateLayout: function() {
            var me = this;
            if (core_plugins.notify(me, "beforeLayout") === false) {
              return;
            }
            core_layouts.update(this, this.width, this.height);
            me._layers = [];
            helpers$1.each(me.boxes, function(box) {
              if (box._configure) {
                box._configure();
              }
              me._layers.push.apply(me._layers, box._layers());
            }, me);
            me._layers.forEach(function(item, index) {
              item._idx = index;
            });
            core_plugins.notify(me, "afterScaleUpdate");
            core_plugins.notify(me, "afterLayout");
          },
          /**
           * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`
           * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.
           * @private
           */
          updateDatasets: function() {
            var me = this;
            if (core_plugins.notify(me, "beforeDatasetsUpdate") === false) {
              return;
            }
            for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
              me.updateDataset(i);
            }
            core_plugins.notify(me, "afterDatasetsUpdate");
          },
          /**
           * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`
           * hook, in which case, plugins will not be called on `afterDatasetUpdate`.
           * @private
           */
          updateDataset: function(index) {
            var me = this;
            var meta = me.getDatasetMeta(index);
            var args = {
              meta,
              index
            };
            if (core_plugins.notify(me, "beforeDatasetUpdate", [args]) === false) {
              return;
            }
            meta.controller._update();
            core_plugins.notify(me, "afterDatasetUpdate", [args]);
          },
          render: function(config) {
            var me = this;
            if (!config || typeof config !== "object") {
              config = {
                duration: config,
                lazy: arguments[1]
              };
            }
            var animationOptions = me.options.animation;
            var duration = valueOrDefault$9(config.duration, animationOptions && animationOptions.duration);
            var lazy = config.lazy;
            if (core_plugins.notify(me, "beforeRender") === false) {
              return;
            }
            var onComplete = function(animation2) {
              core_plugins.notify(me, "afterRender");
              helpers$1.callback(animationOptions && animationOptions.onComplete, [animation2], me);
            };
            if (animationOptions && duration) {
              var animation = new core_animation({
                numSteps: duration / 16.66,
                // 60 fps
                easing: config.easing || animationOptions.easing,
                render: function(chart, animationObject) {
                  var easingFunction = helpers$1.easing.effects[animationObject.easing];
                  var currentStep = animationObject.currentStep;
                  var stepDecimal = currentStep / animationObject.numSteps;
                  chart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);
                },
                onAnimationProgress: animationOptions.onProgress,
                onAnimationComplete: onComplete
              });
              core_animations.addAnimation(me, animation, duration, lazy);
            } else {
              me.draw();
              onComplete(new core_animation({ numSteps: 0, chart: me }));
            }
            return me;
          },
          draw: function(easingValue) {
            var me = this;
            var i, layers;
            me.clear();
            if (helpers$1.isNullOrUndef(easingValue)) {
              easingValue = 1;
            }
            me.transition(easingValue);
            if (me.width <= 0 || me.height <= 0) {
              return;
            }
            if (core_plugins.notify(me, "beforeDraw", [easingValue]) === false) {
              return;
            }
            layers = me._layers;
            for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {
              layers[i].draw(me.chartArea);
            }
            me.drawDatasets(easingValue);
            for (; i < layers.length; ++i) {
              layers[i].draw(me.chartArea);
            }
            me._drawTooltip(easingValue);
            core_plugins.notify(me, "afterDraw", [easingValue]);
          },
          /**
           * @private
           */
          transition: function(easingValue) {
            var me = this;
            for (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {
              if (me.isDatasetVisible(i)) {
                me.getDatasetMeta(i).controller.transition(easingValue);
              }
            }
            me.tooltip.transition(easingValue);
          },
          /**
           * @private
           */
          _getSortedDatasetMetas: function(filterVisible) {
            var me = this;
            var datasets = me.data.datasets || [];
            var result = [];
            var i, ilen;
            for (i = 0, ilen = datasets.length; i < ilen; ++i) {
              if (!filterVisible || me.isDatasetVisible(i)) {
                result.push(me.getDatasetMeta(i));
              }
            }
            result.sort(compare2Level("order", "index"));
            return result;
          },
          /**
           * @private
           */
          _getSortedVisibleDatasetMetas: function() {
            return this._getSortedDatasetMetas(true);
          },
          /**
           * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`
           * hook, in which case, plugins will not be called on `afterDatasetsDraw`.
           * @private
           */
          drawDatasets: function(easingValue) {
            var me = this;
            var metasets, i;
            if (core_plugins.notify(me, "beforeDatasetsDraw", [easingValue]) === false) {
              return;
            }
            metasets = me._getSortedVisibleDatasetMetas();
            for (i = metasets.length - 1; i >= 0; --i) {
              me.drawDataset(metasets[i], easingValue);
            }
            core_plugins.notify(me, "afterDatasetsDraw", [easingValue]);
          },
          /**
           * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`
           * hook, in which case, plugins will not be called on `afterDatasetDraw`.
           * @private
           */
          drawDataset: function(meta, easingValue) {
            var me = this;
            var args = {
              meta,
              index: meta.index,
              easingValue
            };
            if (core_plugins.notify(me, "beforeDatasetDraw", [args]) === false) {
              return;
            }
            meta.controller.draw(easingValue);
            core_plugins.notify(me, "afterDatasetDraw", [args]);
          },
          /**
           * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`
           * hook, in which case, plugins will not be called on `afterTooltipDraw`.
           * @private
           */
          _drawTooltip: function(easingValue) {
            var me = this;
            var tooltip = me.tooltip;
            var args = {
              tooltip,
              easingValue
            };
            if (core_plugins.notify(me, "beforeTooltipDraw", [args]) === false) {
              return;
            }
            tooltip.draw();
            core_plugins.notify(me, "afterTooltipDraw", [args]);
          },
          /**
           * Get the single element that was clicked on
           * @return An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw
           */
          getElementAtEvent: function(e) {
            return core_interaction.modes.single(this, e);
          },
          getElementsAtEvent: function(e) {
            return core_interaction.modes.label(this, e, { intersect: true });
          },
          getElementsAtXAxis: function(e) {
            return core_interaction.modes["x-axis"](this, e, { intersect: true });
          },
          getElementsAtEventForMode: function(e, mode, options2) {
            var method = core_interaction.modes[mode];
            if (typeof method === "function") {
              return method(this, e, options2);
            }
            return [];
          },
          getDatasetAtEvent: function(e) {
            return core_interaction.modes.dataset(this, e, { intersect: true });
          },
          getDatasetMeta: function(datasetIndex) {
            var me = this;
            var dataset = me.data.datasets[datasetIndex];
            if (!dataset._meta) {
              dataset._meta = {};
            }
            var meta = dataset._meta[me.id];
            if (!meta) {
              meta = dataset._meta[me.id] = {
                type: null,
                data: [],
                dataset: null,
                controller: null,
                hidden: null,
                // See isDatasetVisible() comment
                xAxisID: null,
                yAxisID: null,
                order: dataset.order || 0,
                index: datasetIndex
              };
            }
            return meta;
          },
          getVisibleDatasetCount: function() {
            var count = 0;
            for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
              if (this.isDatasetVisible(i)) {
                count++;
              }
            }
            return count;
          },
          isDatasetVisible: function(datasetIndex) {
            var meta = this.getDatasetMeta(datasetIndex);
            return typeof meta.hidden === "boolean" ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
          },
          generateLegend: function() {
            return this.options.legendCallback(this);
          },
          /**
           * @private
           */
          destroyDatasetMeta: function(datasetIndex) {
            var id = this.id;
            var dataset = this.data.datasets[datasetIndex];
            var meta = dataset._meta && dataset._meta[id];
            if (meta) {
              meta.controller.destroy();
              delete dataset._meta[id];
            }
          },
          destroy: function() {
            var me = this;
            var canvas2 = me.canvas;
            var i, ilen;
            me.stop();
            for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
              me.destroyDatasetMeta(i);
            }
            if (canvas2) {
              me.unbindEvents();
              helpers$1.canvas.clear(me);
              platform.releaseContext(me.ctx);
              me.canvas = null;
              me.ctx = null;
            }
            core_plugins.notify(me, "destroy");
            delete Chart.instances[me.id];
          },
          toBase64Image: function() {
            return this.canvas.toDataURL.apply(this.canvas, arguments);
          },
          initToolTip: function() {
            var me = this;
            me.tooltip = new core_tooltip({
              _chart: me,
              _chartInstance: me,
              // deprecated, backward compatibility
              _data: me.data,
              _options: me.options.tooltips
            }, me);
          },
          /**
           * @private
           */
          bindEvents: function() {
            var me = this;
            var listeners = me._listeners = {};
            var listener = function() {
              me.eventHandler.apply(me, arguments);
            };
            helpers$1.each(me.options.events, function(type) {
              platform.addEventListener(me, type, listener);
              listeners[type] = listener;
            });
            if (me.options.responsive) {
              listener = function() {
                me.resize();
              };
              platform.addEventListener(me, "resize", listener);
              listeners.resize = listener;
            }
          },
          /**
           * @private
           */
          unbindEvents: function() {
            var me = this;
            var listeners = me._listeners;
            if (!listeners) {
              return;
            }
            delete me._listeners;
            helpers$1.each(listeners, function(listener, type) {
              platform.removeEventListener(me, type, listener);
            });
          },
          updateHoverStyle: function(elements2, mode, enabled) {
            var prefix = enabled ? "set" : "remove";
            var element, i, ilen;
            for (i = 0, ilen = elements2.length; i < ilen; ++i) {
              element = elements2[i];
              if (element) {
                this.getDatasetMeta(element._datasetIndex).controller[prefix + "HoverStyle"](element);
              }
            }
            if (mode === "dataset") {
              this.getDatasetMeta(elements2[0]._datasetIndex).controller["_" + prefix + "DatasetHoverStyle"]();
            }
          },
          /**
           * @private
           */
          eventHandler: function(e) {
            var me = this;
            var tooltip = me.tooltip;
            if (core_plugins.notify(me, "beforeEvent", [e]) === false) {
              return;
            }
            me._bufferedRender = true;
            me._bufferedRequest = null;
            var changed = me.handleEvent(e);
            if (tooltip) {
              changed = tooltip._start ? tooltip.handleEvent(e) : changed | tooltip.handleEvent(e);
            }
            core_plugins.notify(me, "afterEvent", [e]);
            var bufferedRequest = me._bufferedRequest;
            if (bufferedRequest) {
              me.render(bufferedRequest);
            } else if (changed && !me.animating) {
              me.stop();
              me.render({
                duration: me.options.hover.animationDuration,
                lazy: true
              });
            }
            me._bufferedRender = false;
            me._bufferedRequest = null;
            return me;
          },
          /**
           * Handle an event
           * @private
           * @param {IEvent} event the event to handle
           * @return {boolean} true if the chart needs to re-render
           */
          handleEvent: function(e) {
            var me = this;
            var options2 = me.options || {};
            var hoverOptions = options2.hover;
            var changed = false;
            me.lastActive = me.lastActive || [];
            if (e.type === "mouseout") {
              me.active = [];
            } else {
              me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
            }
            helpers$1.callback(options2.onHover || options2.hover.onHover, [e.native, me.active], me);
            if (e.type === "mouseup" || e.type === "click") {
              if (options2.onClick) {
                options2.onClick.call(me, e.native, me.active);
              }
            }
            if (me.lastActive.length) {
              me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
            }
            if (me.active.length && hoverOptions.mode) {
              me.updateHoverStyle(me.active, hoverOptions.mode, true);
            }
            changed = !helpers$1.arrayEquals(me.active, me.lastActive);
            me.lastActive = me.active;
            return changed;
          }
        }
      );
      Chart.instances = {};
      var core_controller = Chart;
      Chart.Controller = Chart;
      Chart.types = {};
      helpers$1.configMerge = mergeConfig;
      helpers$1.scaleMerge = mergeScaleConfig;
      var core_helpers = function() {
        helpers$1.where = function(collection, filterCallback) {
          if (helpers$1.isArray(collection) && Array.prototype.filter) {
            return collection.filter(filterCallback);
          }
          var filtered = [];
          helpers$1.each(collection, function(item) {
            if (filterCallback(item)) {
              filtered.push(item);
            }
          });
          return filtered;
        };
        helpers$1.findIndex = Array.prototype.findIndex ? function(array, callback, scope) {
          return array.findIndex(callback, scope);
        } : function(array, callback, scope) {
          scope = scope === void 0 ? array : scope;
          for (var i = 0, ilen = array.length; i < ilen; ++i) {
            if (callback.call(scope, array[i], i, array)) {
              return i;
            }
          }
          return -1;
        };
        helpers$1.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {
          if (helpers$1.isNullOrUndef(startIndex)) {
            startIndex = -1;
          }
          for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
            var currentItem = arrayToSearch[i];
            if (filterCallback(currentItem)) {
              return currentItem;
            }
          }
        };
        helpers$1.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {
          if (helpers$1.isNullOrUndef(startIndex)) {
            startIndex = arrayToSearch.length;
          }
          for (var i = startIndex - 1; i >= 0; i--) {
            var currentItem = arrayToSearch[i];
            if (filterCallback(currentItem)) {
              return currentItem;
            }
          }
        };
        helpers$1.isNumber = function(n) {
          return !isNaN(parseFloat(n)) && isFinite(n);
        };
        helpers$1.almostEquals = function(x, y, epsilon) {
          return Math.abs(x - y) < epsilon;
        };
        helpers$1.almostWhole = function(x, epsilon) {
          var rounded = Math.round(x);
          return rounded - epsilon <= x && rounded + epsilon >= x;
        };
        helpers$1.max = function(array) {
          return array.reduce(function(max2, value) {
            if (!isNaN(value)) {
              return Math.max(max2, value);
            }
            return max2;
          }, Number.NEGATIVE_INFINITY);
        };
        helpers$1.min = function(array) {
          return array.reduce(function(min2, value) {
            if (!isNaN(value)) {
              return Math.min(min2, value);
            }
            return min2;
          }, Number.POSITIVE_INFINITY);
        };
        helpers$1.sign = Math.sign ? function(x) {
          return Math.sign(x);
        } : function(x) {
          x = +x;
          if (x === 0 || isNaN(x)) {
            return x;
          }
          return x > 0 ? 1 : -1;
        };
        helpers$1.toRadians = function(degrees) {
          return degrees * (Math.PI / 180);
        };
        helpers$1.toDegrees = function(radians) {
          return radians * (180 / Math.PI);
        };
        helpers$1._decimalPlaces = function(x) {
          if (!helpers$1.isFinite(x)) {
            return;
          }
          var e = 1;
          var p = 0;
          while (Math.round(x * e) / e !== x) {
            e *= 10;
            p++;
          }
          return p;
        };
        helpers$1.getAngleFromPoint = function(centrePoint, anglePoint) {
          var distanceFromXCenter = anglePoint.x - centrePoint.x;
          var distanceFromYCenter = anglePoint.y - centrePoint.y;
          var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
          var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
          if (angle < -0.5 * Math.PI) {
            angle += 2 * Math.PI;
          }
          return {
            angle,
            distance: radialDistanceFromCenter
          };
        };
        helpers$1.distanceBetweenPoints = function(pt1, pt2) {
          return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
        };
        helpers$1.aliasPixel = function(pixelWidth) {
          return pixelWidth % 2 === 0 ? 0 : 0.5;
        };
        helpers$1._alignPixel = function(chart, pixel, width) {
          var devicePixelRatio = chart.currentDevicePixelRatio;
          var halfWidth = width / 2;
          return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
        };
        helpers$1.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {
          var previous = firstPoint.skip ? middlePoint : firstPoint;
          var current = middlePoint;
          var next = afterPoint.skip ? middlePoint : afterPoint;
          var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
          var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));
          var s01 = d01 / (d01 + d12);
          var s12 = d12 / (d01 + d12);
          s01 = isNaN(s01) ? 0 : s01;
          s12 = isNaN(s12) ? 0 : s12;
          var fa = t * s01;
          var fb = t * s12;
          return {
            previous: {
              x: current.x - fa * (next.x - previous.x),
              y: current.y - fa * (next.y - previous.y)
            },
            next: {
              x: current.x + fb * (next.x - previous.x),
              y: current.y + fb * (next.y - previous.y)
            }
          };
        };
        helpers$1.EPSILON = Number.EPSILON || 1e-14;
        helpers$1.splineCurveMonotone = function(points) {
          var pointsWithTangents = (points || []).map(function(point) {
            return {
              model: point._model,
              deltaK: 0,
              mK: 0
            };
          });
          var pointsLen = pointsWithTangents.length;
          var i, pointBefore, pointCurrent, pointAfter;
          for (i = 0; i < pointsLen; ++i) {
            pointCurrent = pointsWithTangents[i];
            if (pointCurrent.model.skip) {
              continue;
            }
            pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
            pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
            if (pointAfter && !pointAfter.model.skip) {
              var slopeDeltaX = pointAfter.model.x - pointCurrent.model.x;
              pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
            }
            if (!pointBefore || pointBefore.model.skip) {
              pointCurrent.mK = pointCurrent.deltaK;
            } else if (!pointAfter || pointAfter.model.skip) {
              pointCurrent.mK = pointBefore.deltaK;
            } else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
              pointCurrent.mK = 0;
            } else {
              pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
            }
          }
          var alphaK, betaK, tauK, squaredMagnitude;
          for (i = 0; i < pointsLen - 1; ++i) {
            pointCurrent = pointsWithTangents[i];
            pointAfter = pointsWithTangents[i + 1];
            if (pointCurrent.model.skip || pointAfter.model.skip) {
              continue;
            }
            if (helpers$1.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
              pointCurrent.mK = pointAfter.mK = 0;
              continue;
            }
            alphaK = pointCurrent.mK / pointCurrent.deltaK;
            betaK = pointAfter.mK / pointCurrent.deltaK;
            squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
            if (squaredMagnitude <= 9) {
              continue;
            }
            tauK = 3 / Math.sqrt(squaredMagnitude);
            pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
            pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
          }
          var deltaX;
          for (i = 0; i < pointsLen; ++i) {
            pointCurrent = pointsWithTangents[i];
            if (pointCurrent.model.skip) {
              continue;
            }
            pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
            pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
            if (pointBefore && !pointBefore.model.skip) {
              deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
              pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
              pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
            }
            if (pointAfter && !pointAfter.model.skip) {
              deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
              pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
              pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
            }
          }
        };
        helpers$1.nextItem = function(collection, index, loop) {
          if (loop) {
            return index >= collection.length - 1 ? collection[0] : collection[index + 1];
          }
          return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
        };
        helpers$1.previousItem = function(collection, index, loop) {
          if (loop) {
            return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
          }
          return index <= 0 ? collection[0] : collection[index - 1];
        };
        helpers$1.niceNum = function(range, round2) {
          var exponent = Math.floor(helpers$1.log10(range));
          var fraction = range / Math.pow(10, exponent);
          var niceFraction;
          if (round2) {
            if (fraction < 1.5) {
              niceFraction = 1;
            } else if (fraction < 3) {
              niceFraction = 2;
            } else if (fraction < 7) {
              niceFraction = 5;
            } else {
              niceFraction = 10;
            }
          } else if (fraction <= 1) {
            niceFraction = 1;
          } else if (fraction <= 2) {
            niceFraction = 2;
          } else if (fraction <= 5) {
            niceFraction = 5;
          } else {
            niceFraction = 10;
          }
          return niceFraction * Math.pow(10, exponent);
        };
        helpers$1.requestAnimFrame = function() {
          if (typeof window === "undefined") {
            return function(callback) {
              callback();
            };
          }
          return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
            return window.setTimeout(callback, 1e3 / 60);
          };
        }();
        helpers$1.getRelativePosition = function(evt, chart) {
          var mouseX, mouseY;
          var e = evt.originalEvent || evt;
          var canvas2 = evt.target || evt.srcElement;
          var boundingRect = canvas2.getBoundingClientRect();
          var touches = e.touches;
          if (touches && touches.length > 0) {
            mouseX = touches[0].clientX;
            mouseY = touches[0].clientY;
          } else {
            mouseX = e.clientX;
            mouseY = e.clientY;
          }
          var paddingLeft = parseFloat(helpers$1.getStyle(canvas2, "padding-left"));
          var paddingTop = parseFloat(helpers$1.getStyle(canvas2, "padding-top"));
          var paddingRight = parseFloat(helpers$1.getStyle(canvas2, "padding-right"));
          var paddingBottom = parseFloat(helpers$1.getStyle(canvas2, "padding-bottom"));
          var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
          var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;
          mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / width * canvas2.width / chart.currentDevicePixelRatio);
          mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / height * canvas2.height / chart.currentDevicePixelRatio);
          return {
            x: mouseX,
            y: mouseY
          };
        };
        function parseMaxStyle(styleValue, node, parentProperty) {
          var valueInPixels;
          if (typeof styleValue === "string") {
            valueInPixels = parseInt(styleValue, 10);
            if (styleValue.indexOf("%") !== -1) {
              valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
            }
          } else {
            valueInPixels = styleValue;
          }
          return valueInPixels;
        }
        function isConstrainedValue(value) {
          return value !== void 0 && value !== null && value !== "none";
        }
        function getConstraintDimension(domNode, maxStyle, percentageProperty) {
          var view = document.defaultView;
          var parentNode = helpers$1._getParentNode(domNode);
          var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
          var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
          var hasCNode = isConstrainedValue(constrainedNode);
          var hasCContainer = isConstrainedValue(constrainedContainer);
          var infinity = Number.POSITIVE_INFINITY;
          if (hasCNode || hasCContainer) {
            return Math.min(
              hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,
              hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity
            );
          }
          return "none";
        }
        helpers$1.getConstraintWidth = function(domNode) {
          return getConstraintDimension(domNode, "max-width", "clientWidth");
        };
        helpers$1.getConstraintHeight = function(domNode) {
          return getConstraintDimension(domNode, "max-height", "clientHeight");
        };
        helpers$1._calculatePadding = function(container, padding, parentDimension) {
          padding = helpers$1.getStyle(container, padding);
          return padding.indexOf("%") > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);
        };
        helpers$1._getParentNode = function(domNode) {
          var parent = domNode.parentNode;
          if (parent && parent.toString() === "[object ShadowRoot]") {
            parent = parent.host;
          }
          return parent;
        };
        helpers$1.getMaximumWidth = function(domNode) {
          var container = helpers$1._getParentNode(domNode);
          if (!container) {
            return domNode.clientWidth;
          }
          var clientWidth = container.clientWidth;
          var paddingLeft = helpers$1._calculatePadding(container, "padding-left", clientWidth);
          var paddingRight = helpers$1._calculatePadding(container, "padding-right", clientWidth);
          var w = clientWidth - paddingLeft - paddingRight;
          var cw = helpers$1.getConstraintWidth(domNode);
          return isNaN(cw) ? w : Math.min(w, cw);
        };
        helpers$1.getMaximumHeight = function(domNode) {
          var container = helpers$1._getParentNode(domNode);
          if (!container) {
            return domNode.clientHeight;
          }
          var clientHeight = container.clientHeight;
          var paddingTop = helpers$1._calculatePadding(container, "padding-top", clientHeight);
          var paddingBottom = helpers$1._calculatePadding(container, "padding-bottom", clientHeight);
          var h = clientHeight - paddingTop - paddingBottom;
          var ch = helpers$1.getConstraintHeight(domNode);
          return isNaN(ch) ? h : Math.min(h, ch);
        };
        helpers$1.getStyle = function(el, property) {
          return el.currentStyle ? el.currentStyle[property] : document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
        };
        helpers$1.retinaScale = function(chart, forceRatio) {
          var pixelRatio = chart.currentDevicePixelRatio = forceRatio || typeof window !== "undefined" && window.devicePixelRatio || 1;
          if (pixelRatio === 1) {
            return;
          }
          var canvas2 = chart.canvas;
          var height = chart.height;
          var width = chart.width;
          canvas2.height = height * pixelRatio;
          canvas2.width = width * pixelRatio;
          chart.ctx.scale(pixelRatio, pixelRatio);
          if (!canvas2.style.height && !canvas2.style.width) {
            canvas2.style.height = height + "px";
            canvas2.style.width = width + "px";
          }
        };
        helpers$1.fontString = function(pixelSize, fontStyle, fontFamily) {
          return fontStyle + " " + pixelSize + "px " + fontFamily;
        };
        helpers$1.longestText = function(ctx, font, arrayOfThings, cache) {
          cache = cache || {};
          var data = cache.data = cache.data || {};
          var gc = cache.garbageCollect = cache.garbageCollect || [];
          if (cache.font !== font) {
            data = cache.data = {};
            gc = cache.garbageCollect = [];
            cache.font = font;
          }
          ctx.font = font;
          var longest = 0;
          var ilen = arrayOfThings.length;
          var i, j, jlen, thing, nestedThing;
          for (i = 0; i < ilen; i++) {
            thing = arrayOfThings[i];
            if (thing !== void 0 && thing !== null && helpers$1.isArray(thing) !== true) {
              longest = helpers$1.measureText(ctx, data, gc, longest, thing);
            } else if (helpers$1.isArray(thing)) {
              for (j = 0, jlen = thing.length; j < jlen; j++) {
                nestedThing = thing[j];
                if (nestedThing !== void 0 && nestedThing !== null && !helpers$1.isArray(nestedThing)) {
                  longest = helpers$1.measureText(ctx, data, gc, longest, nestedThing);
                }
              }
            }
          }
          var gcLen = gc.length / 2;
          if (gcLen > arrayOfThings.length) {
            for (i = 0; i < gcLen; i++) {
              delete data[gc[i]];
            }
            gc.splice(0, gcLen);
          }
          return longest;
        };
        helpers$1.measureText = function(ctx, data, gc, longest, string) {
          var textWidth = data[string];
          if (!textWidth) {
            textWidth = data[string] = ctx.measureText(string).width;
            gc.push(string);
          }
          if (textWidth > longest) {
            longest = textWidth;
          }
          return longest;
        };
        helpers$1.numberOfLabelLines = function(arrayOfThings) {
          var numberOfLines = 1;
          helpers$1.each(arrayOfThings, function(thing) {
            if (helpers$1.isArray(thing)) {
              if (thing.length > numberOfLines) {
                numberOfLines = thing.length;
              }
            }
          });
          return numberOfLines;
        };
        helpers$1.color = !chartjsColor ? function(value) {
          console.error("Color.js not found!");
          return value;
        } : function(value) {
          if (value instanceof CanvasGradient) {
            value = core_defaults.global.defaultColor;
          }
          return chartjsColor(value);
        };
        helpers$1.getHoverColor = function(colorValue) {
          return colorValue instanceof CanvasPattern || colorValue instanceof CanvasGradient ? colorValue : helpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();
        };
      };
      function abstract() {
        throw new Error(
          "This method is not implemented: either no adapter can be found or an incomplete integration was provided."
        );
      }
      function DateAdapter(options2) {
        this.options = options2 || {};
      }
      helpers$1.extend(
        DateAdapter.prototype,
        /** @lends DateAdapter */
        {
          /**
           * Returns a map of time formats for the supported formatting units defined
           * in Unit as well as 'datetime' representing a detailed date/time string.
           * @returns {{string: string}}
           */
          formats: abstract,
          /**
           * Parses the given `value` and return the associated timestamp.
           * @param {any} value - the value to parse (usually comes from the data)
           * @param {string} [format] - the expected data format
           * @returns {(number|null)}
           * @function
           */
          parse: abstract,
          /**
           * Returns the formatted date in the specified `format` for a given `timestamp`.
           * @param {number} timestamp - the timestamp to format
           * @param {string} format - the date/time token
           * @return {string}
           * @function
           */
          format: abstract,
          /**
           * Adds the specified `amount` of `unit` to the given `timestamp`.
           * @param {number} timestamp - the input timestamp
           * @param {number} amount - the amount to add
           * @param {Unit} unit - the unit as string
           * @return {number}
           * @function
           */
          add: abstract,
          /**
           * Returns the number of `unit` between the given timestamps.
           * @param {number} max - the input timestamp (reference)
           * @param {number} min - the timestamp to substract
           * @param {Unit} unit - the unit as string
           * @return {number}
           * @function
           */
          diff: abstract,
          /**
           * Returns start of `unit` for the given `timestamp`.
           * @param {number} timestamp - the input timestamp
           * @param {Unit} unit - the unit as string
           * @param {number} [weekday] - the ISO day of the week with 1 being Monday
           * and 7 being Sunday (only needed if param *unit* is `isoWeek`).
           * @function
           */
          startOf: abstract,
          /**
           * Returns end of `unit` for the given `timestamp`.
           * @param {number} timestamp - the input timestamp
           * @param {Unit} unit - the unit as string
           * @function
           */
          endOf: abstract,
          // DEPRECATIONS
          /**
           * Provided for backward compatibility for scale.getValueForPixel(),
           * this method should be overridden only by the moment adapter.
           * @deprecated since version 2.8.0
           * @todo remove at version 3
           * @private
           */
          _create: function(value) {
            return value;
          }
        }
      );
      DateAdapter.override = function(members) {
        helpers$1.extend(DateAdapter.prototype, members);
      };
      var _date = DateAdapter;
      var core_adapters = {
        _date
      };
      var core_ticks = {
        /**
         * Namespace to hold formatters for different types of ticks
         * @namespace Chart.Ticks.formatters
         */
        formatters: {
          /**
           * Formatter for value labels
           * @method Chart.Ticks.formatters.values
           * @param value the value to display
           * @return {string|string[]} the label to display
           */
          values: function(value) {
            return helpers$1.isArray(value) ? value : "" + value;
          },
          /**
           * Formatter for linear numeric ticks
           * @method Chart.Ticks.formatters.linear
           * @param tickValue {number} the value to be formatted
           * @param index {number} the position of the tickValue parameter in the ticks array
           * @param ticks {number[]} the list of ticks being converted
           * @return {string} string representation of the tickValue parameter
           */
          linear: function(tickValue, index, ticks) {
            var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];
            if (Math.abs(delta) > 1) {
              if (tickValue !== Math.floor(tickValue)) {
                delta = tickValue - Math.floor(tickValue);
              }
            }
            var logDelta = helpers$1.log10(Math.abs(delta));
            var tickString = "";
            if (tickValue !== 0) {
              var maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));
              if (maxTick < 1e-4) {
                var logTick = helpers$1.log10(Math.abs(tickValue));
                var numExponential = Math.floor(logTick) - Math.floor(logDelta);
                numExponential = Math.max(Math.min(numExponential, 20), 0);
                tickString = tickValue.toExponential(numExponential);
              } else {
                var numDecimal = -1 * Math.floor(logDelta);
                numDecimal = Math.max(Math.min(numDecimal, 20), 0);
                tickString = tickValue.toFixed(numDecimal);
              }
            } else {
              tickString = "0";
            }
            return tickString;
          },
          logarithmic: function(tickValue, index, ticks) {
            var remain = tickValue / Math.pow(10, Math.floor(helpers$1.log10(tickValue)));
            if (tickValue === 0) {
              return "0";
            } else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
              return tickValue.toExponential();
            }
            return "";
          }
        }
      };
      var isArray2 = helpers$1.isArray;
      var isNullOrUndef = helpers$1.isNullOrUndef;
      var valueOrDefault$a = helpers$1.valueOrDefault;
      var valueAtIndexOrDefault = helpers$1.valueAtIndexOrDefault;
      core_defaults._set("scale", {
        display: true,
        position: "left",
        offset: false,
        // grid line settings
        gridLines: {
          display: true,
          color: "rgba(0,0,0,0.1)",
          lineWidth: 1,
          drawBorder: true,
          drawOnChartArea: true,
          drawTicks: true,
          tickMarkLength: 10,
          zeroLineWidth: 1,
          zeroLineColor: "rgba(0,0,0,0.25)",
          zeroLineBorderDash: [],
          zeroLineBorderDashOffset: 0,
          offsetGridLines: false,
          borderDash: [],
          borderDashOffset: 0
        },
        // scale label
        scaleLabel: {
          // display property
          display: false,
          // actual label
          labelString: "",
          // top/bottom padding
          padding: {
            top: 4,
            bottom: 4
          }
        },
        // label settings
        ticks: {
          beginAtZero: false,
          minRotation: 0,
          maxRotation: 50,
          mirror: false,
          padding: 0,
          reverse: false,
          display: true,
          autoSkip: true,
          autoSkipPadding: 0,
          labelOffset: 0,
          // We pass through arrays to be rendered as multiline labels, we convert Others to strings here.
          callback: core_ticks.formatters.values,
          minor: {},
          major: {}
        }
      });
      function sample(arr, numItems) {
        var result = [];
        var increment = arr.length / numItems;
        var i = 0;
        var len = arr.length;
        for (; i < len; i += increment) {
          result.push(arr[Math.floor(i)]);
        }
        return result;
      }
      function getPixelForGridLine(scale2, index, offsetGridLines) {
        var length = scale2.getTicks().length;
        var validIndex = Math.min(index, length - 1);
        var lineValue = scale2.getPixelForTick(validIndex);
        var start = scale2._startPixel;
        var end = scale2._endPixel;
        var epsilon = 1e-6;
        var offset2;
        if (offsetGridLines) {
          if (length === 1) {
            offset2 = Math.max(lineValue - start, end - lineValue);
          } else if (index === 0) {
            offset2 = (scale2.getPixelForTick(1) - lineValue) / 2;
          } else {
            offset2 = (lineValue - scale2.getPixelForTick(validIndex - 1)) / 2;
          }
          lineValue += validIndex < index ? offset2 : -offset2;
          if (lineValue < start - epsilon || lineValue > end + epsilon) {
            return;
          }
        }
        return lineValue;
      }
      function garbageCollect(caches, length) {
        helpers$1.each(caches, function(cache) {
          var gc = cache.gc;
          var gcLen = gc.length / 2;
          var i;
          if (gcLen > length) {
            for (i = 0; i < gcLen; ++i) {
              delete cache.data[gc[i]];
            }
            gc.splice(0, gcLen);
          }
        });
      }
      function computeLabelSizes(ctx, tickFonts, ticks, caches) {
        var length = ticks.length;
        var widths = [];
        var heights = [];
        var offsets = [];
        var widestLabelSize = 0;
        var highestLabelSize = 0;
        var i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel, widest, highest;
        for (i = 0; i < length; ++i) {
          label = ticks[i].label;
          tickFont = ticks[i].major ? tickFonts.major : tickFonts.minor;
          ctx.font = fontString = tickFont.string;
          cache = caches[fontString] = caches[fontString] || { data: {}, gc: [] };
          lineHeight = tickFont.lineHeight;
          width = height = 0;
          if (!isNullOrUndef(label) && !isArray2(label)) {
            width = helpers$1.measureText(ctx, cache.data, cache.gc, width, label);
            height = lineHeight;
          } else if (isArray2(label)) {
            for (j = 0, jlen = label.length; j < jlen; ++j) {
              nestedLabel = label[j];
              if (!isNullOrUndef(nestedLabel) && !isArray2(nestedLabel)) {
                width = helpers$1.measureText(ctx, cache.data, cache.gc, width, nestedLabel);
                height += lineHeight;
              }
            }
          }
          widths.push(width);
          heights.push(height);
          offsets.push(lineHeight / 2);
          widestLabelSize = Math.max(width, widestLabelSize);
          highestLabelSize = Math.max(height, highestLabelSize);
        }
        garbageCollect(caches, length);
        widest = widths.indexOf(widestLabelSize);
        highest = heights.indexOf(highestLabelSize);
        function valueAt(idx) {
          return {
            width: widths[idx] || 0,
            height: heights[idx] || 0,
            offset: offsets[idx] || 0
          };
        }
        return {
          first: valueAt(0),
          last: valueAt(length - 1),
          widest: valueAt(widest),
          highest: valueAt(highest)
        };
      }
      function getTickMarkLength(options2) {
        return options2.drawTicks ? options2.tickMarkLength : 0;
      }
      function getScaleLabelHeight(options2) {
        var font, padding;
        if (!options2.display) {
          return 0;
        }
        font = helpers$1.options._parseFont(options2);
        padding = helpers$1.options.toPadding(options2.padding);
        return font.lineHeight + padding.height;
      }
      function parseFontOptions(options2, nestedOpts) {
        return helpers$1.extend(helpers$1.options._parseFont({
          fontFamily: valueOrDefault$a(nestedOpts.fontFamily, options2.fontFamily),
          fontSize: valueOrDefault$a(nestedOpts.fontSize, options2.fontSize),
          fontStyle: valueOrDefault$a(nestedOpts.fontStyle, options2.fontStyle),
          lineHeight: valueOrDefault$a(nestedOpts.lineHeight, options2.lineHeight)
        }), {
          color: helpers$1.options.resolve([nestedOpts.fontColor, options2.fontColor, core_defaults.global.defaultFontColor])
        });
      }
      function parseTickFontOptions(options2) {
        var minor = parseFontOptions(options2, options2.minor);
        var major = options2.major.enabled ? parseFontOptions(options2, options2.major) : minor;
        return { minor, major };
      }
      function nonSkipped(ticksToFilter) {
        var filtered = [];
        var item, index, len;
        for (index = 0, len = ticksToFilter.length; index < len; ++index) {
          item = ticksToFilter[index];
          if (typeof item._index !== "undefined") {
            filtered.push(item);
          }
        }
        return filtered;
      }
      function getEvenSpacing(arr) {
        var len = arr.length;
        var i, diff2;
        if (len < 2) {
          return false;
        }
        for (diff2 = arr[0], i = 1; i < len; ++i) {
          if (arr[i] - arr[i - 1] !== diff2) {
            return false;
          }
        }
        return diff2;
      }
      function calculateSpacing(majorIndices, ticks, axisLength, ticksLimit) {
        var evenMajorSpacing = getEvenSpacing(majorIndices);
        var spacing = (ticks.length - 1) / ticksLimit;
        var factors, factor, i, ilen;
        if (!evenMajorSpacing) {
          return Math.max(spacing, 1);
        }
        factors = helpers$1.math._factorize(evenMajorSpacing);
        for (i = 0, ilen = factors.length - 1; i < ilen; i++) {
          factor = factors[i];
          if (factor > spacing) {
            return factor;
          }
        }
        return Math.max(spacing, 1);
      }
      function getMajorIndices(ticks) {
        var result = [];
        var i, ilen;
        for (i = 0, ilen = ticks.length; i < ilen; i++) {
          if (ticks[i].major) {
            result.push(i);
          }
        }
        return result;
      }
      function skipMajors(ticks, majorIndices, spacing) {
        var count = 0;
        var next = majorIndices[0];
        var i, tick;
        spacing = Math.ceil(spacing);
        for (i = 0; i < ticks.length; i++) {
          tick = ticks[i];
          if (i === next) {
            tick._index = i;
            count++;
            next = majorIndices[count * spacing];
          } else {
            delete tick.label;
          }
        }
      }
      function skip(ticks, spacing, majorStart, majorEnd) {
        var start = valueOrDefault$a(majorStart, 0);
        var end = Math.min(valueOrDefault$a(majorEnd, ticks.length), ticks.length);
        var count = 0;
        var length, i, tick, next;
        spacing = Math.ceil(spacing);
        if (majorEnd) {
          length = majorEnd - majorStart;
          spacing = length / Math.floor(length / spacing);
        }
        next = start;
        while (next < 0) {
          count++;
          next = Math.round(start + count * spacing);
        }
        for (i = Math.max(start, 0); i < end; i++) {
          tick = ticks[i];
          if (i === next) {
            tick._index = i;
            count++;
            next = Math.round(start + count * spacing);
          } else {
            delete tick.label;
          }
        }
      }
      var Scale = core_element.extend({
        zeroLineIndex: 0,
        /**
         * Get the padding needed for the scale
         * @method getPadding
         * @private
         * @returns {Padding} the necessary padding
         */
        getPadding: function() {
          var me = this;
          return {
            left: me.paddingLeft || 0,
            top: me.paddingTop || 0,
            right: me.paddingRight || 0,
            bottom: me.paddingBottom || 0
          };
        },
        /**
         * Returns the scale tick objects ({label, major})
         * @since 2.7
         */
        getTicks: function() {
          return this._ticks;
        },
        /**
        * @private
        */
        _getLabels: function() {
          var data = this.chart.data;
          return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
        },
        // These methods are ordered by lifecyle. Utilities then follow.
        // Any function defined here is inherited by all scale types.
        // Any function can be extended by the scale type
        /**
         * Provided for backward compatibility, not available anymore
         * @function Chart.Scale.mergeTicksOptions
         * @deprecated since version 2.8.0
         * @todo remove at version 3
         */
        mergeTicksOptions: function() {
        },
        beforeUpdate: function() {
          helpers$1.callback(this.options.beforeUpdate, [this]);
        },
        /**
         * @param {number} maxWidth - the max width in pixels
         * @param {number} maxHeight - the max height in pixels
         * @param {object} margins - the space between the edge of the other scales and edge of the chart
         *   This space comes from two sources:
         *     - padding - space that's required to show the labels at the edges of the scale
         *     - thickness of scales or legends in another orientation
         */
        update: function(maxWidth, maxHeight, margins) {
          var me = this;
          var tickOpts = me.options.ticks;
          var sampleSize = tickOpts.sampleSize;
          var i, ilen, labels, ticks, samplingEnabled;
          me.beforeUpdate();
          me.maxWidth = maxWidth;
          me.maxHeight = maxHeight;
          me.margins = helpers$1.extend({
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
          }, margins);
          me._ticks = null;
          me.ticks = null;
          me._labelSizes = null;
          me._maxLabelLines = 0;
          me.longestLabelWidth = 0;
          me.longestTextCache = me.longestTextCache || {};
          me._gridLineItems = null;
          me._labelItems = null;
          me.beforeSetDimensions();
          me.setDimensions();
          me.afterSetDimensions();
          me.beforeDataLimits();
          me.determineDataLimits();
          me.afterDataLimits();
          me.beforeBuildTicks();
          ticks = me.buildTicks() || [];
          ticks = me.afterBuildTicks(ticks) || ticks;
          if ((!ticks || !ticks.length) && me.ticks) {
            ticks = [];
            for (i = 0, ilen = me.ticks.length; i < ilen; ++i) {
              ticks.push({
                value: me.ticks[i],
                major: false
              });
            }
          }
          me._ticks = ticks;
          samplingEnabled = sampleSize < ticks.length;
          labels = me._convertTicksToLabels(samplingEnabled ? sample(ticks, sampleSize) : ticks);
          me._configure();
          me.beforeCalculateTickRotation();
          me.calculateTickRotation();
          me.afterCalculateTickRotation();
          me.beforeFit();
          me.fit();
          me.afterFit();
          me._ticksToDraw = tickOpts.display && (tickOpts.autoSkip || tickOpts.source === "auto") ? me._autoSkip(ticks) : ticks;
          if (samplingEnabled) {
            labels = me._convertTicksToLabels(me._ticksToDraw);
          }
          me.ticks = labels;
          me.afterUpdate();
          return me.minSize;
        },
        /**
         * @private
         */
        _configure: function() {
          var me = this;
          var reversePixels = me.options.ticks.reverse;
          var startPixel, endPixel;
          if (me.isHorizontal()) {
            startPixel = me.left;
            endPixel = me.right;
          } else {
            startPixel = me.top;
            endPixel = me.bottom;
            reversePixels = !reversePixels;
          }
          me._startPixel = startPixel;
          me._endPixel = endPixel;
          me._reversePixels = reversePixels;
          me._length = endPixel - startPixel;
        },
        afterUpdate: function() {
          helpers$1.callback(this.options.afterUpdate, [this]);
        },
        //
        beforeSetDimensions: function() {
          helpers$1.callback(this.options.beforeSetDimensions, [this]);
        },
        setDimensions: function() {
          var me = this;
          if (me.isHorizontal()) {
            me.width = me.maxWidth;
            me.left = 0;
            me.right = me.width;
          } else {
            me.height = me.maxHeight;
            me.top = 0;
            me.bottom = me.height;
          }
          me.paddingLeft = 0;
          me.paddingTop = 0;
          me.paddingRight = 0;
          me.paddingBottom = 0;
        },
        afterSetDimensions: function() {
          helpers$1.callback(this.options.afterSetDimensions, [this]);
        },
        // Data limits
        beforeDataLimits: function() {
          helpers$1.callback(this.options.beforeDataLimits, [this]);
        },
        determineDataLimits: helpers$1.noop,
        afterDataLimits: function() {
          helpers$1.callback(this.options.afterDataLimits, [this]);
        },
        //
        beforeBuildTicks: function() {
          helpers$1.callback(this.options.beforeBuildTicks, [this]);
        },
        buildTicks: helpers$1.noop,
        afterBuildTicks: function(ticks) {
          var me = this;
          if (isArray2(ticks) && ticks.length) {
            return helpers$1.callback(me.options.afterBuildTicks, [me, ticks]);
          }
          me.ticks = helpers$1.callback(me.options.afterBuildTicks, [me, me.ticks]) || me.ticks;
          return ticks;
        },
        beforeTickToLabelConversion: function() {
          helpers$1.callback(this.options.beforeTickToLabelConversion, [this]);
        },
        convertTicksToLabels: function() {
          var me = this;
          var tickOpts = me.options.ticks;
          me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);
        },
        afterTickToLabelConversion: function() {
          helpers$1.callback(this.options.afterTickToLabelConversion, [this]);
        },
        //
        beforeCalculateTickRotation: function() {
          helpers$1.callback(this.options.beforeCalculateTickRotation, [this]);
        },
        calculateTickRotation: function() {
          var me = this;
          var options2 = me.options;
          var tickOpts = options2.ticks;
          var numTicks = me.getTicks().length;
          var minRotation = tickOpts.minRotation || 0;
          var maxRotation = tickOpts.maxRotation;
          var labelRotation = minRotation;
          var labelSizes, maxLabelWidth, maxLabelHeight, maxWidth, tickWidth, maxHeight, maxLabelDiagonal;
          if (!me._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !me.isHorizontal()) {
            me.labelRotation = minRotation;
            return;
          }
          labelSizes = me._getLabelSizes();
          maxLabelWidth = labelSizes.widest.width;
          maxLabelHeight = labelSizes.highest.height - labelSizes.highest.offset;
          maxWidth = Math.min(me.maxWidth, me.chart.width - maxLabelWidth);
          tickWidth = options2.offset ? me.maxWidth / numTicks : maxWidth / (numTicks - 1);
          if (maxLabelWidth + 6 > tickWidth) {
            tickWidth = maxWidth / (numTicks - (options2.offset ? 0.5 : 1));
            maxHeight = me.maxHeight - getTickMarkLength(options2.gridLines) - tickOpts.padding - getScaleLabelHeight(options2.scaleLabel);
            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
            labelRotation = helpers$1.toDegrees(Math.min(
              Math.asin(Math.min((labelSizes.highest.height + 6) / tickWidth, 1)),
              Math.asin(Math.min(maxHeight / maxLabelDiagonal, 1)) - Math.asin(maxLabelHeight / maxLabelDiagonal)
            ));
            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
          }
          me.labelRotation = labelRotation;
        },
        afterCalculateTickRotation: function() {
          helpers$1.callback(this.options.afterCalculateTickRotation, [this]);
        },
        //
        beforeFit: function() {
          helpers$1.callback(this.options.beforeFit, [this]);
        },
        fit: function() {
          var me = this;
          var minSize = me.minSize = {
            width: 0,
            height: 0
          };
          var chart = me.chart;
          var opts = me.options;
          var tickOpts = opts.ticks;
          var scaleLabelOpts = opts.scaleLabel;
          var gridLineOpts = opts.gridLines;
          var display = me._isVisible();
          var isBottom = opts.position === "bottom";
          var isHorizontal = me.isHorizontal();
          if (isHorizontal) {
            minSize.width = me.maxWidth;
          } else if (display) {
            minSize.width = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
          }
          if (!isHorizontal) {
            minSize.height = me.maxHeight;
          } else if (display) {
            minSize.height = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
          }
          if (tickOpts.display && display) {
            var tickFonts = parseTickFontOptions(tickOpts);
            var labelSizes = me._getLabelSizes();
            var firstLabelSize = labelSizes.first;
            var lastLabelSize = labelSizes.last;
            var widestLabelSize = labelSizes.widest;
            var highestLabelSize = labelSizes.highest;
            var lineSpace = tickFonts.minor.lineHeight * 0.4;
            var tickPadding = tickOpts.padding;
            if (isHorizontal) {
              var isRotated = me.labelRotation !== 0;
              var angleRadians = helpers$1.toRadians(me.labelRotation);
              var cosRotation = Math.cos(angleRadians);
              var sinRotation = Math.sin(angleRadians);
              var labelHeight = sinRotation * widestLabelSize.width + cosRotation * (highestLabelSize.height - (isRotated ? highestLabelSize.offset : 0)) + (isRotated ? 0 : lineSpace);
              minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);
              var offsetLeft = me.getPixelForTick(0) - me.left;
              var offsetRight = me.right - me.getPixelForTick(me.getTicks().length - 1);
              var paddingLeft, paddingRight;
              if (isRotated) {
                paddingLeft = isBottom ? cosRotation * firstLabelSize.width + sinRotation * firstLabelSize.offset : sinRotation * (firstLabelSize.height - firstLabelSize.offset);
                paddingRight = isBottom ? sinRotation * (lastLabelSize.height - lastLabelSize.offset) : cosRotation * lastLabelSize.width + sinRotation * lastLabelSize.offset;
              } else {
                paddingLeft = firstLabelSize.width / 2;
                paddingRight = lastLabelSize.width / 2;
              }
              me.paddingLeft = Math.max((paddingLeft - offsetLeft) * me.width / (me.width - offsetLeft), 0) + 3;
              me.paddingRight = Math.max((paddingRight - offsetRight) * me.width / (me.width - offsetRight), 0) + 3;
            } else {
              var labelWidth = tickOpts.mirror ? 0 : (
                // use lineSpace for consistency with horizontal axis
                // tickPadding is not implemented for horizontal
                widestLabelSize.width + tickPadding + lineSpace
              );
              minSize.width = Math.min(me.maxWidth, minSize.width + labelWidth);
              me.paddingTop = firstLabelSize.height / 2;
              me.paddingBottom = lastLabelSize.height / 2;
            }
          }
          me.handleMargins();
          if (isHorizontal) {
            me.width = me._length = chart.width - me.margins.left - me.margins.right;
            me.height = minSize.height;
          } else {
            me.width = minSize.width;
            me.height = me._length = chart.height - me.margins.top - me.margins.bottom;
          }
        },
        /**
         * Handle margins and padding interactions
         * @private
         */
        handleMargins: function() {
          var me = this;
          if (me.margins) {
            me.margins.left = Math.max(me.paddingLeft, me.margins.left);
            me.margins.top = Math.max(me.paddingTop, me.margins.top);
            me.margins.right = Math.max(me.paddingRight, me.margins.right);
            me.margins.bottom = Math.max(me.paddingBottom, me.margins.bottom);
          }
        },
        afterFit: function() {
          helpers$1.callback(this.options.afterFit, [this]);
        },
        // Shared Methods
        isHorizontal: function() {
          var pos = this.options.position;
          return pos === "top" || pos === "bottom";
        },
        isFullWidth: function() {
          return this.options.fullWidth;
        },
        // Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not
        getRightValue: function(rawValue) {
          if (isNullOrUndef(rawValue)) {
            return NaN;
          }
          if ((typeof rawValue === "number" || rawValue instanceof Number) && !isFinite(rawValue)) {
            return NaN;
          }
          if (rawValue) {
            if (this.isHorizontal()) {
              if (rawValue.x !== void 0) {
                return this.getRightValue(rawValue.x);
              }
            } else if (rawValue.y !== void 0) {
              return this.getRightValue(rawValue.y);
            }
          }
          return rawValue;
        },
        _convertTicksToLabels: function(ticks) {
          var me = this;
          var labels, i, ilen;
          me.ticks = ticks.map(function(tick) {
            return tick.value;
          });
          me.beforeTickToLabelConversion();
          labels = me.convertTicksToLabels(ticks) || me.ticks;
          me.afterTickToLabelConversion();
          for (i = 0, ilen = ticks.length; i < ilen; ++i) {
            ticks[i].label = labels[i];
          }
          return labels;
        },
        /**
         * @private
         */
        _getLabelSizes: function() {
          var me = this;
          var labelSizes = me._labelSizes;
          if (!labelSizes) {
            me._labelSizes = labelSizes = computeLabelSizes(me.ctx, parseTickFontOptions(me.options.ticks), me.getTicks(), me.longestTextCache);
            me.longestLabelWidth = labelSizes.widest.width;
          }
          return labelSizes;
        },
        /**
         * @private
         */
        _parseValue: function(value) {
          var start, end, min2, max2;
          if (isArray2(value)) {
            start = +this.getRightValue(value[0]);
            end = +this.getRightValue(value[1]);
            min2 = Math.min(start, end);
            max2 = Math.max(start, end);
          } else {
            value = +this.getRightValue(value);
            start = void 0;
            end = value;
            min2 = value;
            max2 = value;
          }
          return {
            min: min2,
            max: max2,
            start,
            end
          };
        },
        /**
        * @private
        */
        _getScaleLabel: function(rawValue) {
          var v = this._parseValue(rawValue);
          if (v.start !== void 0) {
            return "[" + v.start + ", " + v.end + "]";
          }
          return +this.getRightValue(rawValue);
        },
        /**
         * Used to get the value to display in the tooltip for the data at the given index
         * @param index
         * @param datasetIndex
         */
        getLabelForIndex: helpers$1.noop,
        /**
         * Returns the location of the given data point. Value can either be an index or a numerical value
         * The coordinate (0, 0) is at the upper-left corner of the canvas
         * @param value
         * @param index
         * @param datasetIndex
         */
        getPixelForValue: helpers$1.noop,
        /**
         * Used to get the data value from a given pixel. This is the inverse of getPixelForValue
         * The coordinate (0, 0) is at the upper-left corner of the canvas
         * @param pixel
         */
        getValueForPixel: helpers$1.noop,
        /**
         * Returns the location of the tick at the given index
         * The coordinate (0, 0) is at the upper-left corner of the canvas
         */
        getPixelForTick: function(index) {
          var me = this;
          var offset2 = me.options.offset;
          var numTicks = me._ticks.length;
          var tickWidth = 1 / Math.max(numTicks - (offset2 ? 0 : 1), 1);
          return index < 0 || index > numTicks - 1 ? null : me.getPixelForDecimal(index * tickWidth + (offset2 ? tickWidth / 2 : 0));
        },
        /**
         * Utility for getting the pixel location of a percentage of scale
         * The coordinate (0, 0) is at the upper-left corner of the canvas
         */
        getPixelForDecimal: function(decimal) {
          var me = this;
          if (me._reversePixels) {
            decimal = 1 - decimal;
          }
          return me._startPixel + decimal * me._length;
        },
        getDecimalForPixel: function(pixel) {
          var decimal = (pixel - this._startPixel) / this._length;
          return this._reversePixels ? 1 - decimal : decimal;
        },
        /**
         * Returns the pixel for the minimum chart value
         * The coordinate (0, 0) is at the upper-left corner of the canvas
         */
        getBasePixel: function() {
          return this.getPixelForValue(this.getBaseValue());
        },
        getBaseValue: function() {
          var me = this;
          var min2 = me.min;
          var max2 = me.max;
          return me.beginAtZero ? 0 : min2 < 0 && max2 < 0 ? max2 : min2 > 0 && max2 > 0 ? min2 : 0;
        },
        /**
         * Returns a subset of ticks to be plotted to avoid overlapping labels.
         * @private
         */
        _autoSkip: function(ticks) {
          var me = this;
          var tickOpts = me.options.ticks;
          var axisLength = me._length;
          var ticksLimit = tickOpts.maxTicksLimit || axisLength / me._tickSize() + 1;
          var majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
          var numMajorIndices = majorIndices.length;
          var first = majorIndices[0];
          var last = majorIndices[numMajorIndices - 1];
          var i, ilen, spacing, avgMajorSpacing;
          if (numMajorIndices > ticksLimit) {
            skipMajors(ticks, majorIndices, numMajorIndices / ticksLimit);
            return nonSkipped(ticks);
          }
          spacing = calculateSpacing(majorIndices, ticks, axisLength, ticksLimit);
          if (numMajorIndices > 0) {
            for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {
              skip(ticks, spacing, majorIndices[i], majorIndices[i + 1]);
            }
            avgMajorSpacing = numMajorIndices > 1 ? (last - first) / (numMajorIndices - 1) : null;
            skip(ticks, spacing, helpers$1.isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
            skip(ticks, spacing, last, helpers$1.isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
            return nonSkipped(ticks);
          }
          skip(ticks, spacing);
          return nonSkipped(ticks);
        },
        /**
         * @private
         */
        _tickSize: function() {
          var me = this;
          var optionTicks = me.options.ticks;
          var rot = helpers$1.toRadians(me.labelRotation);
          var cos = Math.abs(Math.cos(rot));
          var sin = Math.abs(Math.sin(rot));
          var labelSizes = me._getLabelSizes();
          var padding = optionTicks.autoSkipPadding || 0;
          var w = labelSizes ? labelSizes.widest.width + padding : 0;
          var h = labelSizes ? labelSizes.highest.height + padding : 0;
          return me.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;
        },
        /**
         * @private
         */
        _isVisible: function() {
          var me = this;
          var chart = me.chart;
          var display = me.options.display;
          var i, ilen, meta;
          if (display !== "auto") {
            return !!display;
          }
          for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
            if (chart.isDatasetVisible(i)) {
              meta = chart.getDatasetMeta(i);
              if (meta.xAxisID === me.id || meta.yAxisID === me.id) {
                return true;
              }
            }
          }
          return false;
        },
        /**
         * @private
         */
        _computeGridLineItems: function(chartArea) {
          var me = this;
          var chart = me.chart;
          var options2 = me.options;
          var gridLines = options2.gridLines;
          var position = options2.position;
          var offsetGridLines = gridLines.offsetGridLines;
          var isHorizontal = me.isHorizontal();
          var ticks = me._ticksToDraw;
          var ticksLength = ticks.length + (offsetGridLines ? 1 : 0);
          var tl = getTickMarkLength(gridLines);
          var items = [];
          var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
          var axisHalfWidth = axisWidth / 2;
          var alignPixel = helpers$1._alignPixel;
          var alignBorderValue = function(pixel) {
            return alignPixel(chart, pixel, axisWidth);
          };
          var borderValue, i, tick, lineValue, alignedLineValue;
          var tx1, ty1, tx2, ty2, x1, y1, x2, y2, lineWidth, lineColor, borderDash, borderDashOffset;
          if (position === "top") {
            borderValue = alignBorderValue(me.bottom);
            ty1 = me.bottom - tl;
            ty2 = borderValue - axisHalfWidth;
            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
            y2 = chartArea.bottom;
          } else if (position === "bottom") {
            borderValue = alignBorderValue(me.top);
            y1 = chartArea.top;
            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
            ty1 = borderValue + axisHalfWidth;
            ty2 = me.top + tl;
          } else if (position === "left") {
            borderValue = alignBorderValue(me.right);
            tx1 = me.right - tl;
            tx2 = borderValue - axisHalfWidth;
            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
            x2 = chartArea.right;
          } else {
            borderValue = alignBorderValue(me.left);
            x1 = chartArea.left;
            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
            tx1 = borderValue + axisHalfWidth;
            tx2 = me.left + tl;
          }
          for (i = 0; i < ticksLength; ++i) {
            tick = ticks[i] || {};
            if (isNullOrUndef(tick.label) && i < ticks.length) {
              continue;
            }
            if (i === me.zeroLineIndex && options2.offset === offsetGridLines) {
              lineWidth = gridLines.zeroLineWidth;
              lineColor = gridLines.zeroLineColor;
              borderDash = gridLines.zeroLineBorderDash || [];
              borderDashOffset = gridLines.zeroLineBorderDashOffset || 0;
            } else {
              lineWidth = valueAtIndexOrDefault(gridLines.lineWidth, i, 1);
              lineColor = valueAtIndexOrDefault(gridLines.color, i, "rgba(0,0,0,0.1)");
              borderDash = gridLines.borderDash || [];
              borderDashOffset = gridLines.borderDashOffset || 0;
            }
            lineValue = getPixelForGridLine(me, tick._index || i, offsetGridLines);
            if (lineValue === void 0) {
              continue;
            }
            alignedLineValue = alignPixel(chart, lineValue, lineWidth);
            if (isHorizontal) {
              tx1 = tx2 = x1 = x2 = alignedLineValue;
            } else {
              ty1 = ty2 = y1 = y2 = alignedLineValue;
            }
            items.push({
              tx1,
              ty1,
              tx2,
              ty2,
              x1,
              y1,
              x2,
              y2,
              width: lineWidth,
              color: lineColor,
              borderDash,
              borderDashOffset
            });
          }
          items.ticksLength = ticksLength;
          items.borderValue = borderValue;
          return items;
        },
        /**
         * @private
         */
        _computeLabelItems: function() {
          var me = this;
          var options2 = me.options;
          var optionTicks = options2.ticks;
          var position = options2.position;
          var isMirrored = optionTicks.mirror;
          var isHorizontal = me.isHorizontal();
          var ticks = me._ticksToDraw;
          var fonts = parseTickFontOptions(optionTicks);
          var tickPadding = optionTicks.padding;
          var tl = getTickMarkLength(options2.gridLines);
          var rotation = -helpers$1.toRadians(me.labelRotation);
          var items = [];
          var i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;
          if (position === "top") {
            y = me.bottom - tl - tickPadding;
            textAlign = !rotation ? "center" : "left";
          } else if (position === "bottom") {
            y = me.top + tl + tickPadding;
            textAlign = !rotation ? "center" : "right";
          } else if (position === "left") {
            x = me.right - (isMirrored ? 0 : tl) - tickPadding;
            textAlign = isMirrored ? "left" : "right";
          } else {
            x = me.left + (isMirrored ? 0 : tl) + tickPadding;
            textAlign = isMirrored ? "right" : "left";
          }
          for (i = 0, ilen = ticks.length; i < ilen; ++i) {
            tick = ticks[i];
            label = tick.label;
            if (isNullOrUndef(label)) {
              continue;
            }
            pixel = me.getPixelForTick(tick._index || i) + optionTicks.labelOffset;
            font = tick.major ? fonts.major : fonts.minor;
            lineHeight = font.lineHeight;
            lineCount = isArray2(label) ? label.length : 1;
            if (isHorizontal) {
              x = pixel;
              textOffset = position === "top" ? ((!rotation ? 0.5 : 1) - lineCount) * lineHeight : (!rotation ? 0.5 : 0) * lineHeight;
            } else {
              y = pixel;
              textOffset = (1 - lineCount) * lineHeight / 2;
            }
            items.push({
              x,
              y,
              rotation,
              label,
              font,
              textOffset,
              textAlign
            });
          }
          return items;
        },
        /**
         * @private
         */
        _drawGrid: function(chartArea) {
          var me = this;
          var gridLines = me.options.gridLines;
          if (!gridLines.display) {
            return;
          }
          var ctx = me.ctx;
          var chart = me.chart;
          var alignPixel = helpers$1._alignPixel;
          var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
          var items = me._gridLineItems || (me._gridLineItems = me._computeGridLineItems(chartArea));
          var width, color, i, ilen, item;
          for (i = 0, ilen = items.length; i < ilen; ++i) {
            item = items[i];
            width = item.width;
            color = item.color;
            if (width && color) {
              ctx.save();
              ctx.lineWidth = width;
              ctx.strokeStyle = color;
              if (ctx.setLineDash) {
                ctx.setLineDash(item.borderDash);
                ctx.lineDashOffset = item.borderDashOffset;
              }
              ctx.beginPath();
              if (gridLines.drawTicks) {
                ctx.moveTo(item.tx1, item.ty1);
                ctx.lineTo(item.tx2, item.ty2);
              }
              if (gridLines.drawOnChartArea) {
                ctx.moveTo(item.x1, item.y1);
                ctx.lineTo(item.x2, item.y2);
              }
              ctx.stroke();
              ctx.restore();
            }
          }
          if (axisWidth) {
            var firstLineWidth = axisWidth;
            var lastLineWidth = valueAtIndexOrDefault(gridLines.lineWidth, items.ticksLength - 1, 1);
            var borderValue = items.borderValue;
            var x1, x2, y1, y2;
            if (me.isHorizontal()) {
              x1 = alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;
              x2 = alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;
              y1 = y2 = borderValue;
            } else {
              y1 = alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;
              y2 = alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;
              x1 = x2 = borderValue;
            }
            ctx.lineWidth = axisWidth;
            ctx.strokeStyle = valueAtIndexOrDefault(gridLines.color, 0);
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.lineTo(x2, y2);
            ctx.stroke();
          }
        },
        /**
         * @private
         */
        _drawLabels: function() {
          var me = this;
          var optionTicks = me.options.ticks;
          if (!optionTicks.display) {
            return;
          }
          var ctx = me.ctx;
          var items = me._labelItems || (me._labelItems = me._computeLabelItems());
          var i, j, ilen, jlen, item, tickFont, label, y;
          for (i = 0, ilen = items.length; i < ilen; ++i) {
            item = items[i];
            tickFont = item.font;
            ctx.save();
            ctx.translate(item.x, item.y);
            ctx.rotate(item.rotation);
            ctx.font = tickFont.string;
            ctx.fillStyle = tickFont.color;
            ctx.textBaseline = "middle";
            ctx.textAlign = item.textAlign;
            label = item.label;
            y = item.textOffset;
            if (isArray2(label)) {
              for (j = 0, jlen = label.length; j < jlen; ++j) {
                ctx.fillText("" + label[j], 0, y);
                y += tickFont.lineHeight;
              }
            } else {
              ctx.fillText(label, 0, y);
            }
            ctx.restore();
          }
        },
        /**
         * @private
         */
        _drawTitle: function() {
          var me = this;
          var ctx = me.ctx;
          var options2 = me.options;
          var scaleLabel = options2.scaleLabel;
          if (!scaleLabel.display) {
            return;
          }
          var scaleLabelFontColor = valueOrDefault$a(scaleLabel.fontColor, core_defaults.global.defaultFontColor);
          var scaleLabelFont = helpers$1.options._parseFont(scaleLabel);
          var scaleLabelPadding = helpers$1.options.toPadding(scaleLabel.padding);
          var halfLineHeight = scaleLabelFont.lineHeight / 2;
          var position = options2.position;
          var rotation = 0;
          var scaleLabelX, scaleLabelY;
          if (me.isHorizontal()) {
            scaleLabelX = me.left + me.width / 2;
            scaleLabelY = position === "bottom" ? me.bottom - halfLineHeight - scaleLabelPadding.bottom : me.top + halfLineHeight + scaleLabelPadding.top;
          } else {
            var isLeft = position === "left";
            scaleLabelX = isLeft ? me.left + halfLineHeight + scaleLabelPadding.top : me.right - halfLineHeight - scaleLabelPadding.top;
            scaleLabelY = me.top + me.height / 2;
            rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
          }
          ctx.save();
          ctx.translate(scaleLabelX, scaleLabelY);
          ctx.rotate(rotation);
          ctx.textAlign = "center";
          ctx.textBaseline = "middle";
          ctx.fillStyle = scaleLabelFontColor;
          ctx.font = scaleLabelFont.string;
          ctx.fillText(scaleLabel.labelString, 0, 0);
          ctx.restore();
        },
        draw: function(chartArea) {
          var me = this;
          if (!me._isVisible()) {
            return;
          }
          me._drawGrid(chartArea);
          me._drawTitle();
          me._drawLabels();
        },
        /**
         * @private
         */
        _layers: function() {
          var me = this;
          var opts = me.options;
          var tz = opts.ticks && opts.ticks.z || 0;
          var gz = opts.gridLines && opts.gridLines.z || 0;
          if (!me._isVisible() || tz === gz || me.draw !== me._draw) {
            return [{
              z: tz,
              draw: function() {
                me.draw.apply(me, arguments);
              }
            }];
          }
          return [{
            z: gz,
            draw: function() {
              me._drawGrid.apply(me, arguments);
              me._drawTitle.apply(me, arguments);
            }
          }, {
            z: tz,
            draw: function() {
              me._drawLabels.apply(me, arguments);
            }
          }];
        },
        /**
         * @private
         */
        _getMatchingVisibleMetas: function(type) {
          var me = this;
          var isHorizontal = me.isHorizontal();
          return me.chart._getSortedVisibleDatasetMetas().filter(function(meta) {
            return (!type || meta.type === type) && (isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id);
          });
        }
      });
      Scale.prototype._draw = Scale.prototype.draw;
      var core_scale = Scale;
      var isNullOrUndef$1 = helpers$1.isNullOrUndef;
      var defaultConfig = {
        position: "bottom"
      };
      var scale_category = core_scale.extend({
        determineDataLimits: function() {
          var me = this;
          var labels = me._getLabels();
          var ticksOpts = me.options.ticks;
          var min2 = ticksOpts.min;
          var max2 = ticksOpts.max;
          var minIndex = 0;
          var maxIndex = labels.length - 1;
          var findIndex;
          if (min2 !== void 0) {
            findIndex = labels.indexOf(min2);
            if (findIndex >= 0) {
              minIndex = findIndex;
            }
          }
          if (max2 !== void 0) {
            findIndex = labels.indexOf(max2);
            if (findIndex >= 0) {
              maxIndex = findIndex;
            }
          }
          me.minIndex = minIndex;
          me.maxIndex = maxIndex;
          me.min = labels[minIndex];
          me.max = labels[maxIndex];
        },
        buildTicks: function() {
          var me = this;
          var labels = me._getLabels();
          var minIndex = me.minIndex;
          var maxIndex = me.maxIndex;
          me.ticks = minIndex === 0 && maxIndex === labels.length - 1 ? labels : labels.slice(minIndex, maxIndex + 1);
        },
        getLabelForIndex: function(index, datasetIndex) {
          var me = this;
          var chart = me.chart;
          if (chart.getDatasetMeta(datasetIndex).controller._getValueScaleId() === me.id) {
            return me.getRightValue(chart.data.datasets[datasetIndex].data[index]);
          }
          return me._getLabels()[index];
        },
        _configure: function() {
          var me = this;
          var offset2 = me.options.offset;
          var ticks = me.ticks;
          core_scale.prototype._configure.call(me);
          if (!me.isHorizontal()) {
            me._reversePixels = !me._reversePixels;
          }
          if (!ticks) {
            return;
          }
          me._startValue = me.minIndex - (offset2 ? 0.5 : 0);
          me._valueRange = Math.max(ticks.length - (offset2 ? 0 : 1), 1);
        },
        // Used to get data value locations.  Value can either be an index or a numerical value
        getPixelForValue: function(value, index, datasetIndex) {
          var me = this;
          var valueCategory, labels, idx;
          if (!isNullOrUndef$1(index) && !isNullOrUndef$1(datasetIndex)) {
            value = me.chart.data.datasets[datasetIndex].data[index];
          }
          if (!isNullOrUndef$1(value)) {
            valueCategory = me.isHorizontal() ? value.x : value.y;
          }
          if (valueCategory !== void 0 || value !== void 0 && isNaN(index)) {
            labels = me._getLabels();
            value = helpers$1.valueOrDefault(valueCategory, value);
            idx = labels.indexOf(value);
            index = idx !== -1 ? idx : index;
            if (isNaN(index)) {
              index = value;
            }
          }
          return me.getPixelForDecimal((index - me._startValue) / me._valueRange);
        },
        getPixelForTick: function(index) {
          var ticks = this.ticks;
          return index < 0 || index > ticks.length - 1 ? null : this.getPixelForValue(ticks[index], index + this.minIndex);
        },
        getValueForPixel: function(pixel) {
          var me = this;
          var value = Math.round(me._startValue + me.getDecimalForPixel(pixel) * me._valueRange);
          return Math.min(Math.max(value, 0), me.ticks.length - 1);
        },
        getBasePixel: function() {
          return this.bottom;
        }
      });
      var _defaults = defaultConfig;
      scale_category._defaults = _defaults;
      var noop = helpers$1.noop;
      var isNullOrUndef$2 = helpers$1.isNullOrUndef;
      function generateTicks(generationOptions, dataRange) {
        var ticks = [];
        var MIN_SPACING = 1e-14;
        var stepSize = generationOptions.stepSize;
        var unit = stepSize || 1;
        var maxNumSpaces = generationOptions.maxTicks - 1;
        var min2 = generationOptions.min;
        var max2 = generationOptions.max;
        var precision = generationOptions.precision;
        var rmin = dataRange.min;
        var rmax = dataRange.max;
        var spacing = helpers$1.niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;
        var factor, niceMin, niceMax, numSpaces;
        if (spacing < MIN_SPACING && isNullOrUndef$2(min2) && isNullOrUndef$2(max2)) {
          return [rmin, rmax];
        }
        numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
        if (numSpaces > maxNumSpaces) {
          spacing = helpers$1.niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;
        }
        if (stepSize || isNullOrUndef$2(precision)) {
          factor = Math.pow(10, helpers$1._decimalPlaces(spacing));
        } else {
          factor = Math.pow(10, precision);
          spacing = Math.ceil(spacing * factor) / factor;
        }
        niceMin = Math.floor(rmin / spacing) * spacing;
        niceMax = Math.ceil(rmax / spacing) * spacing;
        if (stepSize) {
          if (!isNullOrUndef$2(min2) && helpers$1.almostWhole(min2 / spacing, spacing / 1e3)) {
            niceMin = min2;
          }
          if (!isNullOrUndef$2(max2) && helpers$1.almostWhole(max2 / spacing, spacing / 1e3)) {
            niceMax = max2;
          }
        }
        numSpaces = (niceMax - niceMin) / spacing;
        if (helpers$1.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1e3)) {
          numSpaces = Math.round(numSpaces);
        } else {
          numSpaces = Math.ceil(numSpaces);
        }
        niceMin = Math.round(niceMin * factor) / factor;
        niceMax = Math.round(niceMax * factor) / factor;
        ticks.push(isNullOrUndef$2(min2) ? niceMin : min2);
        for (var j = 1; j < numSpaces; ++j) {
          ticks.push(Math.round((niceMin + j * spacing) * factor) / factor);
        }
        ticks.push(isNullOrUndef$2(max2) ? niceMax : max2);
        return ticks;
      }
      var scale_linearbase = core_scale.extend({
        getRightValue: function(value) {
          if (typeof value === "string") {
            return +value;
          }
          return core_scale.prototype.getRightValue.call(this, value);
        },
        handleTickRangeOptions: function() {
          var me = this;
          var opts = me.options;
          var tickOpts = opts.ticks;
          if (tickOpts.beginAtZero) {
            var minSign = helpers$1.sign(me.min);
            var maxSign = helpers$1.sign(me.max);
            if (minSign < 0 && maxSign < 0) {
              me.max = 0;
            } else if (minSign > 0 && maxSign > 0) {
              me.min = 0;
            }
          }
          var setMin = tickOpts.min !== void 0 || tickOpts.suggestedMin !== void 0;
          var setMax = tickOpts.max !== void 0 || tickOpts.suggestedMax !== void 0;
          if (tickOpts.min !== void 0) {
            me.min = tickOpts.min;
          } else if (tickOpts.suggestedMin !== void 0) {
            if (me.min === null) {
              me.min = tickOpts.suggestedMin;
            } else {
              me.min = Math.min(me.min, tickOpts.suggestedMin);
            }
          }
          if (tickOpts.max !== void 0) {
            me.max = tickOpts.max;
          } else if (tickOpts.suggestedMax !== void 0) {
            if (me.max === null) {
              me.max = tickOpts.suggestedMax;
            } else {
              me.max = Math.max(me.max, tickOpts.suggestedMax);
            }
          }
          if (setMin !== setMax) {
            if (me.min >= me.max) {
              if (setMin) {
                me.max = me.min + 1;
              } else {
                me.min = me.max - 1;
              }
            }
          }
          if (me.min === me.max) {
            me.max++;
            if (!tickOpts.beginAtZero) {
              me.min--;
            }
          }
        },
        getTickLimit: function() {
          var me = this;
          var tickOpts = me.options.ticks;
          var stepSize = tickOpts.stepSize;
          var maxTicksLimit = tickOpts.maxTicksLimit;
          var maxTicks;
          if (stepSize) {
            maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;
          } else {
            maxTicks = me._computeTickLimit();
            maxTicksLimit = maxTicksLimit || 11;
          }
          if (maxTicksLimit) {
            maxTicks = Math.min(maxTicksLimit, maxTicks);
          }
          return maxTicks;
        },
        _computeTickLimit: function() {
          return Number.POSITIVE_INFINITY;
        },
        handleDirectionalChanges: noop,
        buildTicks: function() {
          var me = this;
          var opts = me.options;
          var tickOpts = opts.ticks;
          var maxTicks = me.getTickLimit();
          maxTicks = Math.max(2, maxTicks);
          var numericGeneratorOptions = {
            maxTicks,
            min: tickOpts.min,
            max: tickOpts.max,
            precision: tickOpts.precision,
            stepSize: helpers$1.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
          };
          var ticks = me.ticks = generateTicks(numericGeneratorOptions, me);
          me.handleDirectionalChanges();
          me.max = helpers$1.max(ticks);
          me.min = helpers$1.min(ticks);
          if (tickOpts.reverse) {
            ticks.reverse();
            me.start = me.max;
            me.end = me.min;
          } else {
            me.start = me.min;
            me.end = me.max;
          }
        },
        convertTicksToLabels: function() {
          var me = this;
          me.ticksAsNumbers = me.ticks.slice();
          me.zeroLineIndex = me.ticks.indexOf(0);
          core_scale.prototype.convertTicksToLabels.call(me);
        },
        _configure: function() {
          var me = this;
          var ticks = me.getTicks();
          var start = me.min;
          var end = me.max;
          var offset2;
          core_scale.prototype._configure.call(me);
          if (me.options.offset && ticks.length) {
            offset2 = (end - start) / Math.max(ticks.length - 1, 1) / 2;
            start -= offset2;
            end += offset2;
          }
          me._startValue = start;
          me._endValue = end;
          me._valueRange = end - start;
        }
      });
      var defaultConfig$1 = {
        position: "left",
        ticks: {
          callback: core_ticks.formatters.linear
        }
      };
      var DEFAULT_MIN = 0;
      var DEFAULT_MAX = 1;
      function getOrCreateStack(stacks, stacked, meta) {
        var key = [
          meta.type,
          // we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
          stacked === void 0 && meta.stack === void 0 ? meta.index : "",
          meta.stack
        ].join(".");
        if (stacks[key] === void 0) {
          stacks[key] = {
            pos: [],
            neg: []
          };
        }
        return stacks[key];
      }
      function stackData(scale2, stacks, meta, data) {
        var opts = scale2.options;
        var stacked = opts.stacked;
        var stack = getOrCreateStack(stacks, stacked, meta);
        var pos = stack.pos;
        var neg = stack.neg;
        var ilen = data.length;
        var i, value;
        for (i = 0; i < ilen; ++i) {
          value = scale2._parseValue(data[i]);
          if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {
            continue;
          }
          pos[i] = pos[i] || 0;
          neg[i] = neg[i] || 0;
          if (opts.relativePoints) {
            pos[i] = 100;
          } else if (value.min < 0 || value.max < 0) {
            neg[i] += value.min;
          } else {
            pos[i] += value.max;
          }
        }
      }
      function updateMinMax(scale2, meta, data) {
        var ilen = data.length;
        var i, value;
        for (i = 0; i < ilen; ++i) {
          value = scale2._parseValue(data[i]);
          if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {
            continue;
          }
          scale2.min = Math.min(scale2.min, value.min);
          scale2.max = Math.max(scale2.max, value.max);
        }
      }
      var scale_linear = scale_linearbase.extend({
        determineDataLimits: function() {
          var me = this;
          var opts = me.options;
          var chart = me.chart;
          var datasets = chart.data.datasets;
          var metasets = me._getMatchingVisibleMetas();
          var hasStacks = opts.stacked;
          var stacks = {};
          var ilen = metasets.length;
          var i, meta, data, values;
          me.min = Number.POSITIVE_INFINITY;
          me.max = Number.NEGATIVE_INFINITY;
          if (hasStacks === void 0) {
            for (i = 0; !hasStacks && i < ilen; ++i) {
              meta = metasets[i];
              hasStacks = meta.stack !== void 0;
            }
          }
          for (i = 0; i < ilen; ++i) {
            meta = metasets[i];
            data = datasets[meta.index].data;
            if (hasStacks) {
              stackData(me, stacks, meta, data);
            } else {
              updateMinMax(me, meta, data);
            }
          }
          helpers$1.each(stacks, function(stackValues) {
            values = stackValues.pos.concat(stackValues.neg);
            me.min = Math.min(me.min, helpers$1.min(values));
            me.max = Math.max(me.max, helpers$1.max(values));
          });
          me.min = helpers$1.isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;
          me.max = helpers$1.isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX;
          me.handleTickRangeOptions();
        },
        // Returns the maximum number of ticks based on the scale dimension
        _computeTickLimit: function() {
          var me = this;
          var tickFont;
          if (me.isHorizontal()) {
            return Math.ceil(me.width / 40);
          }
          tickFont = helpers$1.options._parseFont(me.options.ticks);
          return Math.ceil(me.height / tickFont.lineHeight);
        },
        // Called after the ticks are built. We need
        handleDirectionalChanges: function() {
          if (!this.isHorizontal()) {
            this.ticks.reverse();
          }
        },
        getLabelForIndex: function(index, datasetIndex) {
          return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
        },
        // Utils
        getPixelForValue: function(value) {
          var me = this;
          return me.getPixelForDecimal((+me.getRightValue(value) - me._startValue) / me._valueRange);
        },
        getValueForPixel: function(pixel) {
          return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
        },
        getPixelForTick: function(index) {
          var ticks = this.ticksAsNumbers;
          if (index < 0 || index > ticks.length - 1) {
            return null;
          }
          return this.getPixelForValue(ticks[index]);
        }
      });
      var _defaults$1 = defaultConfig$1;
      scale_linear._defaults = _defaults$1;
      var valueOrDefault$b = helpers$1.valueOrDefault;
      var log10 = helpers$1.math.log10;
      function generateTicks$1(generationOptions, dataRange) {
        var ticks = [];
        var tickVal = valueOrDefault$b(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));
        var endExp = Math.floor(log10(dataRange.max));
        var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
        var exp, significand;
        if (tickVal === 0) {
          exp = Math.floor(log10(dataRange.minNotZero));
          significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));
          ticks.push(tickVal);
          tickVal = significand * Math.pow(10, exp);
        } else {
          exp = Math.floor(log10(tickVal));
          significand = Math.floor(tickVal / Math.pow(10, exp));
        }
        var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
        do {
          ticks.push(tickVal);
          ++significand;
          if (significand === 10) {
            significand = 1;
            ++exp;
            precision = exp >= 0 ? 1 : precision;
          }
          tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
        } while (exp < endExp || exp === endExp && significand < endSignificand);
        var lastTick = valueOrDefault$b(generationOptions.max, tickVal);
        ticks.push(lastTick);
        return ticks;
      }
      var defaultConfig$2 = {
        position: "left",
        // label settings
        ticks: {
          callback: core_ticks.formatters.logarithmic
        }
      };
      function nonNegativeOrDefault(value, defaultValue) {
        return helpers$1.isFinite(value) && value >= 0 ? value : defaultValue;
      }
      var scale_logarithmic = core_scale.extend({
        determineDataLimits: function() {
          var me = this;
          var opts = me.options;
          var chart = me.chart;
          var datasets = chart.data.datasets;
          var isHorizontal = me.isHorizontal();
          function IDMatches(meta2) {
            return isHorizontal ? meta2.xAxisID === me.id : meta2.yAxisID === me.id;
          }
          var datasetIndex, meta, value, data, i, ilen;
          me.min = Number.POSITIVE_INFINITY;
          me.max = Number.NEGATIVE_INFINITY;
          me.minNotZero = Number.POSITIVE_INFINITY;
          var hasStacks = opts.stacked;
          if (hasStacks === void 0) {
            for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
              meta = chart.getDatasetMeta(datasetIndex);
              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== void 0) {
                hasStacks = true;
                break;
              }
            }
          }
          if (opts.stacked || hasStacks) {
            var valuesPerStack = {};
            for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
              meta = chart.getDatasetMeta(datasetIndex);
              var key = [
                meta.type,
                // we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
                opts.stacked === void 0 && meta.stack === void 0 ? datasetIndex : "",
                meta.stack
              ].join(".");
              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                if (valuesPerStack[key] === void 0) {
                  valuesPerStack[key] = [];
                }
                data = datasets[datasetIndex].data;
                for (i = 0, ilen = data.length; i < ilen; i++) {
                  var values = valuesPerStack[key];
                  value = me._parseValue(data[i]);
                  if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {
                    continue;
                  }
                  values[i] = values[i] || 0;
                  values[i] += value.max;
                }
              }
            }
            helpers$1.each(valuesPerStack, function(valuesForType) {
              if (valuesForType.length > 0) {
                var minVal = helpers$1.min(valuesForType);
                var maxVal = helpers$1.max(valuesForType);
                me.min = Math.min(me.min, minVal);
                me.max = Math.max(me.max, maxVal);
              }
            });
          } else {
            for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
              meta = chart.getDatasetMeta(datasetIndex);
              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                data = datasets[datasetIndex].data;
                for (i = 0, ilen = data.length; i < ilen; i++) {
                  value = me._parseValue(data[i]);
                  if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {
                    continue;
                  }
                  me.min = Math.min(value.min, me.min);
                  me.max = Math.max(value.max, me.max);
                  if (value.min !== 0) {
                    me.minNotZero = Math.min(value.min, me.minNotZero);
                  }
                }
              }
            }
          }
          me.min = helpers$1.isFinite(me.min) ? me.min : null;
          me.max = helpers$1.isFinite(me.max) ? me.max : null;
          me.minNotZero = helpers$1.isFinite(me.minNotZero) ? me.minNotZero : null;
          this.handleTickRangeOptions();
        },
        handleTickRangeOptions: function() {
          var me = this;
          var tickOpts = me.options.ticks;
          var DEFAULT_MIN2 = 1;
          var DEFAULT_MAX2 = 10;
          me.min = nonNegativeOrDefault(tickOpts.min, me.min);
          me.max = nonNegativeOrDefault(tickOpts.max, me.max);
          if (me.min === me.max) {
            if (me.min !== 0 && me.min !== null) {
              me.min = Math.pow(10, Math.floor(log10(me.min)) - 1);
              me.max = Math.pow(10, Math.floor(log10(me.max)) + 1);
            } else {
              me.min = DEFAULT_MIN2;
              me.max = DEFAULT_MAX2;
            }
          }
          if (me.min === null) {
            me.min = Math.pow(10, Math.floor(log10(me.max)) - 1);
          }
          if (me.max === null) {
            me.max = me.min !== 0 ? Math.pow(10, Math.floor(log10(me.min)) + 1) : DEFAULT_MAX2;
          }
          if (me.minNotZero === null) {
            if (me.min > 0) {
              me.minNotZero = me.min;
            } else if (me.max < 1) {
              me.minNotZero = Math.pow(10, Math.floor(log10(me.max)));
            } else {
              me.minNotZero = DEFAULT_MIN2;
            }
          }
        },
        buildTicks: function() {
          var me = this;
          var tickOpts = me.options.ticks;
          var reverse = !me.isHorizontal();
          var generationOptions = {
            min: nonNegativeOrDefault(tickOpts.min),
            max: nonNegativeOrDefault(tickOpts.max)
          };
          var ticks = me.ticks = generateTicks$1(generationOptions, me);
          me.max = helpers$1.max(ticks);
          me.min = helpers$1.min(ticks);
          if (tickOpts.reverse) {
            reverse = !reverse;
            me.start = me.max;
            me.end = me.min;
          } else {
            me.start = me.min;
            me.end = me.max;
          }
          if (reverse) {
            ticks.reverse();
          }
        },
        convertTicksToLabels: function() {
          this.tickValues = this.ticks.slice();
          core_scale.prototype.convertTicksToLabels.call(this);
        },
        // Get the correct tooltip label
        getLabelForIndex: function(index, datasetIndex) {
          return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
        },
        getPixelForTick: function(index) {
          var ticks = this.tickValues;
          if (index < 0 || index > ticks.length - 1) {
            return null;
          }
          return this.getPixelForValue(ticks[index]);
        },
        /**
         * Returns the value of the first tick.
         * @param {number} value - The minimum not zero value.
         * @return {number} The first tick value.
         * @private
         */
        _getFirstTickValue: function(value) {
          var exp = Math.floor(log10(value));
          var significand = Math.floor(value / Math.pow(10, exp));
          return significand * Math.pow(10, exp);
        },
        _configure: function() {
          var me = this;
          var start = me.min;
          var offset2 = 0;
          core_scale.prototype._configure.call(me);
          if (start === 0) {
            start = me._getFirstTickValue(me.minNotZero);
            offset2 = valueOrDefault$b(me.options.ticks.fontSize, core_defaults.global.defaultFontSize) / me._length;
          }
          me._startValue = log10(start);
          me._valueOffset = offset2;
          me._valueRange = (log10(me.max) - log10(start)) / (1 - offset2);
        },
        getPixelForValue: function(value) {
          var me = this;
          var decimal = 0;
          value = +me.getRightValue(value);
          if (value > me.min && value > 0) {
            decimal = (log10(value) - me._startValue) / me._valueRange + me._valueOffset;
          }
          return me.getPixelForDecimal(decimal);
        },
        getValueForPixel: function(pixel) {
          var me = this;
          var decimal = me.getDecimalForPixel(pixel);
          return decimal === 0 && me.min === 0 ? 0 : Math.pow(10, me._startValue + (decimal - me._valueOffset) * me._valueRange);
        }
      });
      var _defaults$2 = defaultConfig$2;
      scale_logarithmic._defaults = _defaults$2;
      var valueOrDefault$c = helpers$1.valueOrDefault;
      var valueAtIndexOrDefault$1 = helpers$1.valueAtIndexOrDefault;
      var resolve$4 = helpers$1.options.resolve;
      var defaultConfig$3 = {
        display: true,
        // Boolean - Whether to animate scaling the chart from the centre
        animate: true,
        position: "chartArea",
        angleLines: {
          display: true,
          color: "rgba(0,0,0,0.1)",
          lineWidth: 1,
          borderDash: [],
          borderDashOffset: 0
        },
        gridLines: {
          circular: false
        },
        // label settings
        ticks: {
          // Boolean - Show a backdrop to the scale label
          showLabelBackdrop: true,
          // String - The colour of the label backdrop
          backdropColor: "rgba(255,255,255,0.75)",
          // Number - The backdrop padding above & below the label in pixels
          backdropPaddingY: 2,
          // Number - The backdrop padding to the side of the label in pixels
          backdropPaddingX: 2,
          callback: core_ticks.formatters.linear
        },
        pointLabels: {
          // Boolean - if true, show point labels
          display: true,
          // Number - Point label font size in pixels
          fontSize: 10,
          // Function - Used to convert point labels
          callback: function(label) {
            return label;
          }
        }
      };
      function getTickBackdropHeight(opts) {
        var tickOpts = opts.ticks;
        if (tickOpts.display && opts.display) {
          return valueOrDefault$c(tickOpts.fontSize, core_defaults.global.defaultFontSize) + tickOpts.backdropPaddingY * 2;
        }
        return 0;
      }
      function measureLabelSize(ctx, lineHeight, label) {
        if (helpers$1.isArray(label)) {
          return {
            w: helpers$1.longestText(ctx, ctx.font, label),
            h: label.length * lineHeight
          };
        }
        return {
          w: ctx.measureText(label).width,
          h: lineHeight
        };
      }
      function determineLimits(angle, pos, size, min2, max2) {
        if (angle === min2 || angle === max2) {
          return {
            start: pos - size / 2,
            end: pos + size / 2
          };
        } else if (angle < min2 || angle > max2) {
          return {
            start: pos - size,
            end: pos
          };
        }
        return {
          start: pos,
          end: pos + size
        };
      }
      function fitWithPointLabels(scale2) {
        var plFont = helpers$1.options._parseFont(scale2.options.pointLabels);
        var furthestLimits = {
          l: 0,
          r: scale2.width,
          t: 0,
          b: scale2.height - scale2.paddingTop
        };
        var furthestAngles = {};
        var i, textSize, pointPosition;
        scale2.ctx.font = plFont.string;
        scale2._pointLabelSizes = [];
        var valueCount = scale2.chart.data.labels.length;
        for (i = 0; i < valueCount; i++) {
          pointPosition = scale2.getPointPosition(i, scale2.drawingArea + 5);
          textSize = measureLabelSize(scale2.ctx, plFont.lineHeight, scale2.pointLabels[i]);
          scale2._pointLabelSizes[i] = textSize;
          var angleRadians = scale2.getIndexAngle(i);
          var angle = helpers$1.toDegrees(angleRadians) % 360;
          var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
          var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
          if (hLimits.start < furthestLimits.l) {
            furthestLimits.l = hLimits.start;
            furthestAngles.l = angleRadians;
          }
          if (hLimits.end > furthestLimits.r) {
            furthestLimits.r = hLimits.end;
            furthestAngles.r = angleRadians;
          }
          if (vLimits.start < furthestLimits.t) {
            furthestLimits.t = vLimits.start;
            furthestAngles.t = angleRadians;
          }
          if (vLimits.end > furthestLimits.b) {
            furthestLimits.b = vLimits.end;
            furthestAngles.b = angleRadians;
          }
        }
        scale2.setReductions(scale2.drawingArea, furthestLimits, furthestAngles);
      }
      function getTextAlignForAngle(angle) {
        if (angle === 0 || angle === 180) {
          return "center";
        } else if (angle < 180) {
          return "left";
        }
        return "right";
      }
      function fillText(ctx, text, position, lineHeight) {
        var y = position.y + lineHeight / 2;
        var i, ilen;
        if (helpers$1.isArray(text)) {
          for (i = 0, ilen = text.length; i < ilen; ++i) {
            ctx.fillText(text[i], position.x, y);
            y += lineHeight;
          }
        } else {
          ctx.fillText(text, position.x, y);
        }
      }
      function adjustPointPositionForLabelHeight(angle, textSize, position) {
        if (angle === 90 || angle === 270) {
          position.y -= textSize.h / 2;
        } else if (angle > 270 || angle < 90) {
          position.y -= textSize.h;
        }
      }
      function drawPointLabels(scale2) {
        var ctx = scale2.ctx;
        var opts = scale2.options;
        var pointLabelOpts = opts.pointLabels;
        var tickBackdropHeight = getTickBackdropHeight(opts);
        var outerDistance = scale2.getDistanceFromCenterForValue(opts.ticks.reverse ? scale2.min : scale2.max);
        var plFont = helpers$1.options._parseFont(pointLabelOpts);
        ctx.save();
        ctx.font = plFont.string;
        ctx.textBaseline = "middle";
        for (var i = scale2.chart.data.labels.length - 1; i >= 0; i--) {
          var extra = i === 0 ? tickBackdropHeight / 2 : 0;
          var pointLabelPosition = scale2.getPointPosition(i, outerDistance + extra + 5);
          var pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i, core_defaults.global.defaultFontColor);
          ctx.fillStyle = pointLabelFontColor;
          var angleRadians = scale2.getIndexAngle(i);
          var angle = helpers$1.toDegrees(angleRadians);
          ctx.textAlign = getTextAlignForAngle(angle);
          adjustPointPositionForLabelHeight(angle, scale2._pointLabelSizes[i], pointLabelPosition);
          fillText(ctx, scale2.pointLabels[i], pointLabelPosition, plFont.lineHeight);
        }
        ctx.restore();
      }
      function drawRadiusLine(scale2, gridLineOpts, radius, index) {
        var ctx = scale2.ctx;
        var circular = gridLineOpts.circular;
        var valueCount = scale2.chart.data.labels.length;
        var lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1);
        var lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1);
        var pointPosition;
        if (!circular && !valueCount || !lineColor || !lineWidth) {
          return;
        }
        ctx.save();
        ctx.strokeStyle = lineColor;
        ctx.lineWidth = lineWidth;
        if (ctx.setLineDash) {
          ctx.setLineDash(gridLineOpts.borderDash || []);
          ctx.lineDashOffset = gridLineOpts.borderDashOffset || 0;
        }
        ctx.beginPath();
        if (circular) {
          ctx.arc(scale2.xCenter, scale2.yCenter, radius, 0, Math.PI * 2);
        } else {
          pointPosition = scale2.getPointPosition(0, radius);
          ctx.moveTo(pointPosition.x, pointPosition.y);
          for (var i = 1; i < valueCount; i++) {
            pointPosition = scale2.getPointPosition(i, radius);
            ctx.lineTo(pointPosition.x, pointPosition.y);
          }
        }
        ctx.closePath();
        ctx.stroke();
        ctx.restore();
      }
      function numberOrZero(param) {
        return helpers$1.isNumber(param) ? param : 0;
      }
      var scale_radialLinear = scale_linearbase.extend({
        setDimensions: function() {
          var me = this;
          me.width = me.maxWidth;
          me.height = me.maxHeight;
          me.paddingTop = getTickBackdropHeight(me.options) / 2;
          me.xCenter = Math.floor(me.width / 2);
          me.yCenter = Math.floor((me.height - me.paddingTop) / 2);
          me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;
        },
        determineDataLimits: function() {
          var me = this;
          var chart = me.chart;
          var min2 = Number.POSITIVE_INFINITY;
          var max2 = Number.NEGATIVE_INFINITY;
          helpers$1.each(chart.data.datasets, function(dataset, datasetIndex) {
            if (chart.isDatasetVisible(datasetIndex)) {
              var meta = chart.getDatasetMeta(datasetIndex);
              helpers$1.each(dataset.data, function(rawValue, index) {
                var value = +me.getRightValue(rawValue);
                if (isNaN(value) || meta.data[index].hidden) {
                  return;
                }
                min2 = Math.min(value, min2);
                max2 = Math.max(value, max2);
              });
            }
          });
          me.min = min2 === Number.POSITIVE_INFINITY ? 0 : min2;
          me.max = max2 === Number.NEGATIVE_INFINITY ? 0 : max2;
          me.handleTickRangeOptions();
        },
        // Returns the maximum number of ticks based on the scale dimension
        _computeTickLimit: function() {
          return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
        },
        convertTicksToLabels: function() {
          var me = this;
          scale_linearbase.prototype.convertTicksToLabels.call(me);
          me.pointLabels = me.chart.data.labels.map(function() {
            var label = helpers$1.callback(me.options.pointLabels.callback, arguments, me);
            return label || label === 0 ? label : "";
          });
        },
        getLabelForIndex: function(index, datasetIndex) {
          return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
        },
        fit: function() {
          var me = this;
          var opts = me.options;
          if (opts.display && opts.pointLabels.display) {
            fitWithPointLabels(me);
          } else {
            me.setCenterPoint(0, 0, 0, 0);
          }
        },
        /**
         * Set radius reductions and determine new radius and center point
         * @private
         */
        setReductions: function(largestPossibleRadius, furthestLimits, furthestAngles) {
          var me = this;
          var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
          var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
          var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
          var radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);
          radiusReductionLeft = numberOrZero(radiusReductionLeft);
          radiusReductionRight = numberOrZero(radiusReductionRight);
          radiusReductionTop = numberOrZero(radiusReductionTop);
          radiusReductionBottom = numberOrZero(radiusReductionBottom);
          me.drawingArea = Math.min(
            Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),
            Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2)
          );
          me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
        },
        setCenterPoint: function(leftMovement, rightMovement, topMovement, bottomMovement) {
          var me = this;
          var maxRight = me.width - rightMovement - me.drawingArea;
          var maxLeft = leftMovement + me.drawingArea;
          var maxTop = topMovement + me.drawingArea;
          var maxBottom = me.height - me.paddingTop - bottomMovement - me.drawingArea;
          me.xCenter = Math.floor((maxLeft + maxRight) / 2 + me.left);
          me.yCenter = Math.floor((maxTop + maxBottom) / 2 + me.top + me.paddingTop);
        },
        getIndexAngle: function(index) {
          var chart = this.chart;
          var angleMultiplier = 360 / chart.data.labels.length;
          var options2 = chart.options || {};
          var startAngle = options2.startAngle || 0;
          var angle = (index * angleMultiplier + startAngle) % 360;
          return (angle < 0 ? angle + 360 : angle) * Math.PI * 2 / 360;
        },
        getDistanceFromCenterForValue: function(value) {
          var me = this;
          if (helpers$1.isNullOrUndef(value)) {
            return NaN;
          }
          var scalingFactor = me.drawingArea / (me.max - me.min);
          if (me.options.ticks.reverse) {
            return (me.max - value) * scalingFactor;
          }
          return (value - me.min) * scalingFactor;
        },
        getPointPosition: function(index, distanceFromCenter) {
          var me = this;
          var thisAngle = me.getIndexAngle(index) - Math.PI / 2;
          return {
            x: Math.cos(thisAngle) * distanceFromCenter + me.xCenter,
            y: Math.sin(thisAngle) * distanceFromCenter + me.yCenter
          };
        },
        getPointPositionForValue: function(index, value) {
          return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
        },
        getBasePosition: function(index) {
          var me = this;
          var min2 = me.min;
          var max2 = me.max;
          return me.getPointPositionForValue(
            index || 0,
            me.beginAtZero ? 0 : min2 < 0 && max2 < 0 ? max2 : min2 > 0 && max2 > 0 ? min2 : 0
          );
        },
        /**
         * @private
         */
        _drawGrid: function() {
          var me = this;
          var ctx = me.ctx;
          var opts = me.options;
          var gridLineOpts = opts.gridLines;
          var angleLineOpts = opts.angleLines;
          var lineWidth = valueOrDefault$c(angleLineOpts.lineWidth, gridLineOpts.lineWidth);
          var lineColor = valueOrDefault$c(angleLineOpts.color, gridLineOpts.color);
          var i, offset2, position;
          if (opts.pointLabels.display) {
            drawPointLabels(me);
          }
          if (gridLineOpts.display) {
            helpers$1.each(me.ticks, function(label, index) {
              if (index !== 0) {
                offset2 = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
                drawRadiusLine(me, gridLineOpts, offset2, index);
              }
            });
          }
          if (angleLineOpts.display && lineWidth && lineColor) {
            ctx.save();
            ctx.lineWidth = lineWidth;
            ctx.strokeStyle = lineColor;
            if (ctx.setLineDash) {
              ctx.setLineDash(resolve$4([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));
              ctx.lineDashOffset = resolve$4([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0]);
            }
            for (i = me.chart.data.labels.length - 1; i >= 0; i--) {
              offset2 = me.getDistanceFromCenterForValue(opts.ticks.reverse ? me.min : me.max);
              position = me.getPointPosition(i, offset2);
              ctx.beginPath();
              ctx.moveTo(me.xCenter, me.yCenter);
              ctx.lineTo(position.x, position.y);
              ctx.stroke();
            }
            ctx.restore();
          }
        },
        /**
         * @private
         */
        _drawLabels: function() {
          var me = this;
          var ctx = me.ctx;
          var opts = me.options;
          var tickOpts = opts.ticks;
          if (!tickOpts.display) {
            return;
          }
          var startAngle = me.getIndexAngle(0);
          var tickFont = helpers$1.options._parseFont(tickOpts);
          var tickFontColor = valueOrDefault$c(tickOpts.fontColor, core_defaults.global.defaultFontColor);
          var offset2, width;
          ctx.save();
          ctx.font = tickFont.string;
          ctx.translate(me.xCenter, me.yCenter);
          ctx.rotate(startAngle);
          ctx.textAlign = "center";
          ctx.textBaseline = "middle";
          helpers$1.each(me.ticks, function(label, index) {
            if (index === 0 && !tickOpts.reverse) {
              return;
            }
            offset2 = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
            if (tickOpts.showLabelBackdrop) {
              width = ctx.measureText(label).width;
              ctx.fillStyle = tickOpts.backdropColor;
              ctx.fillRect(
                -width / 2 - tickOpts.backdropPaddingX,
                -offset2 - tickFont.size / 2 - tickOpts.backdropPaddingY,
                width + tickOpts.backdropPaddingX * 2,
                tickFont.size + tickOpts.backdropPaddingY * 2
              );
            }
            ctx.fillStyle = tickFontColor;
            ctx.fillText(label, 0, -offset2);
          });
          ctx.restore();
        },
        /**
         * @private
         */
        _drawTitle: helpers$1.noop
      });
      var _defaults$3 = defaultConfig$3;
      scale_radialLinear._defaults = _defaults$3;
      var deprecated$1 = helpers$1._deprecated;
      var resolve$5 = helpers$1.options.resolve;
      var valueOrDefault$d = helpers$1.valueOrDefault;
      var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
      var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
      var INTERVALS = {
        millisecond: {
          common: true,
          size: 1,
          steps: 1e3
        },
        second: {
          common: true,
          size: 1e3,
          steps: 60
        },
        minute: {
          common: true,
          size: 6e4,
          steps: 60
        },
        hour: {
          common: true,
          size: 36e5,
          steps: 24
        },
        day: {
          common: true,
          size: 864e5,
          steps: 30
        },
        week: {
          common: false,
          size: 6048e5,
          steps: 4
        },
        month: {
          common: true,
          size: 2628e6,
          steps: 12
        },
        quarter: {
          common: false,
          size: 7884e6,
          steps: 4
        },
        year: {
          common: true,
          size: 3154e7
        }
      };
      var UNITS = Object.keys(INTERVALS);
      function sorter(a, b) {
        return a - b;
      }
      function arrayUnique(items) {
        var hash = {};
        var out = [];
        var i, ilen, item;
        for (i = 0, ilen = items.length; i < ilen; ++i) {
          item = items[i];
          if (!hash[item]) {
            hash[item] = true;
            out.push(item);
          }
        }
        return out;
      }
      function getMin(options2) {
        return helpers$1.valueOrDefault(options2.time.min, options2.ticks.min);
      }
      function getMax(options2) {
        return helpers$1.valueOrDefault(options2.time.max, options2.ticks.max);
      }
      function buildLookupTable(timestamps, min2, max2, distribution) {
        if (distribution === "linear" || !timestamps.length) {
          return [
            { time: min2, pos: 0 },
            { time: max2, pos: 1 }
          ];
        }
        var table = [];
        var items = [min2];
        var i, ilen, prev, curr, next;
        for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
          curr = timestamps[i];
          if (curr > min2 && curr < max2) {
            items.push(curr);
          }
        }
        items.push(max2);
        for (i = 0, ilen = items.length; i < ilen; ++i) {
          next = items[i + 1];
          prev = items[i - 1];
          curr = items[i];
          if (prev === void 0 || next === void 0 || Math.round((next + prev) / 2) !== curr) {
            table.push({ time: curr, pos: i / (ilen - 1) });
          }
        }
        return table;
      }
      function lookup(table, key, value) {
        var lo = 0;
        var hi = table.length - 1;
        var mid, i0, i1;
        while (lo >= 0 && lo <= hi) {
          mid = lo + hi >> 1;
          i0 = table[mid - 1] || null;
          i1 = table[mid];
          if (!i0) {
            return { lo: null, hi: i1 };
          } else if (i1[key] < value) {
            lo = mid + 1;
          } else if (i0[key] > value) {
            hi = mid - 1;
          } else {
            return { lo: i0, hi: i1 };
          }
        }
        return { lo: i1, hi: null };
      }
      function interpolate$1(table, skey, sval, tkey) {
        var range = lookup(table, skey, sval);
        var prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;
        var next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;
        var span = next[skey] - prev[skey];
        var ratio = span ? (sval - prev[skey]) / span : 0;
        var offset2 = (next[tkey] - prev[tkey]) * ratio;
        return prev[tkey] + offset2;
      }
      function toTimestamp(scale2, input) {
        var adapter = scale2._adapter;
        var options2 = scale2.options.time;
        var parser = options2.parser;
        var format2 = parser || options2.format;
        var value = input;
        if (typeof parser === "function") {
          value = parser(value);
        }
        if (!helpers$1.isFinite(value)) {
          value = typeof format2 === "string" ? adapter.parse(value, format2) : adapter.parse(value);
        }
        if (value !== null) {
          return +value;
        }
        if (!parser && typeof format2 === "function") {
          value = format2(input);
          if (!helpers$1.isFinite(value)) {
            value = adapter.parse(value);
          }
        }
        return value;
      }
      function parse(scale2, input) {
        if (helpers$1.isNullOrUndef(input)) {
          return null;
        }
        var options2 = scale2.options.time;
        var value = toTimestamp(scale2, scale2.getRightValue(input));
        if (value === null) {
          return value;
        }
        if (options2.round) {
          value = +scale2._adapter.startOf(value, options2.round);
        }
        return value;
      }
      function determineUnitForAutoTicks(minUnit, min2, max2, capacity) {
        var ilen = UNITS.length;
        var i, interval, factor;
        for (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
          interval = INTERVALS[UNITS[i]];
          factor = interval.steps ? interval.steps : MAX_INTEGER;
          if (interval.common && Math.ceil((max2 - min2) / (factor * interval.size)) <= capacity) {
            return UNITS[i];
          }
        }
        return UNITS[ilen - 1];
      }
      function determineUnitForFormatting(scale2, numTicks, minUnit, min2, max2) {
        var i, unit;
        for (i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {
          unit = UNITS[i];
          if (INTERVALS[unit].common && scale2._adapter.diff(max2, min2, unit) >= numTicks - 1) {
            return unit;
          }
        }
        return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
      }
      function determineMajorUnit(unit) {
        for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
          if (INTERVALS[UNITS[i]].common) {
            return UNITS[i];
          }
        }
      }
      function generate(scale2, min2, max2, capacity) {
        var adapter = scale2._adapter;
        var options2 = scale2.options;
        var timeOpts = options2.time;
        var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min2, max2, capacity);
        var stepSize = resolve$5([timeOpts.stepSize, timeOpts.unitStepSize, 1]);
        var weekday = minor === "week" ? timeOpts.isoWeekday : false;
        var first = min2;
        var ticks = [];
        var time;
        if (weekday) {
          first = +adapter.startOf(first, "isoWeek", weekday);
        }
        first = +adapter.startOf(first, weekday ? "day" : minor);
        if (adapter.diff(max2, min2, minor) > 1e5 * stepSize) {
          throw min2 + " and " + max2 + " are too far apart with stepSize of " + stepSize + " " + minor;
        }
        for (time = first; time < max2; time = +adapter.add(time, stepSize, minor)) {
          ticks.push(time);
        }
        if (time === max2 || options2.bounds === "ticks") {
          ticks.push(time);
        }
        return ticks;
      }
      function computeOffsets(table, ticks, min2, max2, options2) {
        var start = 0;
        var end = 0;
        var first, last;
        if (options2.offset && ticks.length) {
          first = interpolate$1(table, "time", ticks[0], "pos");
          if (ticks.length === 1) {
            start = 1 - first;
          } else {
            start = (interpolate$1(table, "time", ticks[1], "pos") - first) / 2;
          }
          last = interpolate$1(table, "time", ticks[ticks.length - 1], "pos");
          if (ticks.length === 1) {
            end = last;
          } else {
            end = (last - interpolate$1(table, "time", ticks[ticks.length - 2], "pos")) / 2;
          }
        }
        return { start, end, factor: 1 / (start + 1 + end) };
      }
      function setMajorTicks(scale2, ticks, map2, majorUnit) {
        var adapter = scale2._adapter;
        var first = +adapter.startOf(ticks[0].value, majorUnit);
        var last = ticks[ticks.length - 1].value;
        var major, index;
        for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
          index = map2[major];
          if (index >= 0) {
            ticks[index].major = true;
          }
        }
        return ticks;
      }
      function ticksFromTimestamps(scale2, values, majorUnit) {
        var ticks = [];
        var map2 = {};
        var ilen = values.length;
        var i, value;
        for (i = 0; i < ilen; ++i) {
          value = values[i];
          map2[value] = i;
          ticks.push({
            value,
            major: false
          });
        }
        return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale2, ticks, map2, majorUnit);
      }
      var defaultConfig$4 = {
        position: "bottom",
        /**
         * Data distribution along the scale:
         * - 'linear': data are spread according to their time (distances can vary),
         * - 'series': data are spread at the same distance from each other.
         * @see https://github.com/chartjs/Chart.js/pull/4507
         * @since 2.7.0
         */
        distribution: "linear",
        /**
         * Scale boundary strategy (bypassed by min/max time options)
         * - `data`: make sure data are fully visible, ticks outside are removed
         * - `ticks`: make sure ticks are fully visible, data outside are truncated
         * @see https://github.com/chartjs/Chart.js/pull/4556
         * @since 2.7.0
         */
        bounds: "data",
        adapters: {},
        time: {
          parser: false,
          // false == a pattern string from https://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment
          unit: false,
          // false == automatic or override with week, month, year, etc.
          round: false,
          // none, or override with week, month, year, etc.
          displayFormat: false,
          // DEPRECATED
          isoWeekday: false,
          // override week start day - see https://momentjs.com/docs/#/get-set/iso-weekday/
          minUnit: "millisecond",
          displayFormats: {}
        },
        ticks: {
          autoSkip: false,
          /**
           * Ticks generation input values:
           * - 'auto': generates "optimal" ticks based on scale size and time options.
           * - 'data': generates ticks from data (including labels from data {t|x|y} objects).
           * - 'labels': generates ticks from user given `data.labels` values ONLY.
           * @see https://github.com/chartjs/Chart.js/pull/4507
           * @since 2.7.0
           */
          source: "auto",
          major: {
            enabled: false
          }
        }
      };
      var scale_time = core_scale.extend({
        initialize: function() {
          this.mergeTicksOptions();
          core_scale.prototype.initialize.call(this);
        },
        update: function() {
          var me = this;
          var options2 = me.options;
          var time = options2.time || (options2.time = {});
          var adapter = me._adapter = new core_adapters._date(options2.adapters.date);
          deprecated$1("time scale", time.format, "time.format", "time.parser");
          deprecated$1("time scale", time.min, "time.min", "ticks.min");
          deprecated$1("time scale", time.max, "time.max", "ticks.max");
          helpers$1.mergeIf(time.displayFormats, adapter.formats());
          return core_scale.prototype.update.apply(me, arguments);
        },
        /**
         * Allows data to be referenced via 't' attribute
         */
        getRightValue: function(rawValue) {
          if (rawValue && rawValue.t !== void 0) {
            rawValue = rawValue.t;
          }
          return core_scale.prototype.getRightValue.call(this, rawValue);
        },
        determineDataLimits: function() {
          var me = this;
          var chart = me.chart;
          var adapter = me._adapter;
          var options2 = me.options;
          var unit = options2.time.unit || "day";
          var min2 = MAX_INTEGER;
          var max2 = MIN_INTEGER;
          var timestamps = [];
          var datasets = [];
          var labels = [];
          var i, j, ilen, jlen, data, timestamp, labelsAdded;
          var dataLabels = me._getLabels();
          for (i = 0, ilen = dataLabels.length; i < ilen; ++i) {
            labels.push(parse(me, dataLabels[i]));
          }
          for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
            if (chart.isDatasetVisible(i)) {
              data = chart.data.datasets[i].data;
              if (helpers$1.isObject(data[0])) {
                datasets[i] = [];
                for (j = 0, jlen = data.length; j < jlen; ++j) {
                  timestamp = parse(me, data[j]);
                  timestamps.push(timestamp);
                  datasets[i][j] = timestamp;
                }
              } else {
                datasets[i] = labels.slice(0);
                if (!labelsAdded) {
                  timestamps = timestamps.concat(labels);
                  labelsAdded = true;
                }
              }
            } else {
              datasets[i] = [];
            }
          }
          if (labels.length) {
            min2 = Math.min(min2, labels[0]);
            max2 = Math.max(max2, labels[labels.length - 1]);
          }
          if (timestamps.length) {
            timestamps = ilen > 1 ? arrayUnique(timestamps).sort(sorter) : timestamps.sort(sorter);
            min2 = Math.min(min2, timestamps[0]);
            max2 = Math.max(max2, timestamps[timestamps.length - 1]);
          }
          min2 = parse(me, getMin(options2)) || min2;
          max2 = parse(me, getMax(options2)) || max2;
          min2 = min2 === MAX_INTEGER ? +adapter.startOf(Date.now(), unit) : min2;
          max2 = max2 === MIN_INTEGER ? +adapter.endOf(Date.now(), unit) + 1 : max2;
          me.min = Math.min(min2, max2);
          me.max = Math.max(min2 + 1, max2);
          me._table = [];
          me._timestamps = {
            data: timestamps,
            datasets,
            labels
          };
        },
        buildTicks: function() {
          var me = this;
          var min2 = me.min;
          var max2 = me.max;
          var options2 = me.options;
          var tickOpts = options2.ticks;
          var timeOpts = options2.time;
          var timestamps = me._timestamps;
          var ticks = [];
          var capacity = me.getLabelCapacity(min2);
          var source = tickOpts.source;
          var distribution = options2.distribution;
          var i, ilen, timestamp;
          if (source === "data" || source === "auto" && distribution === "series") {
            timestamps = timestamps.data;
          } else if (source === "labels") {
            timestamps = timestamps.labels;
          } else {
            timestamps = generate(me, min2, max2, capacity);
          }
          if (options2.bounds === "ticks" && timestamps.length) {
            min2 = timestamps[0];
            max2 = timestamps[timestamps.length - 1];
          }
          min2 = parse(me, getMin(options2)) || min2;
          max2 = parse(me, getMax(options2)) || max2;
          for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
            timestamp = timestamps[i];
            if (timestamp >= min2 && timestamp <= max2) {
              ticks.push(timestamp);
            }
          }
          me.min = min2;
          me.max = max2;
          me._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, me.min, me.max, capacity) : determineUnitForFormatting(me, ticks.length, timeOpts.minUnit, me.min, me.max));
          me._majorUnit = !tickOpts.major.enabled || me._unit === "year" ? void 0 : determineMajorUnit(me._unit);
          me._table = buildLookupTable(me._timestamps.data, min2, max2, distribution);
          me._offsets = computeOffsets(me._table, ticks, min2, max2, options2);
          if (tickOpts.reverse) {
            ticks.reverse();
          }
          return ticksFromTimestamps(me, ticks, me._majorUnit);
        },
        getLabelForIndex: function(index, datasetIndex) {
          var me = this;
          var adapter = me._adapter;
          var data = me.chart.data;
          var timeOpts = me.options.time;
          var label = data.labels && index < data.labels.length ? data.labels[index] : "";
          var value = data.datasets[datasetIndex].data[index];
          if (helpers$1.isObject(value)) {
            label = me.getRightValue(value);
          }
          if (timeOpts.tooltipFormat) {
            return adapter.format(toTimestamp(me, label), timeOpts.tooltipFormat);
          }
          if (typeof label === "string") {
            return label;
          }
          return adapter.format(toTimestamp(me, label), timeOpts.displayFormats.datetime);
        },
        /**
         * Function to format an individual tick mark
         * @private
         */
        tickFormatFunction: function(time, index, ticks, format2) {
          var me = this;
          var adapter = me._adapter;
          var options2 = me.options;
          var formats = options2.time.displayFormats;
          var minorFormat = formats[me._unit];
          var majorUnit = me._majorUnit;
          var majorFormat = formats[majorUnit];
          var tick = ticks[index];
          var tickOpts = options2.ticks;
          var major = majorUnit && majorFormat && tick && tick.major;
          var label = adapter.format(time, format2 ? format2 : major ? majorFormat : minorFormat);
          var nestedTickOpts = major ? tickOpts.major : tickOpts.minor;
          var formatter = resolve$5([
            nestedTickOpts.callback,
            nestedTickOpts.userCallback,
            tickOpts.callback,
            tickOpts.userCallback
          ]);
          return formatter ? formatter(label, index, ticks) : label;
        },
        convertTicksToLabels: function(ticks) {
          var labels = [];
          var i, ilen;
          for (i = 0, ilen = ticks.length; i < ilen; ++i) {
            labels.push(this.tickFormatFunction(ticks[i].value, i, ticks));
          }
          return labels;
        },
        /**
         * @private
         */
        getPixelForOffset: function(time) {
          var me = this;
          var offsets = me._offsets;
          var pos = interpolate$1(me._table, "time", time, "pos");
          return me.getPixelForDecimal((offsets.start + pos) * offsets.factor);
        },
        getPixelForValue: function(value, index, datasetIndex) {
          var me = this;
          var time = null;
          if (index !== void 0 && datasetIndex !== void 0) {
            time = me._timestamps.datasets[datasetIndex][index];
          }
          if (time === null) {
            time = parse(me, value);
          }
          if (time !== null) {
            return me.getPixelForOffset(time);
          }
        },
        getPixelForTick: function(index) {
          var ticks = this.getTicks();
          return index >= 0 && index < ticks.length ? this.getPixelForOffset(ticks[index].value) : null;
        },
        getValueForPixel: function(pixel) {
          var me = this;
          var offsets = me._offsets;
          var pos = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
          var time = interpolate$1(me._table, "pos", pos, "time");
          return me._adapter._create(time);
        },
        /**
         * @private
         */
        _getLabelSize: function(label) {
          var me = this;
          var ticksOpts = me.options.ticks;
          var tickLabelWidth = me.ctx.measureText(label).width;
          var angle = helpers$1.toRadians(me.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
          var cosRotation = Math.cos(angle);
          var sinRotation = Math.sin(angle);
          var tickFontSize = valueOrDefault$d(ticksOpts.fontSize, core_defaults.global.defaultFontSize);
          return {
            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
          };
        },
        /**
         * Crude approximation of what the label width might be
         * @private
         */
        getLabelWidth: function(label) {
          return this._getLabelSize(label).w;
        },
        /**
         * @private
         */
        getLabelCapacity: function(exampleTime) {
          var me = this;
          var timeOpts = me.options.time;
          var displayFormats = timeOpts.displayFormats;
          var format2 = displayFormats[timeOpts.unit] || displayFormats.millisecond;
          var exampleLabel = me.tickFormatFunction(exampleTime, 0, ticksFromTimestamps(me, [exampleTime], me._majorUnit), format2);
          var size = me._getLabelSize(exampleLabel);
          var capacity = Math.floor(me.isHorizontal() ? me.width / size.w : me.height / size.h);
          if (me.options.offset) {
            capacity--;
          }
          return capacity > 0 ? capacity : 1;
        }
      });
      var _defaults$4 = defaultConfig$4;
      scale_time._defaults = _defaults$4;
      var scales = {
        category: scale_category,
        linear: scale_linear,
        logarithmic: scale_logarithmic,
        radialLinear: scale_radialLinear,
        time: scale_time
      };
      var FORMATS = {
        datetime: "MMM D, YYYY, h:mm:ss a",
        millisecond: "h:mm:ss.SSS a",
        second: "h:mm:ss a",
        minute: "h:mm a",
        hour: "hA",
        day: "MMM D",
        week: "ll",
        month: "MMM YYYY",
        quarter: "[Q]Q - YYYY",
        year: "YYYY"
      };
      core_adapters._date.override(typeof moment === "function" ? {
        _id: "moment",
        // DEBUG ONLY
        formats: function() {
          return FORMATS;
        },
        parse: function(value, format2) {
          if (typeof value === "string" && typeof format2 === "string") {
            value = moment(value, format2);
          } else if (!(value instanceof moment)) {
            value = moment(value);
          }
          return value.isValid() ? value.valueOf() : null;
        },
        format: function(time, format2) {
          return moment(time).format(format2);
        },
        add: function(time, amount, unit) {
          return moment(time).add(amount, unit).valueOf();
        },
        diff: function(max2, min2, unit) {
          return moment(max2).diff(moment(min2), unit);
        },
        startOf: function(time, unit, weekday) {
          time = moment(time);
          if (unit === "isoWeek") {
            return time.isoWeekday(weekday).valueOf();
          }
          return time.startOf(unit).valueOf();
        },
        endOf: function(time, unit) {
          return moment(time).endOf(unit).valueOf();
        },
        // DEPRECATIONS
        /**
         * Provided for backward compatibility with scale.getValueForPixel().
         * @deprecated since version 2.8.0
         * @todo remove at version 3
         * @private
         */
        _create: function(time) {
          return moment(time);
        }
      } : {});
      core_defaults._set("global", {
        plugins: {
          filler: {
            propagate: true
          }
        }
      });
      var mappers = {
        dataset: function(source) {
          var index = source.fill;
          var chart = source.chart;
          var meta = chart.getDatasetMeta(index);
          var visible = meta && chart.isDatasetVisible(index);
          var points = visible && meta.dataset._children || [];
          var length = points.length || 0;
          return !length ? null : function(point, i) {
            return i < length && points[i]._view || null;
          };
        },
        boundary: function(source) {
          var boundary = source.boundary;
          var x = boundary ? boundary.x : null;
          var y = boundary ? boundary.y : null;
          if (helpers$1.isArray(boundary)) {
            return function(point, i) {
              return boundary[i];
            };
          }
          return function(point) {
            return {
              x: x === null ? point.x : x,
              y: y === null ? point.y : y
            };
          };
        }
      };
      function decodeFill(el, index, count) {
        var model = el._model || {};
        var fill = model.fill;
        var target;
        if (fill === void 0) {
          fill = !!model.backgroundColor;
        }
        if (fill === false || fill === null) {
          return false;
        }
        if (fill === true) {
          return "origin";
        }
        target = parseFloat(fill, 10);
        if (isFinite(target) && Math.floor(target) === target) {
          if (fill[0] === "-" || fill[0] === "+") {
            target = index + target;
          }
          if (target === index || target < 0 || target >= count) {
            return false;
          }
          return target;
        }
        switch (fill) {
          case "bottom":
            return "start";
          case "top":
            return "end";
          case "zero":
            return "origin";
          case "origin":
          case "start":
          case "end":
            return fill;
          default:
            return false;
        }
      }
      function computeLinearBoundary(source) {
        var model = source.el._model || {};
        var scale2 = source.el._scale || {};
        var fill = source.fill;
        var target = null;
        var horizontal;
        if (isFinite(fill)) {
          return null;
        }
        if (fill === "start") {
          target = model.scaleBottom === void 0 ? scale2.bottom : model.scaleBottom;
        } else if (fill === "end") {
          target = model.scaleTop === void 0 ? scale2.top : model.scaleTop;
        } else if (model.scaleZero !== void 0) {
          target = model.scaleZero;
        } else if (scale2.getBasePixel) {
          target = scale2.getBasePixel();
        }
        if (target !== void 0 && target !== null) {
          if (target.x !== void 0 && target.y !== void 0) {
            return target;
          }
          if (helpers$1.isFinite(target)) {
            horizontal = scale2.isHorizontal();
            return {
              x: horizontal ? target : null,
              y: horizontal ? null : target
            };
          }
        }
        return null;
      }
      function computeCircularBoundary(source) {
        var scale2 = source.el._scale;
        var options2 = scale2.options;
        var length = scale2.chart.data.labels.length;
        var fill = source.fill;
        var target = [];
        var start, end, center, i, point;
        if (!length) {
          return null;
        }
        start = options2.ticks.reverse ? scale2.max : scale2.min;
        end = options2.ticks.reverse ? scale2.min : scale2.max;
        center = scale2.getPointPositionForValue(0, start);
        for (i = 0; i < length; ++i) {
          point = fill === "start" || fill === "end" ? scale2.getPointPositionForValue(i, fill === "start" ? start : end) : scale2.getBasePosition(i);
          if (options2.gridLines.circular) {
            point.cx = center.x;
            point.cy = center.y;
            point.angle = scale2.getIndexAngle(i) - Math.PI / 2;
          }
          target.push(point);
        }
        return target;
      }
      function computeBoundary(source) {
        var scale2 = source.el._scale || {};
        if (scale2.getPointPositionForValue) {
          return computeCircularBoundary(source);
        }
        return computeLinearBoundary(source);
      }
      function resolveTarget(sources, index, propagate) {
        var source = sources[index];
        var fill = source.fill;
        var visited = [index];
        var target;
        if (!propagate) {
          return fill;
        }
        while (fill !== false && visited.indexOf(fill) === -1) {
          if (!isFinite(fill)) {
            return fill;
          }
          target = sources[fill];
          if (!target) {
            return false;
          }
          if (target.visible) {
            return fill;
          }
          visited.push(fill);
          fill = target.fill;
        }
        return false;
      }
      function createMapper(source) {
        var fill = source.fill;
        var type = "dataset";
        if (fill === false) {
          return null;
        }
        if (!isFinite(fill)) {
          type = "boundary";
        }
        return mappers[type](source);
      }
      function isDrawable(point) {
        return point && !point.skip;
      }
      function drawArea(ctx, curve0, curve1, len0, len1) {
        var i, cx, cy, r;
        if (!len0 || !len1) {
          return;
        }
        ctx.moveTo(curve0[0].x, curve0[0].y);
        for (i = 1; i < len0; ++i) {
          helpers$1.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);
        }
        if (curve1[0].angle !== void 0) {
          cx = curve1[0].cx;
          cy = curve1[0].cy;
          r = Math.sqrt(Math.pow(curve1[0].x - cx, 2) + Math.pow(curve1[0].y - cy, 2));
          for (i = len1 - 1; i > 0; --i) {
            ctx.arc(cx, cy, r, curve1[i].angle, curve1[i - 1].angle, true);
          }
          return;
        }
        ctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y);
        for (i = len1 - 1; i > 0; --i) {
          helpers$1.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);
        }
      }
      function doFill(ctx, points, mapper, view, color, loop) {
        var count = points.length;
        var span = view.spanGaps;
        var curve0 = [];
        var curve1 = [];
        var len0 = 0;
        var len1 = 0;
        var i, ilen, index, p0, p1, d0, d1, loopOffset;
        ctx.beginPath();
        for (i = 0, ilen = count; i < ilen; ++i) {
          index = i % count;
          p0 = points[index]._view;
          p1 = mapper(p0, index, view);
          d0 = isDrawable(p0);
          d1 = isDrawable(p1);
          if (loop && loopOffset === void 0 && d0) {
            loopOffset = i + 1;
            ilen = count + loopOffset;
          }
          if (d0 && d1) {
            len0 = curve0.push(p0);
            len1 = curve1.push(p1);
          } else if (len0 && len1) {
            if (!span) {
              drawArea(ctx, curve0, curve1, len0, len1);
              len0 = len1 = 0;
              curve0 = [];
              curve1 = [];
            } else {
              if (d0) {
                curve0.push(p0);
              }
              if (d1) {
                curve1.push(p1);
              }
            }
          }
        }
        drawArea(ctx, curve0, curve1, len0, len1);
        ctx.closePath();
        ctx.fillStyle = color;
        ctx.fill();
      }
      var plugin_filler = {
        id: "filler",
        afterDatasetsUpdate: function(chart, options2) {
          var count = (chart.data.datasets || []).length;
          var propagate = options2.propagate;
          var sources = [];
          var meta, i, el, source;
          for (i = 0; i < count; ++i) {
            meta = chart.getDatasetMeta(i);
            el = meta.dataset;
            source = null;
            if (el && el._model && el instanceof elements.Line) {
              source = {
                visible: chart.isDatasetVisible(i),
                fill: decodeFill(el, i, count),
                chart,
                el
              };
            }
            meta.$filler = source;
            sources.push(source);
          }
          for (i = 0; i < count; ++i) {
            source = sources[i];
            if (!source) {
              continue;
            }
            source.fill = resolveTarget(sources, i, propagate);
            source.boundary = computeBoundary(source);
            source.mapper = createMapper(source);
          }
        },
        beforeDatasetsDraw: function(chart) {
          var metasets = chart._getSortedVisibleDatasetMetas();
          var ctx = chart.ctx;
          var meta, i, el, view, points, mapper, color;
          for (i = metasets.length - 1; i >= 0; --i) {
            meta = metasets[i].$filler;
            if (!meta || !meta.visible) {
              continue;
            }
            el = meta.el;
            view = el._view;
            points = el._children || [];
            mapper = meta.mapper;
            color = view.backgroundColor || core_defaults.global.defaultColor;
            if (mapper && color && points.length) {
              helpers$1.canvas.clipArea(ctx, chart.chartArea);
              doFill(ctx, points, mapper, view, color, el._loop);
              helpers$1.canvas.unclipArea(ctx);
            }
          }
        }
      };
      var getRtlHelper$1 = helpers$1.rtl.getRtlAdapter;
      var noop$1 = helpers$1.noop;
      var valueOrDefault$e = helpers$1.valueOrDefault;
      core_defaults._set("global", {
        legend: {
          display: true,
          position: "top",
          align: "center",
          fullWidth: true,
          reverse: false,
          weight: 1e3,
          // a callback that will handle
          onClick: function(e, legendItem) {
            var index = legendItem.datasetIndex;
            var ci = this.chart;
            var meta = ci.getDatasetMeta(index);
            meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;
            ci.update();
          },
          onHover: null,
          onLeave: null,
          labels: {
            boxWidth: 40,
            padding: 10,
            // Generates labels shown in the legend
            // Valid properties to return:
            // text : text to display
            // fillStyle : fill of coloured box
            // strokeStyle: stroke of coloured box
            // hidden : if this legend item refers to a hidden item
            // lineCap : cap style for line
            // lineDash
            // lineDashOffset :
            // lineJoin :
            // lineWidth :
            generateLabels: function(chart) {
              var datasets = chart.data.datasets;
              var options2 = chart.options.legend || {};
              var usePointStyle = options2.labels && options2.labels.usePointStyle;
              return chart._getSortedDatasetMetas().map(function(meta) {
                var style = meta.controller.getStyle(usePointStyle ? 0 : void 0);
                return {
                  text: datasets[meta.index].label,
                  fillStyle: style.backgroundColor,
                  hidden: !chart.isDatasetVisible(meta.index),
                  lineCap: style.borderCapStyle,
                  lineDash: style.borderDash,
                  lineDashOffset: style.borderDashOffset,
                  lineJoin: style.borderJoinStyle,
                  lineWidth: style.borderWidth,
                  strokeStyle: style.borderColor,
                  pointStyle: style.pointStyle,
                  rotation: style.rotation,
                  // Below is extra data used for toggling the datasets
                  datasetIndex: meta.index
                };
              }, this);
            }
          }
        },
        legendCallback: function(chart) {
          var list = document.createElement("ul");
          var datasets = chart.data.datasets;
          var i, ilen, listItem, listItemSpan;
          list.setAttribute("class", chart.id + "-legend");
          for (i = 0, ilen = datasets.length; i < ilen; i++) {
            listItem = list.appendChild(document.createElement("li"));
            listItemSpan = listItem.appendChild(document.createElement("span"));
            listItemSpan.style.backgroundColor = datasets[i].backgroundColor;
            if (datasets[i].label) {
              listItem.appendChild(document.createTextNode(datasets[i].label));
            }
          }
          return list.outerHTML;
        }
      });
      function getBoxWidth(labelOpts, fontSize) {
        return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ? fontSize : labelOpts.boxWidth;
      }
      var Legend = core_element.extend({
        initialize: function(config) {
          var me = this;
          helpers$1.extend(me, config);
          me.legendHitBoxes = [];
          me._hoveredItem = null;
          me.doughnutMode = false;
        },
        // These methods are ordered by lifecycle. Utilities then follow.
        // Any function defined here is inherited by all legend types.
        // Any function can be extended by the legend type
        beforeUpdate: noop$1,
        update: function(maxWidth, maxHeight, margins) {
          var me = this;
          me.beforeUpdate();
          me.maxWidth = maxWidth;
          me.maxHeight = maxHeight;
          me.margins = margins;
          me.beforeSetDimensions();
          me.setDimensions();
          me.afterSetDimensions();
          me.beforeBuildLabels();
          me.buildLabels();
          me.afterBuildLabels();
          me.beforeFit();
          me.fit();
          me.afterFit();
          me.afterUpdate();
          return me.minSize;
        },
        afterUpdate: noop$1,
        //
        beforeSetDimensions: noop$1,
        setDimensions: function() {
          var me = this;
          if (me.isHorizontal()) {
            me.width = me.maxWidth;
            me.left = 0;
            me.right = me.width;
          } else {
            me.height = me.maxHeight;
            me.top = 0;
            me.bottom = me.height;
          }
          me.paddingLeft = 0;
          me.paddingTop = 0;
          me.paddingRight = 0;
          me.paddingBottom = 0;
          me.minSize = {
            width: 0,
            height: 0
          };
        },
        afterSetDimensions: noop$1,
        //
        beforeBuildLabels: noop$1,
        buildLabels: function() {
          var me = this;
          var labelOpts = me.options.labels || {};
          var legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];
          if (labelOpts.filter) {
            legendItems = legendItems.filter(function(item) {
              return labelOpts.filter(item, me.chart.data);
            });
          }
          if (me.options.reverse) {
            legendItems.reverse();
          }
          me.legendItems = legendItems;
        },
        afterBuildLabels: noop$1,
        //
        beforeFit: noop$1,
        fit: function() {
          var me = this;
          var opts = me.options;
          var labelOpts = opts.labels;
          var display = opts.display;
          var ctx = me.ctx;
          var labelFont = helpers$1.options._parseFont(labelOpts);
          var fontSize = labelFont.size;
          var hitboxes = me.legendHitBoxes = [];
          var minSize = me.minSize;
          var isHorizontal = me.isHorizontal();
          if (isHorizontal) {
            minSize.width = me.maxWidth;
            minSize.height = display ? 10 : 0;
          } else {
            minSize.width = display ? 10 : 0;
            minSize.height = me.maxHeight;
          }
          if (!display) {
            me.width = minSize.width = me.height = minSize.height = 0;
            return;
          }
          ctx.font = labelFont.string;
          if (isHorizontal) {
            var lineWidths = me.lineWidths = [0];
            var totalHeight = 0;
            ctx.textAlign = "left";
            ctx.textBaseline = "middle";
            helpers$1.each(me.legendItems, function(legendItem, i) {
              var boxWidth = getBoxWidth(labelOpts, fontSize);
              var width = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
              if (i === 0 || lineWidths[lineWidths.length - 1] + width + 2 * labelOpts.padding > minSize.width) {
                totalHeight += fontSize + labelOpts.padding;
                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
              }
              hitboxes[i] = {
                left: 0,
                top: 0,
                width,
                height: fontSize
              };
              lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
            });
            minSize.height += totalHeight;
          } else {
            var vPadding = labelOpts.padding;
            var columnWidths = me.columnWidths = [];
            var columnHeights = me.columnHeights = [];
            var totalWidth = labelOpts.padding;
            var currentColWidth = 0;
            var currentColHeight = 0;
            helpers$1.each(me.legendItems, function(legendItem, i) {
              var boxWidth = getBoxWidth(labelOpts, fontSize);
              var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
              if (i > 0 && currentColHeight + fontSize + 2 * vPadding > minSize.height) {
                totalWidth += currentColWidth + labelOpts.padding;
                columnWidths.push(currentColWidth);
                columnHeights.push(currentColHeight);
                currentColWidth = 0;
                currentColHeight = 0;
              }
              currentColWidth = Math.max(currentColWidth, itemWidth);
              currentColHeight += fontSize + vPadding;
              hitboxes[i] = {
                left: 0,
                top: 0,
                width: itemWidth,
                height: fontSize
              };
            });
            totalWidth += currentColWidth;
            columnWidths.push(currentColWidth);
            columnHeights.push(currentColHeight);
            minSize.width += totalWidth;
          }
          me.width = minSize.width;
          me.height = minSize.height;
        },
        afterFit: noop$1,
        // Shared Methods
        isHorizontal: function() {
          return this.options.position === "top" || this.options.position === "bottom";
        },
        // Actually draw the legend on the canvas
        draw: function() {
          var me = this;
          var opts = me.options;
          var labelOpts = opts.labels;
          var globalDefaults = core_defaults.global;
          var defaultColor2 = globalDefaults.defaultColor;
          var lineDefault = globalDefaults.elements.line;
          var legendHeight = me.height;
          var columnHeights = me.columnHeights;
          var legendWidth = me.width;
          var lineWidths = me.lineWidths;
          if (!opts.display) {
            return;
          }
          var rtlHelper = getRtlHelper$1(opts.rtl, me.left, me.minSize.width);
          var ctx = me.ctx;
          var fontColor = valueOrDefault$e(labelOpts.fontColor, globalDefaults.defaultFontColor);
          var labelFont = helpers$1.options._parseFont(labelOpts);
          var fontSize = labelFont.size;
          var cursor;
          ctx.textAlign = rtlHelper.textAlign("left");
          ctx.textBaseline = "middle";
          ctx.lineWidth = 0.5;
          ctx.strokeStyle = fontColor;
          ctx.fillStyle = fontColor;
          ctx.font = labelFont.string;
          var boxWidth = getBoxWidth(labelOpts, fontSize);
          var hitboxes = me.legendHitBoxes;
          var drawLegendBox = function(x, y, legendItem) {
            if (isNaN(boxWidth) || boxWidth <= 0) {
              return;
            }
            ctx.save();
            var lineWidth = valueOrDefault$e(legendItem.lineWidth, lineDefault.borderWidth);
            ctx.fillStyle = valueOrDefault$e(legendItem.fillStyle, defaultColor2);
            ctx.lineCap = valueOrDefault$e(legendItem.lineCap, lineDefault.borderCapStyle);
            ctx.lineDashOffset = valueOrDefault$e(legendItem.lineDashOffset, lineDefault.borderDashOffset);
            ctx.lineJoin = valueOrDefault$e(legendItem.lineJoin, lineDefault.borderJoinStyle);
            ctx.lineWidth = lineWidth;
            ctx.strokeStyle = valueOrDefault$e(legendItem.strokeStyle, defaultColor2);
            if (ctx.setLineDash) {
              ctx.setLineDash(valueOrDefault$e(legendItem.lineDash, lineDefault.borderDash));
            }
            if (labelOpts && labelOpts.usePointStyle) {
              var radius = boxWidth * Math.SQRT2 / 2;
              var centerX = rtlHelper.xPlus(x, boxWidth / 2);
              var centerY = y + fontSize / 2;
              helpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY, legendItem.rotation);
            } else {
              ctx.fillRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);
              if (lineWidth !== 0) {
                ctx.strokeRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);
              }
            }
            ctx.restore();
          };
          var fillText2 = function(x, y, legendItem, textWidth) {
            var halfFontSize = fontSize / 2;
            var xLeft = rtlHelper.xPlus(x, boxWidth + halfFontSize);
            var yMiddle = y + halfFontSize;
            ctx.fillText(legendItem.text, xLeft, yMiddle);
            if (legendItem.hidden) {
              ctx.beginPath();
              ctx.lineWidth = 2;
              ctx.moveTo(xLeft, yMiddle);
              ctx.lineTo(rtlHelper.xPlus(xLeft, textWidth), yMiddle);
              ctx.stroke();
            }
          };
          var alignmentOffset = function(dimension, blockSize) {
            switch (opts.align) {
              case "start":
                return labelOpts.padding;
              case "end":
                return dimension - blockSize;
              default:
                return (dimension - blockSize + labelOpts.padding) / 2;
            }
          };
          var isHorizontal = me.isHorizontal();
          if (isHorizontal) {
            cursor = {
              x: me.left + alignmentOffset(legendWidth, lineWidths[0]),
              y: me.top + labelOpts.padding,
              line: 0
            };
          } else {
            cursor = {
              x: me.left + labelOpts.padding,
              y: me.top + alignmentOffset(legendHeight, columnHeights[0]),
              line: 0
            };
          }
          helpers$1.rtl.overrideTextDirection(me.ctx, opts.textDirection);
          var itemHeight = fontSize + labelOpts.padding;
          helpers$1.each(me.legendItems, function(legendItem, i) {
            var textWidth = ctx.measureText(legendItem.text).width;
            var width = boxWidth + fontSize / 2 + textWidth;
            var x = cursor.x;
            var y = cursor.y;
            rtlHelper.setWidth(me.minSize.width);
            if (isHorizontal) {
              if (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {
                y = cursor.y += itemHeight;
                cursor.line++;
                x = cursor.x = me.left + alignmentOffset(legendWidth, lineWidths[cursor.line]);
              }
            } else if (i > 0 && y + itemHeight > me.top + me.minSize.height) {
              x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
              cursor.line++;
              y = cursor.y = me.top + alignmentOffset(legendHeight, columnHeights[cursor.line]);
            }
            var realX = rtlHelper.x(x);
            drawLegendBox(realX, y, legendItem);
            hitboxes[i].left = rtlHelper.leftForLtr(realX, hitboxes[i].width);
            hitboxes[i].top = y;
            fillText2(realX, y, legendItem, textWidth);
            if (isHorizontal) {
              cursor.x += width + labelOpts.padding;
            } else {
              cursor.y += itemHeight;
            }
          });
          helpers$1.rtl.restoreTextDirection(me.ctx, opts.textDirection);
        },
        /**
         * @private
         */
        _getLegendItemAt: function(x, y) {
          var me = this;
          var i, hitBox, lh;
          if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
            lh = me.legendHitBoxes;
            for (i = 0; i < lh.length; ++i) {
              hitBox = lh[i];
              if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
                return me.legendItems[i];
              }
            }
          }
          return null;
        },
        /**
         * Handle an event
         * @private
         * @param {IEvent} event - The event to handle
         */
        handleEvent: function(e) {
          var me = this;
          var opts = me.options;
          var type = e.type === "mouseup" ? "click" : e.type;
          var hoveredItem;
          if (type === "mousemove") {
            if (!opts.onHover && !opts.onLeave) {
              return;
            }
          } else if (type === "click") {
            if (!opts.onClick) {
              return;
            }
          } else {
            return;
          }
          hoveredItem = me._getLegendItemAt(e.x, e.y);
          if (type === "click") {
            if (hoveredItem && opts.onClick) {
              opts.onClick.call(me, e.native, hoveredItem);
            }
          } else {
            if (opts.onLeave && hoveredItem !== me._hoveredItem) {
              if (me._hoveredItem) {
                opts.onLeave.call(me, e.native, me._hoveredItem);
              }
              me._hoveredItem = hoveredItem;
            }
            if (opts.onHover && hoveredItem) {
              opts.onHover.call(me, e.native, hoveredItem);
            }
          }
        }
      });
      function createNewLegendAndAttach(chart, legendOpts) {
        var legend2 = new Legend({
          ctx: chart.ctx,
          options: legendOpts,
          chart
        });
        core_layouts.configure(chart, legend2, legendOpts);
        core_layouts.addBox(chart, legend2);
        chart.legend = legend2;
      }
      var plugin_legend = {
        id: "legend",
        /**
         * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making
         * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of
         * the plugin, which one will be re-exposed in the chart.js file.
         * https://github.com/chartjs/Chart.js/pull/2640
         * @private
         */
        _element: Legend,
        beforeInit: function(chart) {
          var legendOpts = chart.options.legend;
          if (legendOpts) {
            createNewLegendAndAttach(chart, legendOpts);
          }
        },
        beforeUpdate: function(chart) {
          var legendOpts = chart.options.legend;
          var legend2 = chart.legend;
          if (legendOpts) {
            helpers$1.mergeIf(legendOpts, core_defaults.global.legend);
            if (legend2) {
              core_layouts.configure(chart, legend2, legendOpts);
              legend2.options = legendOpts;
            } else {
              createNewLegendAndAttach(chart, legendOpts);
            }
          } else if (legend2) {
            core_layouts.removeBox(chart, legend2);
            delete chart.legend;
          }
        },
        afterEvent: function(chart, e) {
          var legend2 = chart.legend;
          if (legend2) {
            legend2.handleEvent(e);
          }
        }
      };
      var noop$2 = helpers$1.noop;
      core_defaults._set("global", {
        title: {
          display: false,
          fontStyle: "bold",
          fullWidth: true,
          padding: 10,
          position: "top",
          text: "",
          weight: 2e3
          // by default greater than legend (1000) to be above
        }
      });
      var Title = core_element.extend({
        initialize: function(config) {
          var me = this;
          helpers$1.extend(me, config);
          me.legendHitBoxes = [];
        },
        // These methods are ordered by lifecycle. Utilities then follow.
        beforeUpdate: noop$2,
        update: function(maxWidth, maxHeight, margins) {
          var me = this;
          me.beforeUpdate();
          me.maxWidth = maxWidth;
          me.maxHeight = maxHeight;
          me.margins = margins;
          me.beforeSetDimensions();
          me.setDimensions();
          me.afterSetDimensions();
          me.beforeBuildLabels();
          me.buildLabels();
          me.afterBuildLabels();
          me.beforeFit();
          me.fit();
          me.afterFit();
          me.afterUpdate();
          return me.minSize;
        },
        afterUpdate: noop$2,
        //
        beforeSetDimensions: noop$2,
        setDimensions: function() {
          var me = this;
          if (me.isHorizontal()) {
            me.width = me.maxWidth;
            me.left = 0;
            me.right = me.width;
          } else {
            me.height = me.maxHeight;
            me.top = 0;
            me.bottom = me.height;
          }
          me.paddingLeft = 0;
          me.paddingTop = 0;
          me.paddingRight = 0;
          me.paddingBottom = 0;
          me.minSize = {
            width: 0,
            height: 0
          };
        },
        afterSetDimensions: noop$2,
        //
        beforeBuildLabels: noop$2,
        buildLabels: noop$2,
        afterBuildLabels: noop$2,
        //
        beforeFit: noop$2,
        fit: function() {
          var me = this;
          var opts = me.options;
          var minSize = me.minSize = {};
          var isHorizontal = me.isHorizontal();
          var lineCount, textSize;
          if (!opts.display) {
            me.width = minSize.width = me.height = minSize.height = 0;
            return;
          }
          lineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;
          textSize = lineCount * helpers$1.options._parseFont(opts).lineHeight + opts.padding * 2;
          me.width = minSize.width = isHorizontal ? me.maxWidth : textSize;
          me.height = minSize.height = isHorizontal ? textSize : me.maxHeight;
        },
        afterFit: noop$2,
        // Shared Methods
        isHorizontal: function() {
          var pos = this.options.position;
          return pos === "top" || pos === "bottom";
        },
        // Actually draw the title block on the canvas
        draw: function() {
          var me = this;
          var ctx = me.ctx;
          var opts = me.options;
          if (!opts.display) {
            return;
          }
          var fontOpts = helpers$1.options._parseFont(opts);
          var lineHeight = fontOpts.lineHeight;
          var offset2 = lineHeight / 2 + opts.padding;
          var rotation = 0;
          var top = me.top;
          var left = me.left;
          var bottom = me.bottom;
          var right = me.right;
          var maxWidth, titleX, titleY;
          ctx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor);
          ctx.font = fontOpts.string;
          if (me.isHorizontal()) {
            titleX = left + (right - left) / 2;
            titleY = top + offset2;
            maxWidth = right - left;
          } else {
            titleX = opts.position === "left" ? left + offset2 : right - offset2;
            titleY = top + (bottom - top) / 2;
            maxWidth = bottom - top;
            rotation = Math.PI * (opts.position === "left" ? -0.5 : 0.5);
          }
          ctx.save();
          ctx.translate(titleX, titleY);
          ctx.rotate(rotation);
          ctx.textAlign = "center";
          ctx.textBaseline = "middle";
          var text = opts.text;
          if (helpers$1.isArray(text)) {
            var y = 0;
            for (var i = 0; i < text.length; ++i) {
              ctx.fillText(text[i], 0, y, maxWidth);
              y += lineHeight;
            }
          } else {
            ctx.fillText(text, 0, 0, maxWidth);
          }
          ctx.restore();
        }
      });
      function createNewTitleBlockAndAttach(chart, titleOpts) {
        var title2 = new Title({
          ctx: chart.ctx,
          options: titleOpts,
          chart
        });
        core_layouts.configure(chart, title2, titleOpts);
        core_layouts.addBox(chart, title2);
        chart.titleBlock = title2;
      }
      var plugin_title = {
        id: "title",
        /**
         * Backward compatibility: since 2.1.5, the title is registered as a plugin, making
         * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of
         * the plugin, which one will be re-exposed in the chart.js file.
         * https://github.com/chartjs/Chart.js/pull/2640
         * @private
         */
        _element: Title,
        beforeInit: function(chart) {
          var titleOpts = chart.options.title;
          if (titleOpts) {
            createNewTitleBlockAndAttach(chart, titleOpts);
          }
        },
        beforeUpdate: function(chart) {
          var titleOpts = chart.options.title;
          var titleBlock = chart.titleBlock;
          if (titleOpts) {
            helpers$1.mergeIf(titleOpts, core_defaults.global.title);
            if (titleBlock) {
              core_layouts.configure(chart, titleBlock, titleOpts);
              titleBlock.options = titleOpts;
            } else {
              createNewTitleBlockAndAttach(chart, titleOpts);
            }
          } else if (titleBlock) {
            core_layouts.removeBox(chart, titleBlock);
            delete chart.titleBlock;
          }
        }
      };
      var plugins = {};
      var filler = plugin_filler;
      var legend = plugin_legend;
      var title = plugin_title;
      plugins.filler = filler;
      plugins.legend = legend;
      plugins.title = title;
      core_controller.helpers = helpers$1;
      core_helpers();
      core_controller._adapters = core_adapters;
      core_controller.Animation = core_animation;
      core_controller.animationService = core_animations;
      core_controller.controllers = controllers;
      core_controller.DatasetController = core_datasetController;
      core_controller.defaults = core_defaults;
      core_controller.Element = core_element;
      core_controller.elements = elements;
      core_controller.Interaction = core_interaction;
      core_controller.layouts = core_layouts;
      core_controller.platform = platform;
      core_controller.plugins = core_plugins;
      core_controller.Scale = core_scale;
      core_controller.scaleService = core_scaleService;
      core_controller.Ticks = core_ticks;
      core_controller.Tooltip = core_tooltip;
      core_controller.helpers.each(scales, function(scale2, type) {
        core_controller.scaleService.registerScaleType(type, scale2, scale2._defaults);
      });
      for (var k in plugins) {
        if (plugins.hasOwnProperty(k)) {
          core_controller.plugins.register(plugins[k]);
        }
      }
      core_controller.platform.initialize();
      var src = core_controller;
      if (typeof window !== "undefined") {
        window.Chart = core_controller;
      }
      core_controller.Chart = core_controller;
      core_controller.Legend = plugins.legend._element;
      core_controller.Title = plugins.title._element;
      core_controller.pluginService = core_controller.plugins;
      core_controller.PluginBase = core_controller.Element.extend({});
      core_controller.canvasHelpers = core_controller.helpers.canvas;
      core_controller.layoutService = core_controller.layouts;
      core_controller.LinearScaleBase = scale_linearbase;
      core_controller.helpers.each(
        [
          "Bar",
          "Bubble",
          "Doughnut",
          "Line",
          "PolarArea",
          "Radar",
          "Scatter"
        ],
        function(klass) {
          core_controller[klass] = function(ctx, cfg) {
            return new core_controller(ctx, core_controller.helpers.merge(cfg || {}, {
              type: klass.charAt(0).toLowerCase() + klass.slice(1)
            }));
          };
        }
      );
      return src;
    });
  }
});

// node_modules/lodash/_listCacheClear.js
var require_listCacheClear = __commonJS({
  "node_modules/lodash/_listCacheClear.js"(exports, module2) {
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    module2.exports = listCacheClear;
  }
});

// node_modules/lodash/eq.js
var require_eq = __commonJS({
  "node_modules/lodash/eq.js"(exports, module2) {
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    module2.exports = eq;
  }
});

// node_modules/lodash/_assocIndexOf.js
var require_assocIndexOf = __commonJS({
  "node_modules/lodash/_assocIndexOf.js"(exports, module2) {
    var eq = require_eq();
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    module2.exports = assocIndexOf;
  }
});

// node_modules/lodash/_listCacheDelete.js
var require_listCacheDelete = __commonJS({
  "node_modules/lodash/_listCacheDelete.js"(exports, module2) {
    var assocIndexOf = require_assocIndexOf();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    module2.exports = listCacheDelete;
  }
});

// node_modules/lodash/_listCacheGet.js
var require_listCacheGet = __commonJS({
  "node_modules/lodash/_listCacheGet.js"(exports, module2) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    module2.exports = listCacheGet;
  }
});

// node_modules/lodash/_listCacheHas.js
var require_listCacheHas = __commonJS({
  "node_modules/lodash/_listCacheHas.js"(exports, module2) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    module2.exports = listCacheHas;
  }
});

// node_modules/lodash/_listCacheSet.js
var require_listCacheSet = __commonJS({
  "node_modules/lodash/_listCacheSet.js"(exports, module2) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    module2.exports = listCacheSet;
  }
});

// node_modules/lodash/_ListCache.js
var require_ListCache = __commonJS({
  "node_modules/lodash/_ListCache.js"(exports, module2) {
    var listCacheClear = require_listCacheClear();
    var listCacheDelete = require_listCacheDelete();
    var listCacheGet = require_listCacheGet();
    var listCacheHas = require_listCacheHas();
    var listCacheSet = require_listCacheSet();
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module2.exports = ListCache;
  }
});

// node_modules/lodash/_stackClear.js
var require_stackClear = __commonJS({
  "node_modules/lodash/_stackClear.js"(exports, module2) {
    var ListCache = require_ListCache();
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    module2.exports = stackClear;
  }
});

// node_modules/lodash/_stackDelete.js
var require_stackDelete = __commonJS({
  "node_modules/lodash/_stackDelete.js"(exports, module2) {
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    module2.exports = stackDelete;
  }
});

// node_modules/lodash/_stackGet.js
var require_stackGet = __commonJS({
  "node_modules/lodash/_stackGet.js"(exports, module2) {
    function stackGet(key) {
      return this.__data__.get(key);
    }
    module2.exports = stackGet;
  }
});

// node_modules/lodash/_stackHas.js
var require_stackHas = __commonJS({
  "node_modules/lodash/_stackHas.js"(exports, module2) {
    function stackHas(key) {
      return this.__data__.has(key);
    }
    module2.exports = stackHas;
  }
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports, module2) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module2.exports = freeGlobal;
  }
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/lodash/_root.js"(exports, module2) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module2.exports = root;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports, module2) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module2.exports = Symbol2;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports, module2) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module2.exports = getRawTag;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports, module2) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module2.exports = objectToString;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports, module2) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module2.exports = baseGetTag;
  }
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports, module2) {
    function isObject2(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module2.exports = isObject2;
  }
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/lodash/isFunction.js"(exports, module2) {
    var baseGetTag = require_baseGetTag();
    var isObject2 = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction2(value) {
      if (!isObject2(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module2.exports = isFunction2;
  }
});

// node_modules/lodash/_coreJsData.js
var require_coreJsData = __commonJS({
  "node_modules/lodash/_coreJsData.js"(exports, module2) {
    var root = require_root();
    var coreJsData = root["__core-js_shared__"];
    module2.exports = coreJsData;
  }
});

// node_modules/lodash/_isMasked.js
var require_isMasked = __commonJS({
  "node_modules/lodash/_isMasked.js"(exports, module2) {
    var coreJsData = require_coreJsData();
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    module2.exports = isMasked;
  }
});

// node_modules/lodash/_toSource.js
var require_toSource = __commonJS({
  "node_modules/lodash/_toSource.js"(exports, module2) {
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    module2.exports = toSource;
  }
});

// node_modules/lodash/_baseIsNative.js
var require_baseIsNative = __commonJS({
  "node_modules/lodash/_baseIsNative.js"(exports, module2) {
    var isFunction2 = require_isFunction();
    var isMasked = require_isMasked();
    var isObject2 = require_isObject();
    var toSource = require_toSource();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    module2.exports = baseIsNative;
  }
});

// node_modules/lodash/_getValue.js
var require_getValue = __commonJS({
  "node_modules/lodash/_getValue.js"(exports, module2) {
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    module2.exports = getValue;
  }
});

// node_modules/lodash/_getNative.js
var require_getNative = __commonJS({
  "node_modules/lodash/_getNative.js"(exports, module2) {
    var baseIsNative = require_baseIsNative();
    var getValue = require_getValue();
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    module2.exports = getNative;
  }
});

// node_modules/lodash/_Map.js
var require_Map = __commonJS({
  "node_modules/lodash/_Map.js"(exports, module2) {
    var getNative = require_getNative();
    var root = require_root();
    var Map = getNative(root, "Map");
    module2.exports = Map;
  }
});

// node_modules/lodash/_nativeCreate.js
var require_nativeCreate = __commonJS({
  "node_modules/lodash/_nativeCreate.js"(exports, module2) {
    var getNative = require_getNative();
    var nativeCreate = getNative(Object, "create");
    module2.exports = nativeCreate;
  }
});

// node_modules/lodash/_hashClear.js
var require_hashClear = __commonJS({
  "node_modules/lodash/_hashClear.js"(exports, module2) {
    var nativeCreate = require_nativeCreate();
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    module2.exports = hashClear;
  }
});

// node_modules/lodash/_hashDelete.js
var require_hashDelete = __commonJS({
  "node_modules/lodash/_hashDelete.js"(exports, module2) {
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    module2.exports = hashDelete;
  }
});

// node_modules/lodash/_hashGet.js
var require_hashGet = __commonJS({
  "node_modules/lodash/_hashGet.js"(exports, module2) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    module2.exports = hashGet;
  }
});

// node_modules/lodash/_hashHas.js
var require_hashHas = __commonJS({
  "node_modules/lodash/_hashHas.js"(exports, module2) {
    var nativeCreate = require_nativeCreate();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    module2.exports = hashHas;
  }
});

// node_modules/lodash/_hashSet.js
var require_hashSet = __commonJS({
  "node_modules/lodash/_hashSet.js"(exports, module2) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    module2.exports = hashSet;
  }
});

// node_modules/lodash/_Hash.js
var require_Hash = __commonJS({
  "node_modules/lodash/_Hash.js"(exports, module2) {
    var hashClear = require_hashClear();
    var hashDelete = require_hashDelete();
    var hashGet = require_hashGet();
    var hashHas = require_hashHas();
    var hashSet = require_hashSet();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module2.exports = Hash;
  }
});

// node_modules/lodash/_mapCacheClear.js
var require_mapCacheClear = __commonJS({
  "node_modules/lodash/_mapCacheClear.js"(exports, module2) {
    var Hash = require_Hash();
    var ListCache = require_ListCache();
    var Map = require_Map();
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map || ListCache)(),
        "string": new Hash()
      };
    }
    module2.exports = mapCacheClear;
  }
});

// node_modules/lodash/_isKeyable.js
var require_isKeyable = __commonJS({
  "node_modules/lodash/_isKeyable.js"(exports, module2) {
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    module2.exports = isKeyable;
  }
});

// node_modules/lodash/_getMapData.js
var require_getMapData = __commonJS({
  "node_modules/lodash/_getMapData.js"(exports, module2) {
    var isKeyable = require_isKeyable();
    function getMapData(map2, key) {
      var data = map2.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    module2.exports = getMapData;
  }
});

// node_modules/lodash/_mapCacheDelete.js
var require_mapCacheDelete = __commonJS({
  "node_modules/lodash/_mapCacheDelete.js"(exports, module2) {
    var getMapData = require_getMapData();
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    module2.exports = mapCacheDelete;
  }
});

// node_modules/lodash/_mapCacheGet.js
var require_mapCacheGet = __commonJS({
  "node_modules/lodash/_mapCacheGet.js"(exports, module2) {
    var getMapData = require_getMapData();
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    module2.exports = mapCacheGet;
  }
});

// node_modules/lodash/_mapCacheHas.js
var require_mapCacheHas = __commonJS({
  "node_modules/lodash/_mapCacheHas.js"(exports, module2) {
    var getMapData = require_getMapData();
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    module2.exports = mapCacheHas;
  }
});

// node_modules/lodash/_mapCacheSet.js
var require_mapCacheSet = __commonJS({
  "node_modules/lodash/_mapCacheSet.js"(exports, module2) {
    var getMapData = require_getMapData();
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    module2.exports = mapCacheSet;
  }
});

// node_modules/lodash/_MapCache.js
var require_MapCache = __commonJS({
  "node_modules/lodash/_MapCache.js"(exports, module2) {
    var mapCacheClear = require_mapCacheClear();
    var mapCacheDelete = require_mapCacheDelete();
    var mapCacheGet = require_mapCacheGet();
    var mapCacheHas = require_mapCacheHas();
    var mapCacheSet = require_mapCacheSet();
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module2.exports = MapCache;
  }
});

// node_modules/lodash/_stackSet.js
var require_stackSet = __commonJS({
  "node_modules/lodash/_stackSet.js"(exports, module2) {
    var ListCache = require_ListCache();
    var Map = require_Map();
    var MapCache = require_MapCache();
    var LARGE_ARRAY_SIZE = 200;
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    module2.exports = stackSet;
  }
});

// node_modules/lodash/_Stack.js
var require_Stack = __commonJS({
  "node_modules/lodash/_Stack.js"(exports, module2) {
    var ListCache = require_ListCache();
    var stackClear = require_stackClear();
    var stackDelete = require_stackDelete();
    var stackGet = require_stackGet();
    var stackHas = require_stackHas();
    var stackSet = require_stackSet();
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    module2.exports = Stack;
  }
});

// node_modules/lodash/_setCacheAdd.js
var require_setCacheAdd = __commonJS({
  "node_modules/lodash/_setCacheAdd.js"(exports, module2) {
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    module2.exports = setCacheAdd;
  }
});

// node_modules/lodash/_setCacheHas.js
var require_setCacheHas = __commonJS({
  "node_modules/lodash/_setCacheHas.js"(exports, module2) {
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    module2.exports = setCacheHas;
  }
});

// node_modules/lodash/_SetCache.js
var require_SetCache = __commonJS({
  "node_modules/lodash/_SetCache.js"(exports, module2) {
    var MapCache = require_MapCache();
    var setCacheAdd = require_setCacheAdd();
    var setCacheHas = require_setCacheHas();
    function SetCache(values) {
      var index = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module2.exports = SetCache;
  }
});

// node_modules/lodash/_arraySome.js
var require_arraySome = __commonJS({
  "node_modules/lodash/_arraySome.js"(exports, module2) {
    function arraySome(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    module2.exports = arraySome;
  }
});

// node_modules/lodash/_cacheHas.js
var require_cacheHas = __commonJS({
  "node_modules/lodash/_cacheHas.js"(exports, module2) {
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    module2.exports = cacheHas;
  }
});

// node_modules/lodash/_equalArrays.js
var require_equalArrays = __commonJS({
  "node_modules/lodash/_equalArrays.js"(exports, module2) {
    var SetCache = require_SetCache();
    var arraySome = require_arraySome();
    var cacheHas = require_cacheHas();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    module2.exports = equalArrays;
  }
});

// node_modules/lodash/_Uint8Array.js
var require_Uint8Array = __commonJS({
  "node_modules/lodash/_Uint8Array.js"(exports, module2) {
    var root = require_root();
    var Uint8Array = root.Uint8Array;
    module2.exports = Uint8Array;
  }
});

// node_modules/lodash/_mapToArray.js
var require_mapToArray = __commonJS({
  "node_modules/lodash/_mapToArray.js"(exports, module2) {
    function mapToArray(map2) {
      var index = -1, result = Array(map2.size);
      map2.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    module2.exports = mapToArray;
  }
});

// node_modules/lodash/_setToArray.js
var require_setToArray = __commonJS({
  "node_modules/lodash/_setToArray.js"(exports, module2) {
    function setToArray(set2) {
      var index = -1, result = Array(set2.size);
      set2.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    module2.exports = setToArray;
  }
});

// node_modules/lodash/_equalByTag.js
var require_equalByTag = __commonJS({
  "node_modules/lodash/_equalByTag.js"(exports, module2) {
    var Symbol2 = require_Symbol();
    var Uint8Array = require_Uint8Array();
    var eq = require_eq();
    var equalArrays = require_equalArrays();
    var mapToArray = require_mapToArray();
    var setToArray = require_setToArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    module2.exports = equalByTag;
  }
});

// node_modules/lodash/_arrayPush.js
var require_arrayPush = __commonJS({
  "node_modules/lodash/_arrayPush.js"(exports, module2) {
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset2 = array.length;
      while (++index < length) {
        array[offset2 + index] = values[index];
      }
      return array;
    }
    module2.exports = arrayPush;
  }
});

// node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "node_modules/lodash/isArray.js"(exports, module2) {
    var isArray2 = Array.isArray;
    module2.exports = isArray2;
  }
});

// node_modules/lodash/_baseGetAllKeys.js
var require_baseGetAllKeys = __commonJS({
  "node_modules/lodash/_baseGetAllKeys.js"(exports, module2) {
    var arrayPush = require_arrayPush();
    var isArray2 = require_isArray();
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray2(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    module2.exports = baseGetAllKeys;
  }
});

// node_modules/lodash/_arrayFilter.js
var require_arrayFilter = __commonJS({
  "node_modules/lodash/_arrayFilter.js"(exports, module2) {
    function arrayFilter(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    module2.exports = arrayFilter;
  }
});

// node_modules/lodash/stubArray.js
var require_stubArray = __commonJS({
  "node_modules/lodash/stubArray.js"(exports, module2) {
    function stubArray() {
      return [];
    }
    module2.exports = stubArray;
  }
});

// node_modules/lodash/_getSymbols.js
var require_getSymbols = __commonJS({
  "node_modules/lodash/_getSymbols.js"(exports, module2) {
    var arrayFilter = require_arrayFilter();
    var stubArray = require_stubArray();
    var objectProto = Object.prototype;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    module2.exports = getSymbols;
  }
});

// node_modules/lodash/_baseTimes.js
var require_baseTimes = __commonJS({
  "node_modules/lodash/_baseTimes.js"(exports, module2) {
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    module2.exports = baseTimes;
  }
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/lodash/isObjectLike.js"(exports, module2) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module2.exports = isObjectLike;
  }
});

// node_modules/lodash/_baseIsArguments.js
var require_baseIsArguments = __commonJS({
  "node_modules/lodash/_baseIsArguments.js"(exports, module2) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    module2.exports = baseIsArguments;
  }
});

// node_modules/lodash/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/lodash/isArguments.js"(exports, module2) {
    var baseIsArguments = require_baseIsArguments();
    var isObjectLike = require_isObjectLike();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    module2.exports = isArguments;
  }
});

// node_modules/lodash/stubFalse.js
var require_stubFalse = __commonJS({
  "node_modules/lodash/stubFalse.js"(exports, module2) {
    function stubFalse() {
      return false;
    }
    module2.exports = stubFalse;
  }
});

// node_modules/lodash/isBuffer.js
var require_isBuffer = __commonJS({
  "node_modules/lodash/isBuffer.js"(exports, module2) {
    var root = require_root();
    var stubFalse = require_stubFalse();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse;
    module2.exports = isBuffer;
  }
});

// node_modules/lodash/_isIndex.js
var require_isIndex = __commonJS({
  "node_modules/lodash/_isIndex.js"(exports, module2) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    module2.exports = isIndex;
  }
});

// node_modules/lodash/isLength.js
var require_isLength = __commonJS({
  "node_modules/lodash/isLength.js"(exports, module2) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    module2.exports = isLength;
  }
});

// node_modules/lodash/_baseIsTypedArray.js
var require_baseIsTypedArray = __commonJS({
  "node_modules/lodash/_baseIsTypedArray.js"(exports, module2) {
    var baseGetTag = require_baseGetTag();
    var isLength = require_isLength();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    module2.exports = baseIsTypedArray;
  }
});

// node_modules/lodash/_baseUnary.js
var require_baseUnary = __commonJS({
  "node_modules/lodash/_baseUnary.js"(exports, module2) {
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    module2.exports = baseUnary;
  }
});

// node_modules/lodash/_nodeUtil.js
var require_nodeUtil = __commonJS({
  "node_modules/lodash/_nodeUtil.js"(exports, module2) {
    var freeGlobal = require_freeGlobal();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    module2.exports = nodeUtil;
  }
});

// node_modules/lodash/isTypedArray.js
var require_isTypedArray = __commonJS({
  "node_modules/lodash/isTypedArray.js"(exports, module2) {
    var baseIsTypedArray = require_baseIsTypedArray();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    module2.exports = isTypedArray;
  }
});

// node_modules/lodash/_arrayLikeKeys.js
var require_arrayLikeKeys = __commonJS({
  "node_modules/lodash/_arrayLikeKeys.js"(exports, module2) {
    var baseTimes = require_baseTimes();
    var isArguments = require_isArguments();
    var isArray2 = require_isArray();
    var isBuffer = require_isBuffer();
    var isIndex = require_isIndex();
    var isTypedArray = require_isTypedArray();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray2(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    module2.exports = arrayLikeKeys;
  }
});

// node_modules/lodash/_isPrototype.js
var require_isPrototype = __commonJS({
  "node_modules/lodash/_isPrototype.js"(exports, module2) {
    var objectProto = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto2 = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto2;
    }
    module2.exports = isPrototype;
  }
});

// node_modules/lodash/_overArg.js
var require_overArg = __commonJS({
  "node_modules/lodash/_overArg.js"(exports, module2) {
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    module2.exports = overArg;
  }
});

// node_modules/lodash/_nativeKeys.js
var require_nativeKeys = __commonJS({
  "node_modules/lodash/_nativeKeys.js"(exports, module2) {
    var overArg = require_overArg();
    var nativeKeys = overArg(Object.keys, Object);
    module2.exports = nativeKeys;
  }
});

// node_modules/lodash/_baseKeys.js
var require_baseKeys = __commonJS({
  "node_modules/lodash/_baseKeys.js"(exports, module2) {
    var isPrototype = require_isPrototype();
    var nativeKeys = require_nativeKeys();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    module2.exports = baseKeys;
  }
});

// node_modules/lodash/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/lodash/isArrayLike.js"(exports, module2) {
    var isFunction2 = require_isFunction();
    var isLength = require_isLength();
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction2(value);
    }
    module2.exports = isArrayLike;
  }
});

// node_modules/lodash/keys.js
var require_keys = __commonJS({
  "node_modules/lodash/keys.js"(exports, module2) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeys = require_baseKeys();
    var isArrayLike = require_isArrayLike();
    function keys2(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    module2.exports = keys2;
  }
});

// node_modules/lodash/_getAllKeys.js
var require_getAllKeys = __commonJS({
  "node_modules/lodash/_getAllKeys.js"(exports, module2) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbols = require_getSymbols();
    var keys2 = require_keys();
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys2, getSymbols);
    }
    module2.exports = getAllKeys;
  }
});

// node_modules/lodash/_equalObjects.js
var require_equalObjects = __commonJS({
  "node_modules/lodash/_equalObjects.js"(exports, module2) {
    var getAllKeys = require_getAllKeys();
    var COMPARE_PARTIAL_FLAG = 1;
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    module2.exports = equalObjects;
  }
});

// node_modules/lodash/_DataView.js
var require_DataView = __commonJS({
  "node_modules/lodash/_DataView.js"(exports, module2) {
    var getNative = require_getNative();
    var root = require_root();
    var DataView = getNative(root, "DataView");
    module2.exports = DataView;
  }
});

// node_modules/lodash/_Promise.js
var require_Promise = __commonJS({
  "node_modules/lodash/_Promise.js"(exports, module2) {
    var getNative = require_getNative();
    var root = require_root();
    var Promise2 = getNative(root, "Promise");
    module2.exports = Promise2;
  }
});

// node_modules/lodash/_Set.js
var require_Set = __commonJS({
  "node_modules/lodash/_Set.js"(exports, module2) {
    var getNative = require_getNative();
    var root = require_root();
    var Set = getNative(root, "Set");
    module2.exports = Set;
  }
});

// node_modules/lodash/_WeakMap.js
var require_WeakMap = __commonJS({
  "node_modules/lodash/_WeakMap.js"(exports, module2) {
    var getNative = require_getNative();
    var root = require_root();
    var WeakMap = getNative(root, "WeakMap");
    module2.exports = WeakMap;
  }
});

// node_modules/lodash/_getTag.js
var require_getTag = __commonJS({
  "node_modules/lodash/_getTag.js"(exports, module2) {
    var DataView = require_DataView();
    var Map = require_Map();
    var Promise2 = require_Promise();
    var Set = require_Set();
    var WeakMap = require_WeakMap();
    var baseGetTag = require_baseGetTag();
    var toSource = require_toSource();
    var mapTag = "[object Map]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var setTag = "[object Set]";
    var weakMapTag = "[object WeakMap]";
    var dataViewTag = "[object DataView]";
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set);
    var weakMapCtorString = toSource(WeakMap);
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    module2.exports = getTag;
  }
});

// node_modules/lodash/_baseIsEqualDeep.js
var require_baseIsEqualDeep = __commonJS({
  "node_modules/lodash/_baseIsEqualDeep.js"(exports, module2) {
    var Stack = require_Stack();
    var equalArrays = require_equalArrays();
    var equalByTag = require_equalByTag();
    var equalObjects = require_equalObjects();
    var getTag = require_getTag();
    var isArray2 = require_isArray();
    var isBuffer = require_isBuffer();
    var isTypedArray = require_isTypedArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var objectTag = "[object Object]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray2(object), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    module2.exports = baseIsEqualDeep;
  }
});

// node_modules/lodash/_baseIsEqual.js
var require_baseIsEqual = __commonJS({
  "node_modules/lodash/_baseIsEqual.js"(exports, module2) {
    var baseIsEqualDeep = require_baseIsEqualDeep();
    var isObjectLike = require_isObjectLike();
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    module2.exports = baseIsEqual;
  }
});

// node_modules/lodash/isEqual.js
var require_isEqual = __commonJS({
  "node_modules/lodash/isEqual.js"(exports, module2) {
    var baseIsEqual = require_baseIsEqual();
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }
    module2.exports = isEqual;
  }
});

// node_modules/lodash/_defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/lodash/_defineProperty.js"(exports, module2) {
    var getNative = require_getNative();
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    module2.exports = defineProperty;
  }
});

// node_modules/lodash/_baseAssignValue.js
var require_baseAssignValue = __commonJS({
  "node_modules/lodash/_baseAssignValue.js"(exports, module2) {
    var defineProperty = require_defineProperty();
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    module2.exports = baseAssignValue;
  }
});

// node_modules/lodash/_arrayAggregator.js
var require_arrayAggregator = __commonJS({
  "node_modules/lodash/_arrayAggregator.js"(exports, module2) {
    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }
      return accumulator;
    }
    module2.exports = arrayAggregator;
  }
});

// node_modules/lodash/_createBaseFor.js
var require_createBaseFor = __commonJS({
  "node_modules/lodash/_createBaseFor.js"(exports, module2) {
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    module2.exports = createBaseFor;
  }
});

// node_modules/lodash/_baseFor.js
var require_baseFor = __commonJS({
  "node_modules/lodash/_baseFor.js"(exports, module2) {
    var createBaseFor = require_createBaseFor();
    var baseFor = createBaseFor();
    module2.exports = baseFor;
  }
});

// node_modules/lodash/_baseForOwn.js
var require_baseForOwn = __commonJS({
  "node_modules/lodash/_baseForOwn.js"(exports, module2) {
    var baseFor = require_baseFor();
    var keys2 = require_keys();
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys2);
    }
    module2.exports = baseForOwn;
  }
});

// node_modules/lodash/_createBaseEach.js
var require_createBaseEach = __commonJS({
  "node_modules/lodash/_createBaseEach.js"(exports, module2) {
    var isArrayLike = require_isArrayLike();
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
        while (fromRight ? index-- : ++index < length) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }
    module2.exports = createBaseEach;
  }
});

// node_modules/lodash/_baseEach.js
var require_baseEach = __commonJS({
  "node_modules/lodash/_baseEach.js"(exports, module2) {
    var baseForOwn = require_baseForOwn();
    var createBaseEach = require_createBaseEach();
    var baseEach = createBaseEach(baseForOwn);
    module2.exports = baseEach;
  }
});

// node_modules/lodash/_baseAggregator.js
var require_baseAggregator = __commonJS({
  "node_modules/lodash/_baseAggregator.js"(exports, module2) {
    var baseEach = require_baseEach();
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection2) {
        setter(accumulator, value, iteratee(value), collection2);
      });
      return accumulator;
    }
    module2.exports = baseAggregator;
  }
});

// node_modules/lodash/_baseIsMatch.js
var require_baseIsMatch = __commonJS({
  "node_modules/lodash/_baseIsMatch.js"(exports, module2) {
    var Stack = require_Stack();
    var baseIsEqual = require_baseIsEqual();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length, length = index, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    module2.exports = baseIsMatch;
  }
});

// node_modules/lodash/_isStrictComparable.js
var require_isStrictComparable = __commonJS({
  "node_modules/lodash/_isStrictComparable.js"(exports, module2) {
    var isObject2 = require_isObject();
    function isStrictComparable(value) {
      return value === value && !isObject2(value);
    }
    module2.exports = isStrictComparable;
  }
});

// node_modules/lodash/_getMatchData.js
var require_getMatchData = __commonJS({
  "node_modules/lodash/_getMatchData.js"(exports, module2) {
    var isStrictComparable = require_isStrictComparable();
    var keys2 = require_keys();
    function getMatchData(object) {
      var result = keys2(object), length = result.length;
      while (length--) {
        var key = result[length], value = object[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    module2.exports = getMatchData;
  }
});

// node_modules/lodash/_matchesStrictComparable.js
var require_matchesStrictComparable = __commonJS({
  "node_modules/lodash/_matchesStrictComparable.js"(exports, module2) {
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    module2.exports = matchesStrictComparable;
  }
});

// node_modules/lodash/_baseMatches.js
var require_baseMatches = __commonJS({
  "node_modules/lodash/_baseMatches.js"(exports, module2) {
    var baseIsMatch = require_baseIsMatch();
    var getMatchData = require_getMatchData();
    var matchesStrictComparable = require_matchesStrictComparable();
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    module2.exports = baseMatches;
  }
});

// node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "node_modules/lodash/isSymbol.js"(exports, module2) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    module2.exports = isSymbol;
  }
});

// node_modules/lodash/_isKey.js
var require_isKey = __commonJS({
  "node_modules/lodash/_isKey.js"(exports, module2) {
    var isArray2 = require_isArray();
    var isSymbol = require_isSymbol();
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    function isKey(value, object) {
      if (isArray2(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    module2.exports = isKey;
  }
});

// node_modules/lodash/memoize.js
var require_memoize = __commonJS({
  "node_modules/lodash/memoize.js"(exports, module2) {
    var MapCache = require_MapCache();
    var FUNC_ERROR_TEXT = "Expected a function";
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    module2.exports = memoize;
  }
});

// node_modules/lodash/_memoizeCapped.js
var require_memoizeCapped = __commonJS({
  "node_modules/lodash/_memoizeCapped.js"(exports, module2) {
    var memoize = require_memoize();
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });
      var cache = result.cache;
      return result;
    }
    module2.exports = memoizeCapped;
  }
});

// node_modules/lodash/_stringToPath.js
var require_stringToPath = __commonJS({
  "node_modules/lodash/_stringToPath.js"(exports, module2) {
    var memoizeCapped = require_memoizeCapped();
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    module2.exports = stringToPath;
  }
});

// node_modules/lodash/_arrayMap.js
var require_arrayMap = __commonJS({
  "node_modules/lodash/_arrayMap.js"(exports, module2) {
    function arrayMap(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    module2.exports = arrayMap;
  }
});

// node_modules/lodash/_baseToString.js
var require_baseToString = __commonJS({
  "node_modules/lodash/_baseToString.js"(exports, module2) {
    var Symbol2 = require_Symbol();
    var arrayMap = require_arrayMap();
    var isArray2 = require_isArray();
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray2(value)) {
        return arrayMap(value, baseToString) + "";
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module2.exports = baseToString;
  }
});

// node_modules/lodash/toString.js
var require_toString = __commonJS({
  "node_modules/lodash/toString.js"(exports, module2) {
    var baseToString = require_baseToString();
    function toString2(value) {
      return value == null ? "" : baseToString(value);
    }
    module2.exports = toString2;
  }
});

// node_modules/lodash/_castPath.js
var require_castPath = __commonJS({
  "node_modules/lodash/_castPath.js"(exports, module2) {
    var isArray2 = require_isArray();
    var isKey = require_isKey();
    var stringToPath = require_stringToPath();
    var toString2 = require_toString();
    function castPath(value, object) {
      if (isArray2(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString2(value));
    }
    module2.exports = castPath;
  }
});

// node_modules/lodash/_toKey.js
var require_toKey = __commonJS({
  "node_modules/lodash/_toKey.js"(exports, module2) {
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module2.exports = toKey;
  }
});

// node_modules/lodash/_baseGet.js
var require_baseGet = __commonJS({
  "node_modules/lodash/_baseGet.js"(exports, module2) {
    var castPath = require_castPath();
    var toKey = require_toKey();
    function baseGet(object, path) {
      path = castPath(path, object);
      var index = 0, length = path.length;
      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return index && index == length ? object : void 0;
    }
    module2.exports = baseGet;
  }
});

// node_modules/lodash/get.js
var require_get = __commonJS({
  "node_modules/lodash/get.js"(exports, module2) {
    var baseGet = require_baseGet();
    function get2(object, path, defaultValue) {
      var result = object == null ? void 0 : baseGet(object, path);
      return result === void 0 ? defaultValue : result;
    }
    module2.exports = get2;
  }
});

// node_modules/lodash/_baseHasIn.js
var require_baseHasIn = __commonJS({
  "node_modules/lodash/_baseHasIn.js"(exports, module2) {
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }
    module2.exports = baseHasIn;
  }
});

// node_modules/lodash/_hasPath.js
var require_hasPath = __commonJS({
  "node_modules/lodash/_hasPath.js"(exports, module2) {
    var castPath = require_castPath();
    var isArguments = require_isArguments();
    var isArray2 = require_isArray();
    var isIndex = require_isIndex();
    var isLength = require_isLength();
    var toKey = require_toKey();
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);
      var index = -1, length = path.length, result = false;
      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) && (isArray2(object) || isArguments(object));
    }
    module2.exports = hasPath;
  }
});

// node_modules/lodash/hasIn.js
var require_hasIn = __commonJS({
  "node_modules/lodash/hasIn.js"(exports, module2) {
    var baseHasIn = require_baseHasIn();
    var hasPath = require_hasPath();
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }
    module2.exports = hasIn;
  }
});

// node_modules/lodash/_baseMatchesProperty.js
var require_baseMatchesProperty = __commonJS({
  "node_modules/lodash/_baseMatchesProperty.js"(exports, module2) {
    var baseIsEqual = require_baseIsEqual();
    var get2 = require_get();
    var hasIn = require_hasIn();
    var isKey = require_isKey();
    var isStrictComparable = require_isStrictComparable();
    var matchesStrictComparable = require_matchesStrictComparable();
    var toKey = require_toKey();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get2(object, path);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }
    module2.exports = baseMatchesProperty;
  }
});

// node_modules/lodash/identity.js
var require_identity = __commonJS({
  "node_modules/lodash/identity.js"(exports, module2) {
    function identity(value) {
      return value;
    }
    module2.exports = identity;
  }
});

// node_modules/lodash/_baseProperty.js
var require_baseProperty = __commonJS({
  "node_modules/lodash/_baseProperty.js"(exports, module2) {
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    module2.exports = baseProperty;
  }
});

// node_modules/lodash/_basePropertyDeep.js
var require_basePropertyDeep = __commonJS({
  "node_modules/lodash/_basePropertyDeep.js"(exports, module2) {
    var baseGet = require_baseGet();
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }
    module2.exports = basePropertyDeep;
  }
});

// node_modules/lodash/property.js
var require_property = __commonJS({
  "node_modules/lodash/property.js"(exports, module2) {
    var baseProperty = require_baseProperty();
    var basePropertyDeep = require_basePropertyDeep();
    var isKey = require_isKey();
    var toKey = require_toKey();
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }
    module2.exports = property;
  }
});

// node_modules/lodash/_baseIteratee.js
var require_baseIteratee = __commonJS({
  "node_modules/lodash/_baseIteratee.js"(exports, module2) {
    var baseMatches = require_baseMatches();
    var baseMatchesProperty = require_baseMatchesProperty();
    var identity = require_identity();
    var isArray2 = require_isArray();
    var property = require_property();
    function baseIteratee(value) {
      if (typeof value == "function") {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == "object") {
        return isArray2(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    module2.exports = baseIteratee;
  }
});

// node_modules/lodash/_createAggregator.js
var require_createAggregator = __commonJS({
  "node_modules/lodash/_createAggregator.js"(exports, module2) {
    var arrayAggregator = require_arrayAggregator();
    var baseAggregator = require_baseAggregator();
    var baseIteratee = require_baseIteratee();
    var isArray2 = require_isArray();
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray2(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
        return func(collection, setter, baseIteratee(iteratee, 2), accumulator);
      };
    }
    module2.exports = createAggregator;
  }
});

// node_modules/lodash/keyBy.js
var require_keyBy = __commonJS({
  "node_modules/lodash/keyBy.js"(exports, module2) {
    var baseAssignValue = require_baseAssignValue();
    var createAggregator = require_createAggregator();
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });
    module2.exports = keyBy;
  }
});

// node_modules/react-ui-cards/node_modules/react-chartjs-2/es/index.js
var require_es = __commonJS({
  "node_modules/react-ui-cards/node_modules/react-chartjs-2/es/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "Chart", {
      enumerable: true,
      get: function get2() {
        return _chart["default"];
      }
    });
    exports.defaults = exports.Scatter = exports.Bubble = exports.Polar = exports.Radar = exports.HorizontalBar = exports.Bar = exports.Line = exports.Pie = exports.Doughnut = exports["default"] = void 0;
    var _react = _interopRequireDefault(require_react());
    var _propTypes = _interopRequireDefault(require_prop_types());
    var _chart = _interopRequireDefault(require_Chart());
    var _isEqual = _interopRequireDefault(require_isEqual());
    var _keyBy = _interopRequireDefault(require_keyBy());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _extends() {
      _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function ownKeys(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var NODE_ENV = typeof process !== "undefined" && process.env && "development";
    var ChartComponent = function(_React$Component) {
      _inherits(ChartComponent2, _React$Component);
      var _super = _createSuper(ChartComponent2);
      function ChartComponent2() {
        var _this;
        _classCallCheck(this, ChartComponent2);
        _this = _super.call(this);
        _defineProperty(_assertThisInitialized(_this), "handleOnClick", function(event) {
          var instance = _this.chartInstance;
          var _this$props = _this.props, getDatasetAtEvent = _this$props.getDatasetAtEvent, getElementAtEvent = _this$props.getElementAtEvent, getElementsAtEvent = _this$props.getElementsAtEvent, onElementsClick = _this$props.onElementsClick;
          getDatasetAtEvent && getDatasetAtEvent(instance.getDatasetAtEvent(event), event);
          getElementAtEvent && getElementAtEvent(instance.getElementAtEvent(event), event);
          getElementsAtEvent && getElementsAtEvent(instance.getElementsAtEvent(event), event);
          onElementsClick && onElementsClick(instance.getElementsAtEvent(event), event);
        });
        _defineProperty(_assertThisInitialized(_this), "ref", function(element) {
          _this.element = element;
        });
        _this.chartInstance = void 0;
        return _this;
      }
      _createClass(ChartComponent2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.renderChart();
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          if (this.props.redraw) {
            this.destroyChart();
            this.renderChart();
            return;
          }
          this.updateChart();
        }
      }, {
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps) {
          var _this$props2 = this.props, redraw = _this$props2.redraw, type = _this$props2.type, options = _this$props2.options, plugins = _this$props2.plugins, legend = _this$props2.legend, height = _this$props2.height, width = _this$props2.width;
          if (nextProps.redraw === true) {
            return true;
          }
          if (height !== nextProps.height || width !== nextProps.width) {
            return true;
          }
          if (type !== nextProps.type) {
            return true;
          }
          if (!(0, _isEqual["default"])(legend, nextProps.legend)) {
            return true;
          }
          if (!(0, _isEqual["default"])(options, nextProps.options)) {
            return true;
          }
          var nextData = this.transformDataProp(nextProps);
          if (!(0, _isEqual["default"])(this.shadowDataProp, nextData)) {
            return true;
          }
          return !(0, _isEqual["default"])(plugins, nextProps.plugins);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.destroyChart();
        }
      }, {
        key: "transformDataProp",
        value: function transformDataProp(props) {
          var data = props.data;
          if (typeof data == "function") {
            var node = this.element;
            return data(node);
          } else {
            return data;
          }
        }
        // Chart.js directly mutates the data.dataset objects by adding _meta proprerty
        // this makes impossible to compare the current and next data changes
        // therefore we memoize the data prop while sending a fake to Chart.js for mutation.
        // see https://github.com/chartjs/Chart.js/blob/master/src/core/core.controller.js#L615-L617
      }, {
        key: "memoizeDataProps",
        value: function memoizeDataProps() {
          if (!this.props.data) {
            return;
          }
          var data = this.transformDataProp(this.props);
          this.shadowDataProp = _objectSpread(_objectSpread({}, data), {}, {
            datasets: data.datasets && data.datasets.map(function(set2) {
              return _objectSpread({}, set2);
            })
          });
          this.saveCurrentDatasets();
          return data;
        }
      }, {
        key: "checkDatasets",
        value: function checkDatasets(datasets) {
          var isDev = NODE_ENV !== "production" && NODE_ENV !== "prod";
          var usingCustomKeyProvider = this.props.datasetKeyProvider !== ChartComponent2.getLabelAsKey;
          var multipleDatasets = datasets.length > 1;
          if (isDev && multipleDatasets && !usingCustomKeyProvider) {
            var shouldWarn = false;
            datasets.forEach(function(dataset) {
              if (!dataset.label) {
                shouldWarn = true;
              }
            });
            if (shouldWarn) {
              console.error('[react-chartjs-2] Warning: Each dataset needs a unique key. By default, the "label" property on each dataset is used. Alternatively, you may provide a "datasetKeyProvider" as a prop that returns a unique key.');
            }
          }
        }
      }, {
        key: "getCurrentDatasets",
        value: function getCurrentDatasets() {
          return this.chartInstance && this.chartInstance.config.data && this.chartInstance.config.data.datasets || [];
        }
      }, {
        key: "saveCurrentDatasets",
        value: function saveCurrentDatasets() {
          var _this2 = this;
          this.datasets = this.datasets || {};
          var currentDatasets = this.getCurrentDatasets();
          currentDatasets.forEach(function(d) {
            _this2.datasets[_this2.props.datasetKeyProvider(d)] = d;
          });
        }
      }, {
        key: "updateChart",
        value: function updateChart() {
          var _this3 = this;
          var options = this.props.options;
          var data = this.memoizeDataProps(this.props);
          if (!this.chartInstance)
            return;
          if (options) {
            this.chartInstance.options = _chart["default"].helpers.configMerge(this.chartInstance.options, options);
          }
          var currentDatasets = this.getCurrentDatasets();
          var nextDatasets = data.datasets || [];
          this.checkDatasets(currentDatasets);
          var currentDatasetsIndexed = (0, _keyBy["default"])(currentDatasets, this.props.datasetKeyProvider);
          this.chartInstance.config.data.datasets = nextDatasets.map(function(next) {
            var current = currentDatasetsIndexed[_this3.props.datasetKeyProvider(next)];
            if (current && current.type === next.type && next.data) {
              current.data.splice(next.data.length);
              next.data.forEach(function(point, pid) {
                current.data[pid] = next.data[pid];
              });
              var _data = next.data, otherProps = _objectWithoutProperties(next, ["data"]);
              return _objectSpread(_objectSpread({}, current), otherProps);
            } else {
              return next;
            }
          });
          var datasets = data.datasets, rest = _objectWithoutProperties(data, ["datasets"]);
          this.chartInstance.config.data = _objectSpread(_objectSpread({}, this.chartInstance.config.data), rest);
          this.chartInstance.update();
        }
      }, {
        key: "renderChart",
        value: function renderChart() {
          var _this$props3 = this.props, options = _this$props3.options, legend = _this$props3.legend, type = _this$props3.type, plugins = _this$props3.plugins;
          var node = this.element;
          var data = this.memoizeDataProps();
          if (typeof legend !== "undefined" && !(0, _isEqual["default"])(ChartComponent2.defaultProps.legend, legend)) {
            options.legend = legend;
          }
          this.chartInstance = new _chart["default"](node, {
            type,
            data,
            options,
            plugins
          });
        }
      }, {
        key: "destroyChart",
        value: function destroyChart() {
          if (!this.chartInstance) {
            return;
          }
          this.saveCurrentDatasets();
          var datasets = Object.values(this.datasets);
          this.chartInstance.config.data.datasets = datasets;
          this.chartInstance.destroy();
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props4 = this.props, height = _this$props4.height, width = _this$props4.width, id = _this$props4.id;
          return _react["default"].createElement("canvas", {
            ref: this.ref,
            height,
            width,
            id,
            onClick: this.handleOnClick
          });
        }
      }]);
      return ChartComponent2;
    }(_react["default"].Component);
    _defineProperty(ChartComponent, "getLabelAsKey", function(d) {
      return d.label;
    });
    _defineProperty(ChartComponent, "propTypes", {
      data: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]).isRequired,
      getDatasetAtEvent: _propTypes["default"].func,
      getElementAtEvent: _propTypes["default"].func,
      getElementsAtEvent: _propTypes["default"].func,
      height: _propTypes["default"].number,
      legend: _propTypes["default"].object,
      onElementsClick: _propTypes["default"].func,
      options: _propTypes["default"].object,
      plugins: _propTypes["default"].arrayOf(_propTypes["default"].object),
      redraw: _propTypes["default"].bool,
      type: function type(props, propName, componentName) {
        if (!_chart["default"].controllers[props[propName]]) {
          return new Error("Invalid chart type `" + props[propName] + "` supplied to `" + componentName + "`.");
        }
      },
      width: _propTypes["default"].number,
      datasetKeyProvider: _propTypes["default"].func
    });
    _defineProperty(ChartComponent, "defaultProps", {
      legend: {
        display: true,
        position: "bottom"
      },
      type: "doughnut",
      height: 150,
      width: 300,
      redraw: false,
      options: {},
      datasetKeyProvider: ChartComponent.getLabelAsKey
    });
    var _default = ChartComponent;
    exports["default"] = _default;
    var Doughnut = function(_React$Component2) {
      _inherits(Doughnut2, _React$Component2);
      var _super2 = _createSuper(Doughnut2);
      function Doughnut2() {
        _classCallCheck(this, Doughnut2);
        return _super2.apply(this, arguments);
      }
      _createClass(Doughnut2, [{
        key: "render",
        value: function render() {
          var _this4 = this;
          return _react["default"].createElement(ChartComponent, _extends({}, this.props, {
            ref: function ref(_ref) {
              return _this4.chartInstance = _ref && _ref.chartInstance;
            },
            type: "doughnut"
          }));
        }
      }]);
      return Doughnut2;
    }(_react["default"].Component);
    exports.Doughnut = Doughnut;
    var Pie = function(_React$Component3) {
      _inherits(Pie2, _React$Component3);
      var _super3 = _createSuper(Pie2);
      function Pie2() {
        _classCallCheck(this, Pie2);
        return _super3.apply(this, arguments);
      }
      _createClass(Pie2, [{
        key: "render",
        value: function render() {
          var _this5 = this;
          return _react["default"].createElement(ChartComponent, _extends({}, this.props, {
            ref: function ref(_ref2) {
              return _this5.chartInstance = _ref2 && _ref2.chartInstance;
            },
            type: "pie"
          }));
        }
      }]);
      return Pie2;
    }(_react["default"].Component);
    exports.Pie = Pie;
    var Line = function(_React$Component4) {
      _inherits(Line2, _React$Component4);
      var _super4 = _createSuper(Line2);
      function Line2() {
        _classCallCheck(this, Line2);
        return _super4.apply(this, arguments);
      }
      _createClass(Line2, [{
        key: "render",
        value: function render() {
          var _this6 = this;
          return _react["default"].createElement(ChartComponent, _extends({}, this.props, {
            ref: function ref(_ref3) {
              return _this6.chartInstance = _ref3 && _ref3.chartInstance;
            },
            type: "line"
          }));
        }
      }]);
      return Line2;
    }(_react["default"].Component);
    exports.Line = Line;
    var Bar = function(_React$Component5) {
      _inherits(Bar2, _React$Component5);
      var _super5 = _createSuper(Bar2);
      function Bar2() {
        _classCallCheck(this, Bar2);
        return _super5.apply(this, arguments);
      }
      _createClass(Bar2, [{
        key: "render",
        value: function render() {
          var _this7 = this;
          return _react["default"].createElement(ChartComponent, _extends({}, this.props, {
            ref: function ref(_ref4) {
              return _this7.chartInstance = _ref4 && _ref4.chartInstance;
            },
            type: "bar"
          }));
        }
      }]);
      return Bar2;
    }(_react["default"].Component);
    exports.Bar = Bar;
    var HorizontalBar = function(_React$Component6) {
      _inherits(HorizontalBar2, _React$Component6);
      var _super6 = _createSuper(HorizontalBar2);
      function HorizontalBar2() {
        _classCallCheck(this, HorizontalBar2);
        return _super6.apply(this, arguments);
      }
      _createClass(HorizontalBar2, [{
        key: "render",
        value: function render() {
          var _this8 = this;
          return _react["default"].createElement(ChartComponent, _extends({}, this.props, {
            ref: function ref(_ref5) {
              return _this8.chartInstance = _ref5 && _ref5.chartInstance;
            },
            type: "horizontalBar"
          }));
        }
      }]);
      return HorizontalBar2;
    }(_react["default"].Component);
    exports.HorizontalBar = HorizontalBar;
    var Radar = function(_React$Component7) {
      _inherits(Radar2, _React$Component7);
      var _super7 = _createSuper(Radar2);
      function Radar2() {
        _classCallCheck(this, Radar2);
        return _super7.apply(this, arguments);
      }
      _createClass(Radar2, [{
        key: "render",
        value: function render() {
          var _this9 = this;
          return _react["default"].createElement(ChartComponent, _extends({}, this.props, {
            ref: function ref(_ref6) {
              return _this9.chartInstance = _ref6 && _ref6.chartInstance;
            },
            type: "radar"
          }));
        }
      }]);
      return Radar2;
    }(_react["default"].Component);
    exports.Radar = Radar;
    var Polar = function(_React$Component8) {
      _inherits(Polar2, _React$Component8);
      var _super8 = _createSuper(Polar2);
      function Polar2() {
        _classCallCheck(this, Polar2);
        return _super8.apply(this, arguments);
      }
      _createClass(Polar2, [{
        key: "render",
        value: function render() {
          var _this10 = this;
          return _react["default"].createElement(ChartComponent, _extends({}, this.props, {
            ref: function ref(_ref7) {
              return _this10.chartInstance = _ref7 && _ref7.chartInstance;
            },
            type: "polarArea"
          }));
        }
      }]);
      return Polar2;
    }(_react["default"].Component);
    exports.Polar = Polar;
    var Bubble = function(_React$Component9) {
      _inherits(Bubble2, _React$Component9);
      var _super9 = _createSuper(Bubble2);
      function Bubble2() {
        _classCallCheck(this, Bubble2);
        return _super9.apply(this, arguments);
      }
      _createClass(Bubble2, [{
        key: "render",
        value: function render() {
          var _this11 = this;
          return _react["default"].createElement(ChartComponent, _extends({}, this.props, {
            ref: function ref(_ref8) {
              return _this11.chartInstance = _ref8 && _ref8.chartInstance;
            },
            type: "bubble"
          }));
        }
      }]);
      return Bubble2;
    }(_react["default"].Component);
    exports.Bubble = Bubble;
    var Scatter = function(_React$Component10) {
      _inherits(Scatter2, _React$Component10);
      var _super10 = _createSuper(Scatter2);
      function Scatter2() {
        _classCallCheck(this, Scatter2);
        return _super10.apply(this, arguments);
      }
      _createClass(Scatter2, [{
        key: "render",
        value: function render() {
          var _this12 = this;
          return _react["default"].createElement(ChartComponent, _extends({}, this.props, {
            ref: function ref(_ref9) {
              return _this12.chartInstance = _ref9 && _ref9.chartInstance;
            },
            type: "scatter"
          }));
        }
      }]);
      return Scatter2;
    }(_react["default"].Component);
    exports.Scatter = Scatter;
    var defaults2 = _chart["default"].defaults;
    exports.defaults = defaults2;
  }
});

// node_modules/react-ui-cards/dist/index.js
var require_dist = __commonJS({
  "node_modules/react-ui-cards/dist/index.js"(exports, module2) {
    !function(e, t) {
      "object" == typeof exports && "object" == typeof module2 ? module2.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? exports.reactUiCards = t() : e.reactUiCards = t();
    }(self, () => (() => {
      "use strict";
      var e = { 889: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-Card-styles-module__card--9xEbS{position:relative;max-width:100%;width:250px;min-width:250px;min-height:350px;display:flex;flex-flow:column;background-color:#ecf0f1;border-radius:.25rem;margin:1rem;user-select:none;transition:.25s}.src-Card-styles-module__card--9xEbS.src-Card-styles-module__float--uXoM\\+:hover{transform:translateY(-8px);box-shadow:0 10px 10px -10px #7f8c8d}", "", { version: 3, sources: ["webpack://./src/Card/styles.module.scss"], names: [], mappings: "AAAA,qCACE,iBAAA,CACA,cAAA,CACA,WAAA,CACA,eAAA,CACA,gBAAA,CACA,YAAA,CACA,gBAAA,CACA,wBAAA,CACA,oBAAA,CACA,WAAA,CACA,gBAAA,CACA,eAAA,CAEA,iFACE,0BAAA,CACA,oCAAA", sourcesContent: [".card {\n  position: relative;\n  max-width: 100%;\n  width: 250px;\n  min-width: 250px;\n  min-height: 350px;\n  display: flex;\n  flex-flow: column;\n  background-color: #ecf0f1;\n  border-radius: 0.25rem;\n  margin: 1rem;\n  user-select: none;\n  transition: 0.25s;\n  \n  &.float:hover {\n    transform: translateY(-8px);\n    box-shadow: 0 10px 10px -10px rgba(#7f8c8d, 1);\n  }\n}\n"], sourceRoot: "" }]), l.locals = { card: "src-Card-styles-module__card--9xEbS", float: "src-Card-styles-module__float--uXoM+" };
        const c = l;
      }, 297: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-CryptoCard-CryptoChart-styles-module__crypto-chart--OLY0n{position:absolute;bottom:0;right:0;left:0;top:40%;display:flex;width:100%}.src-CryptoCard-CryptoChart-styles-module__crypto-chart--OLY0n canvas{height:100% !important;width:100% !important}", "", { version: 3, sources: ["webpack://./src/CryptoCard/CryptoChart/styles.module.scss"], names: [], mappings: "AAAA,+DACE,iBAAA,CACA,QAAA,CACA,OAAA,CACA,MAAA,CACA,OAAA,CACA,YAAA,CACA,UAAA,CAEA,sEACE,sBAAA,CACA,qBAAA", sourcesContent: [".crypto-chart {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  top: 40%;\n  display: flex;\n  width: 100%;\n\n  canvas {\n    height: 100% !important;\n    width: 100% !important;\n  }\n}\n"], sourceRoot: "" }]), l.locals = { "crypto-chart": "src-CryptoCard-CryptoChart-styles-module__crypto-chart--OLY0n" };
        const c = l;
      }, 781: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-CryptoCard-IconLine-styles-module__crypto-card-icon-line--acemo{display:flex;flex-flow:row;justify-content:space-between;align-items:center;font-size:18px}.src-CryptoCard-IconLine-styles-module__crypto-card-icon-line--acemo .src-CryptoCard-IconLine-styles-module__left--7MfDE,.src-CryptoCard-IconLine-styles-module__crypto-card-icon-line--acemo .src-CryptoCard-IconLine-styles-module__right--AZkh-,.src-CryptoCard-IconLine-styles-module__crypto-card-icon-line--acemo .src-CryptoCard-IconLine-styles-module__crypto-short-name--eVlhe{display:flex;flex-flow:row;flex:1 1 auto;align-items:center}.src-CryptoCard-IconLine-styles-module__crypto-card-icon-line--acemo .src-CryptoCard-IconLine-styles-module__left--7MfDE{justify-content:flex-start;color:rgba(255,255,255,.4)}.src-CryptoCard-IconLine-styles-module__crypto-card-icon-line--acemo .src-CryptoCard-IconLine-styles-module__right--AZkh-{justify-content:flex-end}.src-CryptoCard-IconLine-styles-module__crypto-card-icon-line--acemo .src-CryptoCard-IconLine-styles-module__crypto-icon--tFIxF{display:flex;height:24px}.src-CryptoCard-IconLine-styles-module__crypto-card-icon-line--acemo .src-CryptoCard-IconLine-styles-module__crypto-icon--tFIxF img{height:100%}.src-CryptoCard-IconLine-styles-module__crypto-card-icon-line--acemo .src-CryptoCard-IconLine-styles-module__crypto-short-name--eVlhe{height:100%;margin-left:.5em}.src-CryptoCard-IconLine-styles-module__crypto-card-icon-line--acemo .src-CryptoCard-IconLine-styles-module__trend--WwEzJ.src-CryptoCard-IconLine-styles-module__green--IQhKv{color:#2ecc71}.src-CryptoCard-IconLine-styles-module__crypto-card-icon-line--acemo .src-CryptoCard-IconLine-styles-module__trend--WwEzJ.src-CryptoCard-IconLine-styles-module__yellow--A-h4\\+{color:#f1c40f}.src-CryptoCard-IconLine-styles-module__crypto-card-icon-line--acemo .src-CryptoCard-IconLine-styles-module__trend--WwEzJ.src-CryptoCard-IconLine-styles-module__red--DI0UY{color:#e74c3c}", "", { version: 3, sources: ["webpack://./src/CryptoCard/IconLine/styles.module.scss"], names: [], mappings: "AAAA,qEACE,YAAA,CACA,aAAA,CACA,6BAAA,CACA,kBAAA,CACA,cAAA,CAEA,yXAGE,YAAA,CACA,aAAA,CACA,aAAA,CACA,kBAAA,CAGF,yHACE,0BAAA,CACA,0BAAA,CAGF,0HACE,wBAAA,CAGF,gIACE,YAAA,CACA,WAAA,CAEA,oIACE,WAAA,CAIJ,sIACE,WAAA,CACA,gBAAA,CAIA,8KACE,aAAA,CAGF,gLACE,aAAA,CAGF,4KACE,aAAA", sourcesContent: [".crypto-card-icon-line {\n  display: flex;\n  flex-flow: row;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 18px;\n\n  .left,\n  .right,\n  .crypto-short-name {\n    display: flex;\n    flex-flow: row;\n    flex: 1 1 auto;\n    align-items: center;\n  }\n\n  .left {\n    justify-content: flex-start;\n    color: rgba(#fff, 0.4);\n  }\n\n  .right {\n    justify-content: flex-end;\n  }\n\n  .crypto-icon {\n    display: flex;\n    height: 24px;\n\n    img {\n      height: 100%;\n    }\n  }\n\n  .crypto-short-name {\n    height: 100%;\n    margin-left: 0.5em;\n  }\n\n  .trend {\n    &.green {\n      color: #2ecc71;\n    }\n\n    &.yellow {\n      color: #f1c40f;\n    }\n\n    &.red {\n      color: #e74c3c;\n    }\n  }\n}\n"], sourceRoot: "" }]), l.locals = { "crypto-card-icon-line": "src-CryptoCard-IconLine-styles-module__crypto-card-icon-line--acemo", left: "src-CryptoCard-IconLine-styles-module__left--7MfDE", right: "src-CryptoCard-IconLine-styles-module__right--AZkh-", "crypto-short-name": "src-CryptoCard-IconLine-styles-module__crypto-short-name--eVlhe", "crypto-icon": "src-CryptoCard-IconLine-styles-module__crypto-icon--tFIxF", trend: "src-CryptoCard-IconLine-styles-module__trend--WwEzJ", green: "src-CryptoCard-IconLine-styles-module__green--IQhKv", yellow: "src-CryptoCard-IconLine-styles-module__yellow--A-h4+", red: "src-CryptoCard-IconLine-styles-module__red--DI0UY" };
        const c = l;
      }, 615: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-CryptoCard-TitleLine-styles-module__crypto-card-title-line--IIp9B{display:flex;flex-flow:row;justify-content:space-between;align-items:center;margin-bottom:.5rem;font-size:20px;color:#fff}", "", { version: 3, sources: ["webpack://./src/CryptoCard/TitleLine/styles.module.scss"], names: [], mappings: "AAAA,uEACE,YAAA,CACA,aAAA,CACA,6BAAA,CACA,kBAAA,CACA,mBAAA,CACA,cAAA,CAEA,UAAA", sourcesContent: [".crypto-card-title-line {\n  display: flex;\n  flex-flow: row;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 0.5rem;\n  font-size: 20px;\n\n  color: #FFF;\n}\n"], sourceRoot: "" }]), l.locals = { "crypto-card-title-line": "src-CryptoCard-TitleLine-styles-module__crypto-card-title-line--IIp9B" };
        const c = l;
      }, 149: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-CryptoCard-styles-module__crypto-card--JFjLG{display:flex;background:rgba(63,76,107,.35);min-width:auto;min-height:auto;width:24rem;height:14rem;font-family:Roboto;padding:1rem}", "", { version: 3, sources: ["webpack://./src/CryptoCard/styles.module.scss"], names: [], mappings: "AAAA,kDACE,YAAA,CAEA,8BAAA,CAEA,cAAA,CACA,eAAA,CACA,WAAA,CACA,YAAA,CACA,kBAAA,CAEA,YAAA", sourcesContent: [".crypto-card {\n  display: flex;\n\n  background: rgba(#3f4c6b, 0.35);\n\n  min-width: auto;\n  min-height: auto;\n  width: 24rem;\n  height: 14rem;\n  font-family: Roboto;\n\n  padding: 1rem;\n\n}\n"], sourceRoot: "" }]), l.locals = { "crypto-card": "src-CryptoCard-styles-module__crypto-card--JFjLG" };
        const c = l;
      }, 524: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-FlippingCard-FlippingCardBack-styles-module__back--CEs3J{position:absolute;width:100%;height:100%;backface-visibility:hidden;top:0;left:0;transform:rotateY(180deg);border-radius:.25rem;overflow:hidden}", "", { version: 3, sources: ["webpack://./src/FlippingCard/FlippingCardBack/styles.module.scss"], names: [], mappings: "AAAA,8DACE,iBAAA,CACA,UAAA,CACA,WAAA,CAEA,0BAAA,CACA,KAAA,CACA,MAAA,CACA,yBAAA,CACA,oBAAA,CACA,eAAA", sourcesContent: [".back {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n\n  backface-visibility: hidden;\n  top: 0;\n  left: 0;\n  transform: rotateY(180deg);\n  border-radius: 0.25rem;\n  overflow: hidden;\n}\n"], sourceRoot: "" }]), l.locals = { back: "src-FlippingCard-FlippingCardBack-styles-module__back--CEs3J" };
        const c = l;
      }, 27: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-FlippingCard-FlippingCardFront-styles-module__front--0CD5y{position:absolute;width:100%;height:100%;backface-visibility:hidden;top:0;left:0;z-index:2;transform:rotateY(0deg);border-radius:.25rem;overflow:hidden}", "", { version: 3, sources: ["webpack://./src/FlippingCard/FlippingCardFront/styles.module.scss"], names: [], mappings: "AAAA,gEACE,iBAAA,CACA,UAAA,CACA,WAAA,CAEA,0BAAA,CACA,KAAA,CACA,MAAA,CACA,SAAA,CACA,uBAAA,CACA,oBAAA,CACA,eAAA", sourcesContent: [".front {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n\n  backface-visibility: hidden;\n  top: 0;\n  left: 0;\n  z-index: 2;\n  transform: rotateY(0deg);\n  border-radius: 0.25rem;\n  overflow: hidden;\n}\n"], sourceRoot: "" }]), l.locals = { front: "src-FlippingCard-FlippingCardFront-styles-module__front--0CD5y" };
        const c = l;
      }, 316: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-FlippingCard-styles-module__flipping-card-container--Yybzy{perspective:1000px;background-color:rgba(0,0,0,0);transition:.5s}.src-FlippingCard-styles-module__flipping-card-container--Yybzy:hover .src-FlippingCard-styles-module__flipping-card--sRxLr{transform:rotateY(180deg)}.src-FlippingCard-styles-module__flipping-card--sRxLr{position:absolute;width:100%;height:100%;perspective:1000px;transition:.5s;transform-style:preserve-3d}", "", { version: 3, sources: ["webpack://./src/FlippingCard/styles.module.scss"], names: [], mappings: "AAAA,gEACE,kBAAA,CACA,8BAAA,CACA,cAAA,CAGE,4HACE,yBAAA,CAKN,sDACE,iBAAA,CACA,UAAA,CACA,WAAA,CAEA,kBAAA,CACA,cAAA,CACA,2BAAA", sourcesContent: [".flipping-card-container {\n  perspective: 1000px;\n  background-color: transparent;\n  transition: 0.5s;\n  \n  &:hover {\n    .flipping-card {\n      transform: rotateY(180deg);\n    }\n  }\n}\n\n.flipping-card {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  \n  perspective: 1000px;\n  transition: 0.5s;\n  transform-style: preserve-3d;\n}\n"], sourceRoot: "" }]), l.locals = { "flipping-card-container": "src-FlippingCard-styles-module__flipping-card-container--Yybzy", "flipping-card": "src-FlippingCard-styles-module__flipping-card--sRxLr" };
        const c = l;
      }, 927: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-NewsHeaderCard-NewsHeader-styles-module__news-header--gAxlL{position:absolute;bottom:0;flex-flow:row;color:#fafafa;width:100%;padding:1rem;box-sizing:border-box;z-index:2;text-decoration:none}.src-NewsHeaderCard-NewsHeader-styles-module__news-header--gAxlL div{display:flex;flex-flow:row;align-items:center;border:none;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.src-NewsHeaderCard-NewsHeader-styles-module__news-header--gAxlL .src-NewsHeaderCard-NewsHeader-styles-module__title--FSNqa{padding-bottom:.75rem;display:block;justify-content:center;font-size:1.5rem}.src-NewsHeaderCard-NewsHeader-styles-module__news-header--gAxlL .src-NewsHeaderCard-NewsHeader-styles-module__bottom--Bmdm8{justify-content:space-between}.src-NewsHeaderCard-NewsHeader-styles-module__news-header--gAxlL .src-NewsHeaderCard-NewsHeader-styles-module__tags--VoIWD{display:flex;justify-content:flex-end;width:100%;margin-top:.25rem}.src-NewsHeaderCard-NewsHeader-styles-module__news-header--gAxlL .src-NewsHeaderCard-NewsHeader-styles-module__tags--VoIWD .src-NewsHeaderCard-NewsHeader-styles-module__tag--4\\+D8b{margin:0 .5rem;padding:.25rem .75rem;background-color:rgba(255,255,255,.35);border-radius:2rem}", "", { version: 3, sources: ["webpack://./src/NewsHeaderCard/NewsHeader/styles.module.scss"], names: [], mappings: "AAAA,iEACE,iBAAA,CACA,QAAA,CACA,aAAA,CACA,aAAA,CACA,UAAA,CACA,YAAA,CACA,qBAAA,CACA,SAAA,CACA,oBAAA,CAEA,qEACE,YAAA,CACA,aAAA,CACA,kBAAA,CACA,WAAA,CACA,kBAAA,CACA,eAAA,CACA,sBAAA,CAGF,4HACE,qBAAA,CACA,aAAA,CACA,sBAAA,CACA,gBAAA,CAGF,6HACE,6BAAA,CAGF,2HACE,YAAA,CACA,wBAAA,CACA,UAAA,CACA,iBAAA,CAEA,qLACE,cAAA,CACA,qBAAA,CACA,sCAAA,CACA,kBAAA", sourcesContent: [".news-header{\n  position: absolute;\n  bottom: 0;\n  flex-flow: row;\n  color: #FAFAFA;\n  width: 100%;\n  padding: 1rem;\n  box-sizing: border-box;\n  z-index: 2;\n  text-decoration: none;\n  \n  div{\n    display: flex;\n    flex-flow: row;\n    align-items: center;\n    border: none;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  .title{\n    padding-bottom: 0.75rem;\n    display: block;\n    justify-content: center;\n    font-size: 1.5rem;\n  }\n\n  .bottom{\n    justify-content: space-between;\n  }\n\n  .tags {\n    display: flex;\n    justify-content: flex-end;\n    width: 100%;\n    margin-top: 0.25rem;\n\n    .tag {\n      margin: 0 0.5rem;\n      padding: 0.25rem 0.75rem;\n      background-color: rgba(255, 255, 255, 0.35);\n      border-radius: 2rem;\n    }\n  }\n}\n"], sourceRoot: "" }]), l.locals = { "news-header": "src-NewsHeaderCard-NewsHeader-styles-module__news-header--gAxlL", title: "src-NewsHeaderCard-NewsHeader-styles-module__title--FSNqa", bottom: "src-NewsHeaderCard-NewsHeader-styles-module__bottom--Bmdm8", tags: "src-NewsHeaderCard-NewsHeader-styles-module__tags--VoIWD", tag: "src-NewsHeaderCard-NewsHeader-styles-module__tag--4+D8b" };
        const c = l;
      }, 201: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-NewsHeaderCard-NewsHeaderBackground-styles-module__news-header-background--8Yn60{display:flex;flex-flow:column;justify-content:flex-start;align-items:center;overflow:hidden;position:absolute;top:0;left:0;right:0;bottom:0;background-color:#000;z-index:1}.src-NewsHeaderCard-NewsHeaderBackground-styles-module__news-header-background--8Yn60 .src-NewsHeaderCard-NewsHeaderBackground-styles-module__overlay--bQR46{position:absolute;top:0;bottom:0;left:0;right:0;background-image:linear-gradient(0deg, rgba(0, 0, 0, 0.9) 0%, rgba(0, 0, 0, 0.2) 35%, rgba(0, 0, 0, 0) 100%);pointer-events:none;z-index:10}.src-NewsHeaderCard-NewsHeaderBackground-styles-module__news-header-background--8Yn60 .src-NewsHeaderCard-NewsHeaderBackground-styles-module__thumbnail--3wd0Y{display:flex;justify-content:center;align-items:center;width:100%;transition:.4s}.src-NewsHeaderCard-NewsHeaderBackground-styles-module__news-header-background--8Yn60 .src-NewsHeaderCard-NewsHeaderBackground-styles-module__thumbnail--3wd0Y:hover{transform:scale(1.1);opacity:.75}.src-NewsHeaderCard-NewsHeaderBackground-styles-module__news-header-background--8Yn60 div{width:100%;height:100%;background-size:cover;background-position:center}", "", { version: 3, sources: ["webpack://./src/NewsHeaderCard/NewsHeaderBackground/styles.module.scss"], names: [], mappings: "AAAA,sFACE,YAAA,CACA,gBAAA,CACA,0BAAA,CACA,kBAAA,CACA,eAAA,CACA,iBAAA,CACA,KAAA,CACA,MAAA,CACA,OAAA,CACA,QAAA,CACA,qBAAA,CACA,SAAA,CAEA,6JACE,iBAAA,CACA,KAAA,CACA,QAAA,CACA,MAAA,CACA,OAAA,CACA,4GAAA,CACA,mBAAA,CACA,UAAA,CAGF,+JACE,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,UAAA,CACA,cAAA,CAEA,qKACE,oBAAA,CACA,WAAA,CAIJ,0FACE,UAAA,CACA,WAAA,CACA,qBAAA,CACA,0BAAA", sourcesContent: [".news-header-background{\n  display: flex;\n  flex-flow: column;\n  justify-content: flex-start;\n  align-items: center;\n  overflow: hidden;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: black;\n  z-index: 1;\n  \n  .overlay {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background-image: linear-gradient(0deg, rgba(0, 0, 0, 0.9) 0%, rgba(0, 0, 0, 0.2) 35%, rgba(0, 0, 0, 0.0) 100%);\n    pointer-events : none;\n    z-index: 10;\n  }\n\n  .thumbnail{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    transition: 0.4s;\n\n    &:hover {\n      transform: scale(1.1);\n      opacity: 0.75;\n    }\n  }\n\n  div{\n    width: 100%;\n    height: 100%;\n    background-size: cover;\n    background-position: center;\n  }\n}\n"], sourceRoot: "" }]), l.locals = { "news-header-background": "src-NewsHeaderCard-NewsHeaderBackground-styles-module__news-header-background--8Yn60", overlay: "src-NewsHeaderCard-NewsHeaderBackground-styles-module__overlay--bQR46", thumbnail: "src-NewsHeaderCard-NewsHeaderBackground-styles-module__thumbnail--3wd0Y" };
        const c = l;
      }, 165: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-NewsHeaderCard-styles-module__news-header-card--zsMEl{position:relative;display:flex;flex-flow:column;width:450px;height:100%}", "", { version: 3, sources: ["webpack://./src/NewsHeaderCard/styles.module.scss"], names: [], mappings: "AAAA,2DACE,iBAAA,CACA,YAAA,CACA,gBAAA,CACA,WAAA,CACA,WAAA", sourcesContent: [".news-header-card{\n  position: relative;\n  display: flex;\n  flex-flow: column;\n  width:450px;\n  height: 100%;\n}\n\n"], sourceRoot: "" }]), l.locals = { "news-header-card": "src-NewsHeaderCard-styles-module__news-header-card--zsMEl" };
        const c = l;
      }, 277: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-PaymentCard-Chip-styles-module__chip-container--gbQcV{position:relative;display:flex;flex-flow:row;justify-content:flex-start;width:100%}.src-PaymentCard-Chip-styles-module__chip--5nu\\+A{position:relative;border-radius:.5rem;width:3rem;height:2.25rem;background:linear-gradient(135deg, #ffb347, #ffcc33);border:2px solid rgba(44,62,80,.2);margin-left:2rem;z-index:10}", "", { version: 3, sources: ["webpack://./src/PaymentCard/Chip/styles.module.scss"], names: [], mappings: "AAAA,2DACE,iBAAA,CACA,YAAA,CACA,aAAA,CACA,0BAAA,CACA,UAAA,CAGF,kDACE,iBAAA,CACA,mBAAA,CACA,UAAA,CACA,cAAA,CACA,oDAAA,CACA,kCAAA,CACA,gBAAA,CACA,UAAA", sourcesContent: [".chip-container {\n  position: relative;\n  display: flex;\n  flex-flow: row;\n  justify-content: flex-start;\n  width: 100%;\n}\n\n.chip {\n  position: relative;\n  border-radius: 0.5rem;\n  width: 3rem;\n  height: 2.25rem;\n  background: linear-gradient(135deg, #ffb347, #ffcc33);\n  border: 2px solid rgba(#2c3e50, 0.2);\n  margin-left: 2rem;\n  z-index: 10;\n}\n"], sourceRoot: "" }]), l.locals = { "chip-container": "src-PaymentCard-Chip-styles-module__chip-container--gbQcV", chip: "src-PaymentCard-Chip-styles-module__chip--5nu+A" };
        const c = l;
      }, 383: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-PaymentCard-IssuerIcon-styles-module__issuer-icon--WqMcG{position:relative;z-index:10;display:flex;align-items:flex-start;flex-flow:row;justify-content:flex-end;box-sizing:border-box;width:100%;padding:1.5rem 1.5rem 0}.src-PaymentCard-IssuerIcon-styles-module__issuer-icon--WqMcG img{width:20%}", "", { version: 3, sources: ["webpack://./src/PaymentCard/IssuerIcon/styles.module.scss"], names: [], mappings: "AAAA,8DACE,iBAAA,CACA,UAAA,CAEA,YAAA,CACA,sBAAA,CACA,aAAA,CACA,wBAAA,CAEA,qBAAA,CACA,UAAA,CACA,uBAAA,CAEA,kEACE,SAAA", sourcesContent: [".issuer-icon {\n  position: relative;\n  z-index: 10;\n\n  display: flex;\n  align-items: flex-start;\n  flex-flow: row;\n  justify-content: flex-end;\n\n  box-sizing: border-box;\n  width: 100%;\n  padding: 1.5rem 1.5rem 0;\n\n  img {\n    width: 20%;\n  }\n}\n"], sourceRoot: "" }]), l.locals = { "issuer-icon": "src-PaymentCard-IssuerIcon-styles-module__issuer-icon--WqMcG" };
        const c = l;
      }, 164: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, '.src-PaymentCard-PaymentCardBack-styles-module__payment-card-back--bm6bY{position:relative;display:flex;flex-flow:column;width:100%;height:100%}.src-PaymentCard-PaymentCardBack-styles-module__payment-card-back--bm6bY .src-PaymentCard-PaymentCardBack-styles-module__magnetic-stripe--6DO1d{width:100%;height:3rem;margin-top:1rem;background:#2c3e50}.src-PaymentCard-PaymentCardBack-styles-module__payment-card-back--bm6bY .src-PaymentCard-PaymentCardBack-styles-module__signature-field--me5aY{display:flex;align-items:flex-end;flex-flow:row;justify-content:flex-end;height:2rem;margin-top:.5rem;margin-right:6rem;margin-left:.5rem;background-image:repeating-linear-gradient(180deg, #f1c40f, #f1c40f 3px, #ecf0f1 3px, #ecf0f1 6px)}.src-PaymentCard-PaymentCardBack-styles-module__payment-card-back--bm6bY .src-PaymentCard-PaymentCardBack-styles-module__cvv--edHLX{color:#2c3e50;font-family:"OCR A Std"}', "", { version: 3, sources: ["webpack://./src/PaymentCard/PaymentCardBack/styles.module.scss"], names: [], mappings: "AAAA,yEACE,iBAAA,CAEA,YAAA,CACA,gBAAA,CAEA,UAAA,CACA,WAAA,CAEA,gJACE,UAAA,CACA,WAAA,CACA,eAAA,CAEA,kBAAA,CAGF,gJACE,YAAA,CACA,oBAAA,CACA,aAAA,CACA,wBAAA,CAEA,WAAA,CACA,gBAAA,CACA,iBAAA,CACA,iBAAA,CAEA,kGAAA,CAGF,oIACE,aAAA,CAEA,uBAAA", sourcesContent: [".payment-card-back {\n  position: relative;\n\n  display: flex;\n  flex-flow: column;\n\n  width: 100%;\n  height: 100%;\n\n  .magnetic-stripe {\n    width: 100%;\n    height: 3rem;\n    margin-top: 1rem;\n\n    background: #2c3e50;\n  }\n\n  .signature-field {\n    display: flex;\n    align-items: flex-end;\n    flex-flow: row;\n    justify-content: flex-end;\n\n    height: 2rem;\n    margin-top: 0.5rem;\n    margin-right: 6rem;\n    margin-left: 0.5rem;\n\n    background-image: repeating-linear-gradient(180deg, #f1c40f, #f1c40f 3px, #ecf0f1 3px, #ecf0f1 6px);\n  }\n\n  .cvv {\n    color: #2c3e50;\n\n    font-family: 'OCR A Std';\n  }\n}\n"], sourceRoot: "" }]), l.locals = { "payment-card-back": "src-PaymentCard-PaymentCardBack-styles-module__payment-card-back--bm6bY", "magnetic-stripe": "src-PaymentCard-PaymentCardBack-styles-module__magnetic-stripe--6DO1d", "signature-field": "src-PaymentCard-PaymentCardBack-styles-module__signature-field--me5aY", cvv: "src-PaymentCard-PaymentCardBack-styles-module__cvv--edHLX" };
        const c = l;
      }, 954: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-PaymentCard-PaymentCardBackground-styles-module__payment-card-background--rnmMA{position:absolute;top:0;bottom:0;left:0;right:0}.src-PaymentCard-PaymentCardBackground-styles-module__payment-card-background--rnmMA .src-PaymentCard-PaymentCardBackground-styles-module__svg-background--7aKIU{position:relative;width:100%;height:100%}.src-PaymentCard-PaymentCardBackground-styles-module__payment-card-background--rnmMA .src-PaymentCard-PaymentCardBackground-styles-module__svg-background--7aKIU.src-PaymentCard-PaymentCardBackground-styles-module__triangles--ch7gm>svg{opacity:.4;top:-25%}.src-PaymentCard-PaymentCardBackground-styles-module__payment-card-background--rnmMA .src-PaymentCard-PaymentCardBackground-styles-module__svg-background--7aKIU.src-PaymentCard-PaymentCardBackground-styles-module__worldMap--Q0RyI>svg{top:-40%;opacity:.6}.src-PaymentCard-PaymentCardBackground-styles-module__payment-card-background--rnmMA .src-PaymentCard-PaymentCardBackground-styles-module__svg-background--7aKIU.src-PaymentCard-PaymentCardBackground-styles-module__spiral--RPWuv>svg{top:0;height:100%;width:auto;opacity:.5}.src-PaymentCard-PaymentCardBackground-styles-module__payment-card-background--rnmMA svg{position:relative;width:100%;fill:#ecf0f1}", "", { version: 3, sources: ["webpack://./src/PaymentCard/PaymentCardBackground/styles.module.scss"], names: [], mappings: "AAAA,qFACE,iBAAA,CACA,KAAA,CACA,QAAA,CACA,MAAA,CACA,OAAA,CAEA,iKACE,iBAAA,CACA,UAAA,CACA,WAAA,CAEA,2OACE,UAAA,CACA,QAAA,CAGF,0OACE,QAAA,CACA,UAAA,CAGF,wOACE,KAAA,CACA,WAAA,CACA,UAAA,CACA,UAAA,CAIJ,yFACE,iBAAA,CACA,UAAA,CACA,YAAA", sourcesContent: [".payment-card-background {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n\n  .svg-background {\n    position: relative;\n    width: 100%;\n    height: 100%;\n\n    &.triangles>svg {\n      opacity: 0.4;\n      top: -25%;\n    }\n\n    &.worldMap>svg {\n      top: -40%;\n      opacity: 0.6;\n    }\n\n    &.spiral>svg {\n      top: 0;\n      height: 100%;\n      width: auto;\n      opacity: 0.5;\n    }\n  }\n\n  svg {\n    position: relative;\n    width: 100%;\n    fill: #ecf0f1;\n  }\n}\n"], sourceRoot: "" }]), l.locals = { "payment-card-background": "src-PaymentCard-PaymentCardBackground-styles-module__payment-card-background--rnmMA", "svg-background": "src-PaymentCard-PaymentCardBackground-styles-module__svg-background--7aKIU", triangles: "src-PaymentCard-PaymentCardBackground-styles-module__triangles--ch7gm", worldMap: "src-PaymentCard-PaymentCardBackground-styles-module__worldMap--Q0RyI", spiral: "src-PaymentCard-PaymentCardBackground-styles-module__spiral--RPWuv" };
        const c = l;
      }, 489: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, '.src-PaymentCard-PaymentCardDate-styles-module__payment-card-date--G2nXd{position:relative;z-index:10;display:flex;flex-flow:column;color:#ecf0f1}.src-PaymentCard-PaymentCardDate-styles-module__payment-card-date--G2nXd .src-PaymentCard-PaymentCardDate-styles-module__valid-date--9JHYq{padding-left:6.5rem;text-transform:uppercase;font-size:10px;font-weight:bold}.src-PaymentCard-PaymentCardDate-styles-module__payment-card-date--G2nXd .src-PaymentCard-PaymentCardDate-styles-module__to-date--A-gRM{padding-left:6.5rem;text-shadow:0px 1px 3px rgba(44,62,80,.7);font-family:"OCR A Std";font-size:14px}', "", { version: 3, sources: ["webpack://./src/PaymentCard/PaymentCardDate/styles.module.scss"], names: [], mappings: "AAAA,yEACE,iBAAA,CACA,UAAA,CAEA,YAAA,CACA,gBAAA,CAEA,aAAA,CAEA,2IACE,mBAAA,CAEA,wBAAA,CAEA,cAAA,CACA,gBAAA,CAGF,wIACE,mBAAA,CAEA,yCAAA,CAEA,uBAAA,CACA,cAAA", sourcesContent: [".payment-card-date {\n  position: relative;\n  z-index: 10;\n\n  display: flex;\n  flex-flow: column;\n\n  color: #ecf0f1;\n\n  .valid-date {\n    padding-left: 6.5rem;\n\n    text-transform: uppercase;\n\n    font-size: 10px;\n    font-weight: bold;\n  }\n\n  .to-date {\n    padding-left: 6.5rem;\n\n    text-shadow: 0px 1px 3px rgba(#2c3e50, 0.7);\n\n    font-family: 'OCR A Std';\n    font-size: 14px;\n  }\n}\n"], sourceRoot: "" }]), l.locals = { "payment-card-date": "src-PaymentCard-PaymentCardDate-styles-module__payment-card-date--G2nXd", "valid-date": "src-PaymentCard-PaymentCardDate-styles-module__valid-date--9JHYq", "to-date": "src-PaymentCard-PaymentCardDate-styles-module__to-date--A-gRM" };
        const c = l;
      }, 560: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, '.src-PaymentCard-PaymentCardName-styles-module__payment-card-name--4GLm4{position:relative;color:#ecf0f1;z-index:10;font-family:"OCR A Std";text-transform:uppercase;text-shadow:0px 1px 3px rgba(44,62,80,.7);margin-left:1.3rem;margin-top:.5rem;font-size:14px}', "", { version: 3, sources: ["webpack://./src/PaymentCard/PaymentCardName/styles.module.scss"], names: [], mappings: "AAAA,yEACE,iBAAA,CACA,aAAA,CACA,UAAA,CACA,uBAAA,CACA,wBAAA,CACA,yCAAA,CACA,kBAAA,CACA,gBAAA,CACA,cAAA", sourcesContent: [".payment-card-name {\n  position: relative;\n  color: #ecf0f1;\n  z-index: 10;\n  font-family: 'OCR A Std';\n  text-transform: uppercase;\n  text-shadow: 0px 1px 3px rgba(#2c3e50, 0.7);\n  margin-left: 1.3rem;\n  margin-top: 0.5rem;\n  font-size: 14px;\n}\n"], sourceRoot: "" }]), l.locals = { "payment-card-name": "src-PaymentCard-PaymentCardName-styles-module__payment-card-name--4GLm4" };
        const c = l;
      }, 584: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, '.src-PaymentCard-PaymentCardNumber-styles-module__payment-card-number--BQFsw{position:relative;z-index:10;display:flex;align-items:center;flex-flow:column;justify-content:center;margin-top:1rem;letter-spacing:.4px;color:#ecf0f1;font-family:"OCR A Std";font-size:21px;opacity:.85;text-shadow:0px 1px 3px rgba(44,62,80,.7)}', "", { version: 3, sources: ["webpack://./src/PaymentCard/PaymentCardNumber/styles.module.scss"], names: [], mappings: "AAAA,6EACE,iBAAA,CACA,UAAA,CAEA,YAAA,CACA,kBAAA,CACA,gBAAA,CACA,sBAAA,CACA,eAAA,CAEA,mBAAA,CAEA,aAAA,CAEA,uBAAA,CACA,cAAA,CACA,WAAA,CACA,yCAAA", sourcesContent: [".payment-card-number {\n  position: relative;\n  z-index: 10;\n\n  display: flex;\n  align-items: center;\n  flex-flow: column;\n  justify-content: center;\n  margin-top: 1rem;\n\n  letter-spacing: 0.4px;\n\n  color: #ecf0f1;\n\n  font-family: 'OCR A Std';\n  font-size: 21px;\n  opacity: 0.85;\n  text-shadow: 0px 1px 3px rgba(#2c3e50, 0.7);\n}\n"], sourceRoot: "" }]), l.locals = { "payment-card-number": "src-PaymentCard-PaymentCardNumber-styles-module__payment-card-number--BQFsw" };
        const c = l;
      }, 745: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-PaymentCard-styles-module__payment-card--MU\\+iK{width:21rem;min-width:21rem;max-width:21rem;height:13.5rem;min-height:13.5rem;max-height:13.5rem}.src-PaymentCard-styles-module__payment-card--MU\\+iK .src-PaymentCard-styles-module__front--u0-5h{display:flex;flex-flow:column}", "", { version: 3, sources: ["webpack://./src/PaymentCard/styles.module.scss"], names: [], mappings: "AAAA,qDACE,WAAA,CACA,eAAA,CACA,eAAA,CACA,cAAA,CACA,kBAAA,CACA,kBAAA,CAEA,kGACE,YAAA,CACA,gBAAA", sourcesContent: [".payment-card {\n  width: 21rem;\n  min-width: 21rem;\n  max-width: 21rem;\n  height: 13.5rem;\n  min-height: 13.5rem;\n  max-height: 13.5rem;\n\n  .front {\n    display: flex;\n    flex-flow: column;\n  }\n}\n"], sourceRoot: "" }]), l.locals = { "payment-card": "src-PaymentCard-styles-module__payment-card--MU+iK", front: "src-PaymentCard-styles-module__front--u0-5h" };
        const c = l;
      }, 267: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-ProductCard-PriceTag-styles-module__price-tag--lQ2OU{position:absolute;background-color:rgba(44,62,80,.95);color:#ecf0f1;border-radius:.25rem;padding:.125rem .5rem;top:1rem;left:1rem}", "", { version: 3, sources: ["webpack://./src/ProductCard/PriceTag/styles.module.scss"], names: [], mappings: "AAAA,0DACE,iBAAA,CACA,mCAAA,CACA,aAAA,CACA,oBAAA,CACA,qBAAA,CACA,QAAA,CACA,SAAA", sourcesContent: [".price-tag {\n  position: absolute;\n  background-color: rgba(#2c3e50, 0.95);\n  color: #ecf0f1;\n  border-radius: 0.25rem;\n  padding: 0.125rem 0.5rem;\n  top: 1rem;\n  left: 1rem;\n}\n"], sourceRoot: "" }]), l.locals = { "price-tag": "src-ProductCard-PriceTag-styles-module__price-tag--lQ2OU" };
        const c = l;
      }, 134: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-ProductCard-ProductCardDescription-styles-module__product-card-description-box--bFI5e{display:flex;flex-flow:column;justify-content:flex-start;flex:0 0 auto;height:50%;padding:1.5rem 2rem;box-sizing:border-box;background-color:#ecf0f1}.src-ProductCard-ProductCardDescription-styles-module__product-card-description-box--bFI5e .src-ProductCard-ProductCardDescription-styles-module__row--I3loI{display:flex;flex-flow:row;margin-top:.5rem}.src-ProductCard-ProductCardDescription-styles-module__product-card-name--Xwnxx{text-transform:uppercase;font-size:1.5rem;letter-spacing:3px;color:#2c3e50}.src-ProductCard-ProductCardDescription-styles-module__product-card-description--FgEFP{color:#2c3e50;font-size:.75rem;letter-spacing:2px}.src-ProductCard-ProductCardDescription-styles-module__buy-button--KoTnH{padding:.75rem 1.5rem;font-size:.75rem;text-decoration:none;text-transform:uppercase;letter-spacing:3px;color:#ecf0f1;background-color:#1abc9c;border-radius:.25rem;transition:.25s}.src-ProductCard-ProductCardDescription-styles-module__buy-button--KoTnH:hover,.src-ProductCard-ProductCardDescription-styles-module__buy-button--KoTnH:focus,.src-ProductCard-ProductCardDescription-styles-module__buy-button--KoTnH:active{background-color:#16a085}.src-ProductCard-ProductCardDescription-styles-module__buy-button-disabled--IyGEu{padding:.75rem 1.5rem;font-size:.75rem;text-decoration:none;text-transform:uppercase;letter-spacing:3px;color:#f5e6e6;background-color:#ccc;border-radius:.25rem;transition:.25s;cursor:default}", "", { version: 3, sources: ["webpack://./src/ProductCard/ProductCardDescription/styles.module.scss"], names: [], mappings: "AAAA,2FACE,YAAA,CACA,gBAAA,CACA,0BAAA,CAEA,aAAA,CACA,UAAA,CACA,mBAAA,CACA,qBAAA,CACA,wBAAA,CAEA,6JACE,YAAA,CACA,aAAA,CACA,gBAAA,CAIJ,gFACE,wBAAA,CACA,gBAAA,CACA,kBAAA,CACA,aAAA,CAGF,uFACE,aAAA,CACA,gBAAA,CACA,kBAAA,CAGF,yEACE,qBAAA,CACA,gBAAA,CACA,oBAAA,CACA,wBAAA,CACA,kBAAA,CACA,aAAA,CACA,wBAAA,CACA,oBAAA,CACA,eAAA,CAEA,8OAGE,wBAAA,CAIJ,kFACE,qBAAA,CACA,gBAAA,CACA,oBAAA,CACA,wBAAA,CACA,kBAAA,CACA,aAAA,CACA,qBAAA,CACA,oBAAA,CACA,eAAA,CACA,cAAA", sourcesContent: [".product-card-description-box {\n  display: flex;\n  flex-flow: column;\n  justify-content: flex-start;\n\n  flex: 0 0 auto;\n  height: 50%;\n  padding: 1.5rem 2rem;\n  box-sizing: border-box;\n  background-color: #ecf0f1;\n\n  .row {\n    display: flex;\n    flex-flow: row;\n    margin-top: 0.5rem;\n  }\n}\n\n.product-card-name {\n  text-transform: uppercase;\n  font-size: 1.5rem;\n  letter-spacing: 3px;\n  color: #2c3e50;\n}\n\n.product-card-description {\n  color: #2c3e50;\n  font-size: 0.75rem;\n  letter-spacing: 2px;\n}\n\n.buy-button {\n  padding: 0.75rem 1.5rem;\n  font-size: 0.75rem;\n  text-decoration: none;\n  text-transform: uppercase;\n  letter-spacing: 3px;\n  color: #ecf0f1;\n  background-color: #1abc9c;\n  border-radius: 0.25rem;\n  transition: 0.25s;\n\n  &:hover,\n  &:focus,\n  &:active {\n    background-color: #16a085;\n  }\n}\n\n.buy-button-disabled {\n  padding: 0.75rem 1.5rem;\n  font-size: 0.75rem;\n  text-decoration: none;\n  text-transform: uppercase;\n  letter-spacing: 3px;\n  color: rgb(245, 230, 230);\n  background-color: #cccccc;\n  border-radius: 0.25rem;\n  transition: 0.25s;\n  cursor: default;\n}\n"], sourceRoot: "" }]), l.locals = { "product-card-description-box": "src-ProductCard-ProductCardDescription-styles-module__product-card-description-box--bFI5e", row: "src-ProductCard-ProductCardDescription-styles-module__row--I3loI", "product-card-name": "src-ProductCard-ProductCardDescription-styles-module__product-card-name--Xwnxx", "product-card-description": "src-ProductCard-ProductCardDescription-styles-module__product-card-description--FgEFP", "buy-button": "src-ProductCard-ProductCardDescription-styles-module__buy-button--KoTnH", "buy-button-disabled": "src-ProductCard-ProductCardDescription-styles-module__buy-button-disabled--IyGEu" };
        const c = l;
      }, 459: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-ProductCard-ProductCardGallery-GalleryToggle-styles-module__gallery-toggle--CPaMH{position:absolute;display:flex;flex-flow:column;justify-content:center;align-items:center;height:100%;width:2rem;transition:.25s;color:rgba(236,240,241,.5);background-color:rgba(44,62,80,.5);opacity:0;cursor:pointer}.src-ProductCard-ProductCardGallery-GalleryToggle-styles-module__gallery-toggle--CPaMH.src-ProductCard-ProductCardGallery-GalleryToggle-styles-module__left--qCQRj{left:0;border-radius:.25rem 0 0 0}.src-ProductCard-ProductCardGallery-GalleryToggle-styles-module__gallery-toggle--CPaMH.src-ProductCard-ProductCardGallery-GalleryToggle-styles-module__right--4fcb2{right:0;border-radius:0 .25rem 0 0}.src-ProductCard-ProductCardGallery-GalleryToggle-styles-module__gallery-toggle--CPaMH:hover{opacity:1}", "", { version: 3, sources: ["webpack://./src/ProductCard/ProductCardGallery/GalleryToggle/styles.module.scss"], names: [], mappings: "AAAA,uFACE,iBAAA,CACA,YAAA,CACA,gBAAA,CACA,sBAAA,CACA,kBAAA,CACA,WAAA,CACA,UAAA,CACA,eAAA,CACA,0BAAA,CACA,kCAAA,CACA,SAAA,CACA,cAAA,CAEA,mKACE,MAAA,CACA,0BAAA,CAGF,oKACE,OAAA,CACA,0BAAA,CAGF,6FACE,SAAA", sourcesContent: [".gallery-toggle {\n  position: absolute;\n  display: flex;\n  flex-flow: column;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  width: 2rem;\n  transition: 0.25s;\n  color: rgba(#ecf0f1, 0.5);\n  background-color: rgba(#2c3e50, 0.5);\n  opacity: 0;\n  cursor: pointer;\n\n  &.left {\n    left: 0;\n    border-radius: 0.25rem 0 0 0;\n  }\n\n  &.right {\n    right: 0;\n    border-radius: 0 0.25rem 0 0;\n  }\n\n  &:hover {\n    opacity: 1;\n  }\n}\n"], sourceRoot: "" }]), l.locals = { "gallery-toggle": "src-ProductCard-ProductCardGallery-GalleryToggle-styles-module__gallery-toggle--CPaMH", left: "src-ProductCard-ProductCardGallery-GalleryToggle-styles-module__left--qCQRj", right: "src-ProductCard-ProductCardGallery-GalleryToggle-styles-module__right--4fcb2" };
        const c = l;
      }, 996: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-ProductCard-ProductCardGallery-styles-module__product-card-gallery--Cpnpj{position:relative;display:flex;flex-flow:row;flex:0 0 auto;height:50%;overflow:hidden}.src-ProductCard-ProductCardGallery-styles-module__product-card-gallery--Cpnpj .src-ProductCard-ProductCardGallery-styles-module__gallery-item--Nqj0C{position:absolute;width:100%;height:100%;background-size:cover;background-repeat:no-repeat;background-position:center;border-radius:.25rem .25rem 0 0;opacity:0;transition:1s}.src-ProductCard-ProductCardGallery-styles-module__product-card-gallery--Cpnpj .src-ProductCard-ProductCardGallery-styles-module__active--mAFX5{width:100%;opacity:1}", "", { version: 3, sources: ["webpack://./src/ProductCard/ProductCardGallery/styles.module.scss"], names: [], mappings: "AAAA,+EACE,iBAAA,CACA,YAAA,CACA,aAAA,CACA,aAAA,CACA,UAAA,CACA,eAAA,CAEA,sJACE,iBAAA,CACA,UAAA,CACA,WAAA,CAEA,qBAAA,CACA,2BAAA,CACA,0BAAA,CACA,+BAAA,CACA,SAAA,CAEA,aAAA,CAEF,gJACE,UAAA,CACA,SAAA", sourcesContent: [".product-card-gallery {\n  position: relative;\n  display: flex;\n  flex-flow: row;\n  flex: 0 0 auto;\n  height: 50%;\n  overflow: hidden;\n\n  .gallery-item {\n    position: absolute;\n    width: 100%;\n    height:100%;\n\n    background-size: cover;\n    background-repeat: no-repeat;\n    background-position: center;\n    border-radius: 0.25rem 0.25rem 0 0;\n    opacity: 0;\n\n    transition: 1s;\n  }\n  .active {\n    width: 100%;\n    opacity: 1;\n  }\n}\n"], sourceRoot: "" }]), l.locals = { "product-card-gallery": "src-ProductCard-ProductCardGallery-styles-module__product-card-gallery--Cpnpj", "gallery-item": "src-ProductCard-ProductCardGallery-styles-module__gallery-item--Nqj0C", active: "src-ProductCard-ProductCardGallery-styles-module__active--mAFX5" };
        const c = l;
      }, 342: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-ProductCard-styles-module__product-card--3ylL8{display:flex;flex-flow:column;width:300px;height:450px;box-shadow:0 10px 30px rgba(44,62,80,.5)}", "", { version: 3, sources: ["webpack://./src/ProductCard/styles.module.scss"], names: [], mappings: "AAAA,oDACE,YAAA,CACA,gBAAA,CAEA,WAAA,CACA,YAAA,CAEA,wCAAA", sourcesContent: [".product-card {\n  display: flex;\n  flex-flow: column;\n  \n  width: 300px;\n  height: 450px;\n\n  box-shadow: 0 10px 30px rgba(#2c3e50, 0.5);\n}\n"], sourceRoot: "" }]), l.locals = { "product-card": "src-ProductCard-styles-module__product-card--3ylL8" };
        const c = l;
      }, 571: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-RecipeCard-RecipeCardContent-styles-module__recipe-card-content--Hyg\\+3{display:flex;flex-flow:column;justify-content:flex-start;align-items:center}.src-RecipeCard-RecipeCardContent-styles-module__recipe-card-content--Hyg\\+3 .src-RecipeCard-RecipeCardContent-styles-module__thumbnail--G7NLB{display:flex;justify-content:center;align-items:center;width:100%}.src-RecipeCard-RecipeCardContent-styles-module__recipe-card-content--Hyg\\+3 .src-RecipeCard-RecipeCardContent-styles-module__thumbnail--G7NLB div{width:100%;height:300px;background-size:cover;background-position:center}.src-RecipeCard-RecipeCardContent-styles-module__recipe-card-content--Hyg\\+3 .src-RecipeCard-RecipeCardContent-styles-module__thumbnail--G7NLB div:hover{opacity:.7}", "", { version: 3, sources: ["webpack://./src/RecipeCard/RecipeCardContent/styles.module.scss"], names: [], mappings: "AAAA,6EACE,YAAA,CACA,gBAAA,CACA,0BAAA,CACA,kBAAA,CAEA,+IACE,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,UAAA,CAEA,mJACE,UAAA,CACA,YAAA,CACA,qBAAA,CACA,0BAAA,CAEA,yJACL,UAAA", sourcesContent: [".recipe-card-content{\n  display: flex;\n  flex-flow:column;\n  justify-content: flex-start;\n  align-items: center;\n\n  .thumbnail{\n    display:flex;\n    justify-content:center;\n    align-items:center;\n    width: 100%;\n    \n    div {\n      width:100%;\n      height:300px;\n      background-size: cover;\n      background-position: center;\n\n      &:hover{\n	opacity:0.7;\n      }\n    }\n  }\n}\n\n\n"], sourceRoot: "" }]), l.locals = { "recipe-card-content": "src-RecipeCard-RecipeCardContent-styles-module__recipe-card-content--Hyg+3", thumbnail: "src-RecipeCard-RecipeCardContent-styles-module__thumbnail--G7NLB" };
        const c = l;
      }, 140: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-RecipeCard-RecipeCardDesc-styles-module__recipe-card-desc--OCRII{display:flex;flex-flow:row;justify-content:center;color:rgba(0,0,0,.75)}.src-RecipeCard-RecipeCardDesc-styles-module__recipe-card-desc--OCRII div,.src-RecipeCard-RecipeCardDesc-styles-module__recipe-card-desc--OCRII a{display:flex;flex-flow:row;justify-content:center;align-items:center;padding:1rem;flex:1 1 auto;border:none;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.src-RecipeCard-RecipeCardDesc-styles-module__recipe-card-desc--OCRII div:hover,.src-RecipeCard-RecipeCardDesc-styles-module__recipe-card-desc--OCRII a:hover{background:#f8bbd0}.src-RecipeCard-RecipeCardDesc-styles-module__recipe-card-desc--OCRII .src-RecipeCard-RecipeCardDesc-styles-module__title--M3lb1{display:inline;text-align:center}.src-RecipeCard-RecipeCardDesc-styles-module__recipe-card-desc--OCRII a:hover{cursor:pointer}.src-RecipeCard-RecipeCardDesc-styles-module__recipe-card-desc--OCRII .src-RecipeCard-RecipeCardDesc-styles-module__title--M3lb1{font-size:1.25rem}.src-RecipeCard-RecipeCardDesc-styles-module__recipe-card-desc--OCRII span.src-RecipeCard-RecipeCardDesc-styles-module__fa--\\+uGW2:not(.src-RecipeCard-RecipeCardDesc-styles-module__fa-heart-o--ZjZEo){margin-right:.25rem}", "", { version: 3, sources: ["webpack://./src/RecipeCard/RecipeCardDesc/styles.module.scss"], names: [], mappings: "AAAA,sEACE,YAAA,CACA,aAAA,CACA,sBAAA,CACA,qBAAA,CAGA,kJAEE,YAAA,CACA,aAAA,CACA,sBAAA,CACA,kBAAA,CACA,YAAA,CACA,aAAA,CACA,WAAA,CACA,kBAAA,CACA,eAAA,CACA,sBAAA,CAEA,8JACE,kBAAA,CAIJ,iIACE,cAAA,CACA,iBAAA,CAGF,8EACE,cAAA,CAGF,iIACE,iBAAA,CAGF,wMACE,mBAAA", sourcesContent: [".recipe-card-desc {\n  display: flex;\n  flex-flow: row;\n  justify-content: center;\n  color: rgba(0, 0, 0, 0.75);\n\n\n  div,\n  a {\n    display: flex;\n    flex-flow: row;\n    justify-content: center;\n    align-items: center;\n    padding: 1rem;\n    flex: 1 1 auto;\n    border: none;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n\n    &:hover {\n      background: #F8BBD0;\n    }\n  }\n\n  .title {\n    display: inline;\n    text-align: center;\n  }\n\n  a:hover {\n    cursor: pointer;\n  }\n\n  .title {\n    font-size: 1.25rem;\n  }\n\n  span.fa:not(.fa-heart-o) {\n    margin-right: 0.25rem;\n  }\n}\n"], sourceRoot: "" }]), l.locals = { "recipe-card-desc": "src-RecipeCard-RecipeCardDesc-styles-module__recipe-card-desc--OCRII", title: "src-RecipeCard-RecipeCardDesc-styles-module__title--M3lb1", fa: "src-RecipeCard-RecipeCardDesc-styles-module__fa--+uGW2", "fa-heart-o": "src-RecipeCard-RecipeCardDesc-styles-module__fa-heart-o--ZjZEo" };
        const c = l;
      }, 969: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-RecipeCard-styles-module__recipe-card--cB7EP{position:relative;display:flex;flex-flow:column;width:450px;overflow:hidden;font-size:1rem;background-color:#fce4ec;color:#546e7a}a.src-RecipeCard-styles-module__recipe-card-link--iQqiz{display:flex;text-decoration:none}", "", { version: 3, sources: ["webpack://./src/RecipeCard/styles.module.scss"], names: [], mappings: "AAAA,kDACE,iBAAA,CACA,YAAA,CACA,gBAAA,CACA,WAAA,CACA,eAAA,CAEA,cAAA,CACA,wBAAA,CACA,aAAA,CAGF,wDACE,YAAA,CACA,oBAAA", sourcesContent: [".recipe-card{\n  position:relative;\n  display:flex;\n  flex-flow:column;\n  width: 450px;\n  overflow: hidden;\n\n  font-size: 1rem;\n  background-color:#FCE4EC;\n  color:#546E7A;\n}\n\na.recipe-card-link{\n  display:flex;\n  text-decoration:none;\n}\n"], sourceRoot: "" }]), l.locals = { "recipe-card": "src-RecipeCard-styles-module__recipe-card--cB7EP", "recipe-card-link": "src-RecipeCard-styles-module__recipe-card-link--iQqiz" };
        const c = l;
      }, 823: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-TaggedContentCard-CardContent-styles-module__card-content--ZfzZ5{display:flex;flex-flow:column;justify-content:flex-start;align-items:center;width:100%;height:100%;z-index:10}.src-TaggedContentCard-CardContent-styles-module__card-content--ZfzZ5 .src-TaggedContentCard-CardContent-styles-module__thumbnail--q8hER{display:flex;height:50%;width:100%;justify-content:center;align-items:center;padding:2rem 0 0 0;flex:1 1 auto}.src-TaggedContentCard-CardContent-styles-module__card-content--ZfzZ5 .src-TaggedContentCard-CardContent-styles-module__thumbnail--q8hER img{width:auto;height:100%;object-fit:cover;box-shadow:0 16px 24px 2px rgba(44,62,80,.24),0 6px 30px 5px rgba(44,62,80,.22),0 8px 10px -5px rgba(44,62,80,.4)}.src-TaggedContentCard-CardContent-styles-module__card-content--ZfzZ5 .src-TaggedContentCard-CardContent-styles-module__text--UF7Sq{display:flex;flex-flow:column;justify-content:center;width:100%;padding:1rem;margin-top:1rem;box-sizing:border-box;border-top:1px solid rgba(236,240,241,.2);background-color:rgba(0,0,0,.2);color:#ecf0f1}.src-TaggedContentCard-CardContent-styles-module__card-content--ZfzZ5 .src-TaggedContentCard-CardContent-styles-module__text--UF7Sq .src-TaggedContentCard-CardContent-styles-module__description--aqzfR{color:rgba(236,240,241,.8);font-size:.875rem}.src-TaggedContentCard-CardContent-styles-module__card-content--ZfzZ5 .src-TaggedContentCard-CardContent-styles-module__tags--7JltN{display:flex;justify-content:flex-end;width:100%}.src-TaggedContentCard-CardContent-styles-module__card-content--ZfzZ5 .src-TaggedContentCard-CardContent-styles-module__tags--7JltN .src-TaggedContentCard-CardContent-styles-module__tag--mXpw0{margin:0 .5rem;padding:.25rem .75rem;background-color:rgba(0,0,0,.5);border-radius:2rem}", "", { version: 3, sources: ["webpack://./src/TaggedContentCard/CardContent/styles.module.scss"], names: [], mappings: "AAAA,sEACE,YAAA,CACA,gBAAA,CACA,0BAAA,CACA,kBAAA,CACA,UAAA,CACA,WAAA,CACA,UAAA,CAEA,yIACE,YAAA,CACA,UAAA,CACA,UAAA,CACA,sBAAA,CACA,kBAAA,CACA,kBAAA,CACA,aAAA,CAEA,6IACE,UAAA,CACA,WAAA,CACA,gBAAA,CACA,iHAAA,CAIJ,oIACE,YAAA,CACA,gBAAA,CACA,sBAAA,CACA,UAAA,CACA,YAAA,CACA,eAAA,CACA,qBAAA,CACA,yCAAA,CACA,+BAAA,CACA,aAAA,CAEA,yMACE,0BAAA,CACA,iBAAA,CAIJ,oIACE,YAAA,CACA,wBAAA,CACA,UAAA,CAEA,iMACE,cAAA,CACA,qBAAA,CACA,+BAAA,CACA,kBAAA", sourcesContent: [".card-content {\n  display: flex;\n  flex-flow: column;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  z-index: 10;\n\n  .thumbnail {\n    display: flex;\n    height: 50%;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n    padding: 2rem 0 0 0;\n    flex: 1 1 auto;\n    \n    img {\n      width: auto;\n      height: 100%;\n      object-fit: cover;\n      box-shadow: 0 16px 24px 2px rgba(#2c3e50,0.24), 0 6px 30px 5px rgba(#2c3e50,0.22), 0 8px 10px -5px rgba(#2c3e50,0.4)\n    }\n  }\n\n  .text {\n    display: flex;\n    flex-flow: column;\n    justify-content: center;\n    width: 100%;\n    padding: 1rem;\n    margin-top: 1rem;\n    box-sizing: border-box;\n    border-top: 1px solid rgba(#ecf0f1, 0.2);\n    background-color: rgba(0, 0, 0, 0.2);\n    color: #ecf0f1;\n    \n    .description {\n      color: rgba(#ecf0f1, 0.8);\n      font-size: 0.875rem;\n    }\n  }\n\n  .tags {\n    display: flex;\n    justify-content: flex-end;\n    width: 100%;\n\n    .tag {\n      margin: 0 0.5rem;\n      padding: 0.25rem 0.75rem;\n      background-color: rgba(0, 0, 0, 0.5);\n      border-radius: 2rem;\n    }\n  }\n}\n"], sourceRoot: "" }]), l.locals = { "card-content": "src-TaggedContentCard-CardContent-styles-module__card-content--ZfzZ5", thumbnail: "src-TaggedContentCard-CardContent-styles-module__thumbnail--q8hER", text: "src-TaggedContentCard-CardContent-styles-module__text--UF7Sq", description: "src-TaggedContentCard-CardContent-styles-module__description--aqzfR", tags: "src-TaggedContentCard-CardContent-styles-module__tags--7JltN", tag: "src-TaggedContentCard-CardContent-styles-module__tag--mXpw0" };
        const c = l;
      }, 972: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-TaggedContentCard-CardOverlay-styles-module__card-overlay--5RQLc{position:absolute;width:100%;height:100%;overflow:hidden;border-radius:.25rem}.src-TaggedContentCard-CardOverlay-styles-module__card-overlay--5RQLc .src-TaggedContentCard-CardOverlay-styles-module__overlay--gmqQ6{position:absolute;width:100%;height:100%;background-repeat:no-repeat;background-position:center;background-size:cover;filter:blur(20px) brightness(0.75);backface-visibility:hidden;perspective:1000;transform:translate3d(0, 0, 0);transform:translateZ(0);will-change:transform}", "", { version: 3, sources: ["webpack://./src/TaggedContentCard/CardOverlay/styles.module.scss"], names: [], mappings: "AAAA,sEACE,iBAAA,CACA,UAAA,CACA,WAAA,CACA,eAAA,CACA,oBAAA,CAEA,uIACE,iBAAA,CACA,UAAA,CACA,WAAA,CACA,2BAAA,CACA,0BAAA,CACA,qBAAA,CACA,kCAAA,CACA,0BAAA,CACA,gBAAA,CACA,8BAAA,CACA,uBAAA,CACA,qBAAA", sourcesContent: [".card-overlay {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  border-radius: 0.25rem;\n\n  .overlay {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background-repeat: no-repeat;\n    background-position: center;\n    background-size: cover;\n    filter: blur(20px) brightness(0.75);\n    backface-visibility: hidden;\n    perspective: 1000;\n    transform: translate3d(0,0,0);\n    transform: translateZ(0);\n    will-change: transform;\n  }\n}\n"], sourceRoot: "" }]), l.locals = { "card-overlay": "src-TaggedContentCard-CardOverlay-styles-module__card-overlay--5RQLc", overlay: "src-TaggedContentCard-CardOverlay-styles-module__overlay--gmqQ6" };
        const c = l;
      }, 21: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, "a.src-TaggedContentCard-styles-module__card-link--f0hYD{display:flex;text-decoration:none}.src-TaggedContentCard-styles-module__tagged-content-card--OZvmV{position:relative;display:flex;flex-flow:column;width:420px;height:350px;background-color:#2c3e50;transition:.5s}.src-TaggedContentCard-styles-module__tagged-content-card--OZvmV:hover{transform:scale(1.1)}", "", { version: 3, sources: ["webpack://./src/TaggedContentCard/styles.module.scss"], names: [], mappings: "AAAA,wDACE,YAAA,CACA,oBAAA,CAGF,iEACE,iBAAA,CACA,YAAA,CACA,gBAAA,CAEA,WAAA,CACA,YAAA,CAEA,wBAAA,CACA,cAAA,CAEA,uEACE,oBAAA", sourcesContent: ["a.card-link {\n  display: flex;\n  text-decoration: none;\n}\n\n.tagged-content-card {\n  position: relative;\n  display: flex;\n  flex-flow: column;\n\n  width: 420px;\n  height: 350px;\n\n  background-color: #2c3e50;\n  transition: 0.5s;\n  \n  &:hover {\n    transform: scale(1.1);\n  }\n}\n"], sourceRoot: "" }]), l.locals = { "card-link": "src-TaggedContentCard-styles-module__card-link--f0hYD", "tagged-content-card": "src-TaggedContentCard-styles-module__tagged-content-card--OZvmV" };
        const c = l;
      }, 250: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-UserCard-UserCardAvatar-styles-module__user-card-avatar--LDsnQ{position:absolute;display:flex;flex:0 0 auto;height:6rem;width:6rem;top:calc(50% - 3rem);left:calc(50% - 3rem);background-size:cover;background-repeat:no-repeat;background-position:center;border-radius:100%;z-index:10}", "", { version: 3, sources: ["webpack://./src/UserCard/UserCardAvatar/styles.module.scss"], names: [], mappings: "AAAA,oEACE,iBAAA,CACA,YAAA,CACA,aAAA,CACA,WAAA,CACA,UAAA,CACA,oBAAA,CACA,qBAAA,CAEA,qBAAA,CACA,2BAAA,CACA,0BAAA,CACA,kBAAA,CACA,UAAA", sourcesContent: [".user-card-avatar {\n  position: absolute;\n  display: flex;\n  flex: 0 0 auto;\n  height: 6rem;\n  width: 6rem;\n  top: calc(50% - 3rem);\n  left: calc(50% - 3rem);\n  \n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center;\n  border-radius: 100%;\n  z-index: 10;\n}\n"], sourceRoot: "" }]), l.locals = { "user-card-avatar": "src-UserCard-UserCardAvatar-styles-module__user-card-avatar--LDsnQ" };
        const c = l;
      }, 753: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-UserCard-UserCardBody-styles-module__user-card-body--xMttR{padding:1rem;padding-top:4rem}.src-UserCard-UserCardBody-styles-module__user-card-body--xMttR .src-UserCard-UserCardBody-styles-module__user-card-name--lMiwl{display:flex;justify-content:center;font-size:1.25rem;margin-bottom:.25rem;color:#2c3e50}.src-UserCard-UserCardBody-styles-module__user-card-body--xMttR .src-UserCard-UserCardBody-styles-module__user-card-position-name--slXtz{display:flex;justify-content:center;font-size:.75rem;color:#7f8c8d}", "", { version: 3, sources: ["webpack://./src/UserCard/UserCardBody/styles.module.scss"], names: [], mappings: "AAAA,gEACE,YAAA,CACA,gBAAA,CAEA,gIACE,YAAA,CACA,sBAAA,CACA,iBAAA,CACA,oBAAA,CACA,aAAA,CAGF,yIACE,YAAA,CACA,sBAAA,CACA,gBAAA,CACA,aAAA", sourcesContent: [".user-card-body {\n  padding: 1rem;\n  padding-top: 4rem;\n\n  .user-card-name {\n    display: flex;\n    justify-content: center;\n    font-size: 1.25rem;\n    margin-bottom: 0.25rem;\n    color: #2c3e50;\n  }\n\n  .user-card-position-name {\n    display: flex;\n    justify-content: center;\n    font-size: 0.75rem;\n    color: #7f8c8d;\n  }\n}\n"], sourceRoot: "" }]), l.locals = { "user-card-body": "src-UserCard-UserCardBody-styles-module__user-card-body--xMttR", "user-card-name": "src-UserCard-UserCardBody-styles-module__user-card-name--lMiwl", "user-card-position-name": "src-UserCard-UserCardBody-styles-module__user-card-position-name--slXtz" };
        const c = l;
      }, 919: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-UserCard-UserCardHeader-styles-module__user-card-header--I6RTF{position:relative;display:flex;flex:0 0 auto;height:50%;background-size:cover;background-repeat:no-repeat;background-position:center;border-radius:.25rem .25rem 0 0}", "", { version: 3, sources: ["webpack://./src/UserCard/UserCardHeader/styles.module.scss"], names: [], mappings: "AAAA,oEACE,iBAAA,CACA,YAAA,CACA,aAAA,CACA,UAAA,CAEA,qBAAA,CACA,2BAAA,CACA,0BAAA,CACA,+BAAA", sourcesContent: [".user-card-header {\n  position: relative;\n  display: flex;\n  flex: 0 0 auto;\n  height: 50%;\n\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center;\n  border-radius: 0.25rem 0.25rem 0 0;\n}\n"], sourceRoot: "" }]), l.locals = { "user-card-header": "src-UserCard-UserCardHeader-styles-module__user-card-header--I6RTF" };
        const c = l;
      }, 946: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, ".src-UserCard-UserCardStats-styles-module__user-card-stats--bnwQi{display:flex;flex-flow:row;justify-content:center;font-size:.75rem}.src-UserCard-UserCardStats-styles-module__stat-container--aIY35{border-top:2px solid rgba(127,140,141,.2);border-right:2px solid rgba(127,140,141,.2);min-width:4rem;padding:.25rem}.src-UserCard-UserCardStats-styles-module__stat-container--aIY35:last-child{border-right:none}.src-UserCard-UserCardStats-styles-module__stat-name--GJoTD{display:flex;flex-flow:row;justify-content:center;color:#7f8c8d}.src-UserCard-UserCardStats-styles-module__stat-value--c0\\+kg{display:flex;flex-flow:row;justify-content:center;color:#2c3e50;font-weight:bold}", "", { version: 3, sources: ["webpack://./src/UserCard/UserCardStats/styles.module.scss"], names: [], mappings: "AAAA,kEACE,YAAA,CACA,aAAA,CACA,sBAAA,CAEA,gBAAA,CAGF,iEACE,yCAAA,CACA,2CAAA,CACA,cAAA,CACA,cAAA,CAEA,4EACE,iBAAA,CAIJ,4DACE,YAAA,CACA,aAAA,CACA,sBAAA,CACA,aAAA,CAGF,8DACE,YAAA,CACA,aAAA,CACA,sBAAA,CACA,aAAA,CACA,gBAAA", sourcesContent: [".user-card-stats {\n  display: flex;\n  flex-flow: row;\n  justify-content: center;\n\n  font-size: 0.75rem;\n}\n\n.stat-container {\n  border-top: 2px solid rgba(#7f8c8d, 0.2);\n  border-right: 2px solid rgba(#7f8c8d, 0.2);\n  min-width: 4rem;\n  padding: 0.25rem;\n\n  &:last-child {\n    border-right: none;\n  }\n}\n\n.stat-name {\n  display: flex;\n  flex-flow: row;\n  justify-content: center;\n  color: #7f8c8d;\n}\n\n.stat-value {\n  display: flex;\n  flex-flow: row;\n  justify-content: center;\n  color: #2c3e50;\n  font-weight: bold;\n}\n"], sourceRoot: "" }]), l.locals = { "user-card-stats": "src-UserCard-UserCardStats-styles-module__user-card-stats--bnwQi", "stat-container": "src-UserCard-UserCardStats-styles-module__stat-container--aIY35", "stat-name": "src-UserCard-UserCardStats-styles-module__stat-name--GJoTD", "stat-value": "src-UserCard-UserCardStats-styles-module__stat-value--c0+kg" };
        const c = l;
      }, 841: (e2, t2, a2) => {
        a2.d(t2, { Z: () => c });
        var r2 = a2(15), n = a2.n(r2), s = a2(645), l = a2.n(s)()(n());
        l.push([e2.id, "a.src-UserCard-styles-module__card-link--KwfPP{display:flex;text-decoration:none}", "", { version: 3, sources: ["webpack://./src/UserCard/styles.module.scss"], names: [], mappings: "AAAA,+CACE,YAAA,CACA,oBAAA", sourcesContent: ["a.card-link {\n  display: flex;\n  text-decoration: none;\n}\n"], sourceRoot: "" }]), l.locals = { "card-link": "src-UserCard-styles-module__card-link--KwfPP" };
        const c = l;
      }, 645: (e2) => {
        e2.exports = function(e3) {
          var t2 = [];
          return t2.toString = function() {
            return this.map(function(t3) {
              var a2 = e3(t3);
              return t3[2] ? "@media ".concat(t3[2], " {").concat(a2, "}") : a2;
            }).join("");
          }, t2.i = function(e4, a2, r2) {
            "string" == typeof e4 && (e4 = [[null, e4, ""]]);
            var n = {};
            if (r2)
              for (var s = 0; s < this.length; s++) {
                var l = this[s][0];
                null != l && (n[l] = true);
              }
            for (var c = 0; c < e4.length; c++) {
              var o = [].concat(e4[c]);
              r2 && n[o[0]] || (a2 && (o[2] ? o[2] = "".concat(a2, " and ").concat(o[2]) : o[2] = a2), t2.push(o));
            }
          }, t2;
        };
      }, 15: (e2) => {
        function t2(e3, t3) {
          (null == t3 || t3 > e3.length) && (t3 = e3.length);
          for (var a2 = 0, r2 = new Array(t3); a2 < t3; a2++)
            r2[a2] = e3[a2];
          return r2;
        }
        e2.exports = function(e3) {
          var a2, r2, n = (r2 = 4, function(e4) {
            if (Array.isArray(e4))
              return e4;
          }(a2 = e3) || function(e4, t3) {
            var a3 = e4 && ("undefined" != typeof Symbol && e4[Symbol.iterator] || e4["@@iterator"]);
            if (null != a3) {
              var r3, n2, s2 = [], l2 = true, c2 = false;
              try {
                for (a3 = a3.call(e4); !(l2 = (r3 = a3.next()).done) && (s2.push(r3.value), !t3 || s2.length !== t3); l2 = true)
                  ;
              } catch (e5) {
                c2 = true, n2 = e5;
              } finally {
                try {
                  l2 || null == a3.return || a3.return();
                } finally {
                  if (c2)
                    throw n2;
                }
              }
              return s2;
            }
          }(a2, r2) || function(e4, a3) {
            if (e4) {
              if ("string" == typeof e4)
                return t2(e4, a3);
              var r3 = Object.prototype.toString.call(e4).slice(8, -1);
              return "Object" === r3 && e4.constructor && (r3 = e4.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(e4) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? t2(e4, a3) : void 0;
            }
          }(a2, r2) || function() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }()), s = n[1], l = n[3];
          if (!l)
            return s;
          if ("function" == typeof btoa) {
            var c = btoa(unescape(encodeURIComponent(JSON.stringify(l)))), o = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c), d = "/*# ".concat(o, " */"), i = l.sources.map(function(e4) {
              return "/*# sourceURL=".concat(l.sourceRoot || "").concat(e4, " */");
            });
            return [s].concat(i).concat([d]).join("\n");
          }
          return [s].join("\n");
        };
      }, 379: (e2, t2, a2) => {
        var r2, n = function() {
          var e3 = {};
          return function(t3) {
            if (void 0 === e3[t3]) {
              var a3 = document.querySelector(t3);
              if (window.HTMLIFrameElement && a3 instanceof window.HTMLIFrameElement)
                try {
                  a3 = a3.contentDocument.head;
                } catch (e4) {
                  a3 = null;
                }
              e3[t3] = a3;
            }
            return e3[t3];
          };
        }(), s = [];
        function l(e3) {
          for (var t3 = -1, a3 = 0; a3 < s.length; a3++)
            if (s[a3].identifier === e3) {
              t3 = a3;
              break;
            }
          return t3;
        }
        function c(e3, t3) {
          for (var a3 = {}, r3 = [], n2 = 0; n2 < e3.length; n2++) {
            var c2 = e3[n2], o2 = t3.base ? c2[0] + t3.base : c2[0], d2 = a3[o2] || 0, i2 = "".concat(o2, " ").concat(d2);
            a3[o2] = d2 + 1;
            var A2 = l(i2), m2 = { css: c2[1], media: c2[2], sourceMap: c2[3] };
            -1 !== A2 ? (s[A2].references++, s[A2].updater(m2)) : s.push({ identifier: i2, updater: f(m2, t3), references: 1 }), r3.push(i2);
          }
          return r3;
        }
        function o(e3) {
          var t3 = document.createElement("style"), r3 = e3.attributes || {};
          if (void 0 === r3.nonce) {
            var s2 = a2.nc;
            s2 && (r3.nonce = s2);
          }
          if (Object.keys(r3).forEach(function(e4) {
            t3.setAttribute(e4, r3[e4]);
          }), "function" == typeof e3.insert)
            e3.insert(t3);
          else {
            var l2 = n(e3.insert || "head");
            if (!l2)
              throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
            l2.appendChild(t3);
          }
          return t3;
        }
        var d, i = (d = [], function(e3, t3) {
          return d[e3] = t3, d.filter(Boolean).join("\n");
        });
        function A(e3, t3, a3, r3) {
          var n2 = a3 ? "" : r3.media ? "@media ".concat(r3.media, " {").concat(r3.css, "}") : r3.css;
          if (e3.styleSheet)
            e3.styleSheet.cssText = i(t3, n2);
          else {
            var s2 = document.createTextNode(n2), l2 = e3.childNodes;
            l2[t3] && e3.removeChild(l2[t3]), l2.length ? e3.insertBefore(s2, l2[t3]) : e3.appendChild(s2);
          }
        }
        function m(e3, t3, a3) {
          var r3 = a3.css, n2 = a3.media, s2 = a3.sourceMap;
          if (n2 ? e3.setAttribute("media", n2) : e3.removeAttribute("media"), s2 && "undefined" != typeof btoa && (r3 += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s2)))), " */")), e3.styleSheet)
            e3.styleSheet.cssText = r3;
          else {
            for (; e3.firstChild; )
              e3.removeChild(e3.firstChild);
            e3.appendChild(document.createTextNode(r3));
          }
        }
        var C = null, p = 0;
        function f(e3, t3) {
          var a3, r3, n2;
          if (t3.singleton) {
            var s2 = p++;
            a3 = C || (C = o(t3)), r3 = A.bind(null, a3, s2, false), n2 = A.bind(null, a3, s2, true);
          } else
            a3 = o(t3), r3 = m.bind(null, a3, t3), n2 = function() {
              !function(e4) {
                if (null === e4.parentNode)
                  return false;
                e4.parentNode.removeChild(e4);
              }(a3);
            };
          return r3(e3), function(t4) {
            if (t4) {
              if (t4.css === e3.css && t4.media === e3.media && t4.sourceMap === e3.sourceMap)
                return;
              r3(e3 = t4);
            } else
              n2();
          };
        }
        e2.exports = function(e3, t3) {
          (t3 = t3 || {}).singleton || "boolean" == typeof t3.singleton || (t3.singleton = (void 0 === r2 && (r2 = Boolean(window && document && document.all && !window.atob)), r2));
          var a3 = c(e3 = e3 || [], t3);
          return function(e4) {
            if (e4 = e4 || [], "[object Array]" === Object.prototype.toString.call(e4)) {
              for (var r3 = 0; r3 < a3.length; r3++) {
                var n2 = l(a3[r3]);
                s[n2].references--;
              }
              for (var o2 = c(e4, t3), d2 = 0; d2 < a3.length; d2++) {
                var i2 = l(a3[d2]);
                0 === s[i2].references && (s[i2].updater(), s.splice(i2, 1));
              }
              a3 = o2;
            }
          };
        };
      } }, t = {};
      function a(r2) {
        var n = t[r2];
        if (void 0 !== n)
          return n.exports;
        var s = t[r2] = { id: r2, exports: {} };
        return e[r2](s, s.exports, a), s.exports;
      }
      a.n = (e2) => {
        var t2 = e2 && e2.__esModule ? () => e2.default : () => e2;
        return a.d(t2, { a: t2 }), t2;
      }, a.d = (e2, t2) => {
        for (var r2 in t2)
          a.o(t2, r2) && !a.o(e2, r2) && Object.defineProperty(e2, r2, { enumerable: true, get: t2[r2] });
      }, a.o = (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2), a.r = (e2) => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
      }, a.nc = void 0;
      var r = {};
      return (() => {
        a.r(r), a.d(r, { CryptoCard: () => dt, FlippingCard: () => V, FlippingCardBack: () => ne, FlippingCardFront: () => te, NewsHeaderCard: () => Qe, PaymentCard: () => Pe, ProductCard: () => Y, RecipeCard: () => Ye, TaggedContentCard: () => Q, UserCard: () => w });
        const e2 = require_jsx_runtime(), t2 = require_classnames();
        var n = a.n(t2), s = a(379), l = a.n(s), c = a(889);
        l()(c.Z, { insert: "head", singleton: false });
        const o = c.Z.locals || {};
        const d = (t3) => {
          var { className: a2, float: r2, children: s2 } = t3, l2 = function(e3, t4) {
            var a3 = {};
            for (var r3 in e3)
              Object.prototype.hasOwnProperty.call(e3, r3) && t4.indexOf(r3) < 0 && (a3[r3] = e3[r3]);
            if (null != e3 && "function" == typeof Object.getOwnPropertySymbols) {
              var n2 = 0;
              for (r3 = Object.getOwnPropertySymbols(e3); n2 < r3.length; n2++)
                t4.indexOf(r3[n2]) < 0 && Object.prototype.propertyIsEnumerable.call(e3, r3[n2]) && (a3[r3[n2]] = e3[r3[n2]]);
            }
            return a3;
          }(t3, ["className", "float", "children"]);
          return (0, e2.jsx)("div", Object.assign({ className: n()(o.card, o.card, { [o.float]: r2 }, a2) }, l2, { children: s2 }), void 0);
        };
        var i = a(919);
        l()(i.Z, { insert: "head", singleton: false });
        const A = i.Z.locals || {}, m = ({ src: t3 }) => (0, e2.jsx)("div", { className: A["user-card-header"], style: { backgroundImage: `url(${t3})` } }, void 0);
        var C = a(250);
        l()(C.Z, { insert: "head", singleton: false });
        const p = C.Z.locals || {}, f = ({ src: t3 }) => (0, e2.jsx)("div", { className: p["user-card-avatar"], style: { backgroundImage: `url(${t3})` } }, void 0);
        var u = a(753);
        l()(u.Z, { insert: "head", singleton: false });
        const h = u.Z.locals || {}, g = ({ name: t3, positionName: a2, children: r2 }) => (0, e2.jsxs)("div", Object.assign({ className: h["user-card-body"] }, { children: [(0, e2.jsx)("div", Object.assign({ className: h["user-card-name"] }, { children: t3 }), void 0), (0, e2.jsx)("div", Object.assign({ className: h["user-card-position-name"] }, { children: a2 }), void 0), r2] }), void 0);
        var y = a(946);
        l()(y.Z, { insert: "head", singleton: false });
        const b = y.Z.locals || {}, v = ({ stats: t3 }) => (0, e2.jsx)("div", Object.assign({ className: b["user-card-stats"] }, { children: null == t3 ? void 0 : t3.map((t4) => (0, e2.jsxs)("div", Object.assign({ className: b["stat-container"] }, { children: [(0, e2.jsx)("div", Object.assign({ className: b["stat-value"] }, { children: t4.value }), void 0), (0, e2.jsx)("div", Object.assign({ className: b["stat-name"] }, { children: t4.name }), void 0)] }), t4.name)) }), void 0);
        var x = a(841);
        l()(x.Z, { insert: "head", singleton: false });
        const _ = x.Z.locals || {};
        const w = (t3) => {
          var { className: a2, href: r2, header: n2, avatar: s2, name: l2, positionName: c2, stats: o2, children: i2 } = t3, A2 = function(e3, t4) {
            var a3 = {};
            for (var r3 in e3)
              Object.prototype.hasOwnProperty.call(e3, r3) && t4.indexOf(r3) < 0 && (a3[r3] = e3[r3]);
            if (null != e3 && "function" == typeof Object.getOwnPropertySymbols) {
              var n3 = 0;
              for (r3 = Object.getOwnPropertySymbols(e3); n3 < r3.length; n3++)
                t4.indexOf(r3[n3]) < 0 && Object.prototype.propertyIsEnumerable.call(e3, r3[n3]) && (a3[r3[n3]] = e3[r3[n3]]);
            }
            return a3;
          }(t3, ["className", "href", "header", "avatar", "name", "positionName", "stats", "children"]);
          return (0, e2.jsx)("a", Object.assign({ className: _["card-link"], href: r2 }, { children: (0, e2.jsxs)(d, Object.assign({ className: a2 }, A2, { children: [(0, e2.jsx)(m, { src: n2 }, void 0), (0, e2.jsx)(f, { src: s2 }, void 0), (0, e2.jsx)(g, Object.assign({ name: l2, positionName: c2 }, { children: i2 }), void 0), void 0 !== o2 && (0, e2.jsx)(v, { stats: o2 }, void 0)] }), void 0) }), void 0);
        };
        var j = a(134);
        l()(j.Z, { insert: "head", singleton: false });
        const B = j.Z.locals || {}, k = ({ productName: t3, description: a2, buttonText: r2, url: n2, isButtonActive: s2 = true }) => (0, e2.jsxs)("div", Object.assign({ className: B["product-card-description-box"] }, { children: [(0, e2.jsx)("div", Object.assign({ className: B["product-card-name"] }, { children: t3 }), void 0), (0, e2.jsx)("p", Object.assign({ className: B["product-card-description"] }, { children: a2 }), void 0), r2 && (0, e2.jsx)("div", Object.assign({ className: B.row }, { children: (0, e2.jsx)("a", Object.assign({ className: s2 ? B["buy-button"] : B["buy-button-disabled"], href: s2 ? n2 : "#" }, { children: r2 }), void 0) }), void 0)] }), void 0), E = require_react();
        var P = a(459);
        l()(P.Z, { insert: "head", singleton: false });
        const O = P.Z.locals || {}, N = ({ icon: t3, action: a2, left: r2 = false, right: s2 = false }) => (0, e2.jsx)("div", Object.assign({ className: n()(O["gallery-toggle"], { [O.left]: r2, [O.right]: s2 }), onClick: a2 }, { children: t3 }), void 0);
        var I = a(996);
        l()(I.Z, { insert: "head", singleton: false });
        const R = I.Z.locals || {}, z = ({ photos: t3 }) => {
          const [a2, r2] = (0, E.useState)(0);
          return (0, e2.jsxs)("div", Object.assign({ className: R["product-card-gallery"] }, { children: [t3.map((t4, r3) => (0, e2.jsx)("div", { className: n()(R["gallery-item"], { [`${R.active}`]: a2 === r3 }), style: { backgroundImage: `url(${t4})` } }, t4)), (0, e2.jsx)(N, { icon: ">", action: () => {
            let e3 = t3.length;
            r2(((a2 + 1) % e3 + e3) % e3);
          }, right: true }, void 0), (0, e2.jsx)(N, { icon: "<", action: () => {
            let e3 = t3.length;
            r2(((a2 - 1) % e3 + e3) % e3);
          }, left: true }, void 0)] }), void 0);
        };
        var Z = a(267);
        l()(Z.Z, { insert: "head", singleton: false });
        const U = Z.Z.locals || {}, F = ({ price: t3 }) => (0, e2.jsx)("div", Object.assign({ className: U["price-tag"] }, { children: t3 }), void 0);
        var H = a(342);
        l()(H.Z, { insert: "head", singleton: false });
        const D = H.Z.locals || {};
        const Y = (t3) => {
          var { className: a2, photos: r2, price: s2, productName: l2, description: c2, buttonText: o2, url: i2 } = t3, A2 = function(e3, t4) {
            var a3 = {};
            for (var r3 in e3)
              Object.prototype.hasOwnProperty.call(e3, r3) && t4.indexOf(r3) < 0 && (a3[r3] = e3[r3]);
            if (null != e3 && "function" == typeof Object.getOwnPropertySymbols) {
              var n2 = 0;
              for (r3 = Object.getOwnPropertySymbols(e3); n2 < r3.length; n2++)
                t4.indexOf(r3[n2]) < 0 && Object.prototype.propertyIsEnumerable.call(e3, r3[n2]) && (a3[r3[n2]] = e3[r3[n2]]);
            }
            return a3;
          }(t3, ["className", "photos", "price", "productName", "description", "buttonText", "url"]);
          return (0, e2.jsxs)(d, Object.assign({ className: n()(D["product-card"], a2) }, A2, { children: [(0, e2.jsx)(z, { photos: r2 }, void 0), (0, e2.jsx)(F, { price: s2 }, void 0), (0, e2.jsx)(k, { productName: l2, description: c2, buttonText: o2, url: i2 }, void 0)] }), void 0);
        };
        var G = a(823);
        l()(G.Z, { insert: "head", singleton: false });
        const L = G.Z.locals || {}, S = ({ thumbnail: t3, title: a2, description: r2, tags: n2 }) => (0, e2.jsxs)("div", Object.assign({ className: L["card-content"] }, { children: [(0, e2.jsx)("div", Object.assign({ className: L.thumbnail }, { children: (0, e2.jsx)("img", { src: t3 }, void 0) }), void 0), (0, e2.jsxs)("div", Object.assign({ className: L.text }, { children: [(0, e2.jsx)("div", Object.assign({ className: L.title }, { children: a2 }), void 0), (0, e2.jsx)("div", Object.assign({ className: L.description }, { children: r2 }), void 0), (0, e2.jsx)("div", Object.assign({ className: L.tags }, { children: n2.map((t4, a3) => (0, e2.jsx)("span", Object.assign({ className: L.tag }, { children: "function" == typeof t4 ? t4() : t4 }), a3)) }), void 0)] }), void 0)] }), void 0);
        var T = a(972);
        l()(T.Z, { insert: "head", singleton: false });
        const M = T.Z.locals || {}, q = ({ thumbnail: t3 }) => (0, e2.jsx)("div", Object.assign({ className: M["card-overlay"] }, { children: (0, e2.jsx)("div", { className: M.overlay, style: { backgroundImage: `url(${t3})` } }, void 0) }), void 0);
        var W = a(21);
        l()(W.Z, { insert: "head", singleton: false });
        const J = W.Z.locals || {};
        const Q = (t3) => {
          var { className: a2, href: r2, thumbnail: s2, title: l2, description: c2, tags: o2 } = t3, i2 = function(e3, t4) {
            var a3 = {};
            for (var r3 in e3)
              Object.prototype.hasOwnProperty.call(e3, r3) && t4.indexOf(r3) < 0 && (a3[r3] = e3[r3]);
            if (null != e3 && "function" == typeof Object.getOwnPropertySymbols) {
              var n2 = 0;
              for (r3 = Object.getOwnPropertySymbols(e3); n2 < r3.length; n2++)
                t4.indexOf(r3[n2]) < 0 && Object.prototype.propertyIsEnumerable.call(e3, r3[n2]) && (a3[r3[n2]] = e3[r3[n2]]);
            }
            return a3;
          }(t3, ["className", "href", "thumbnail", "title", "description", "tags"]);
          return (0, e2.jsx)("a", Object.assign({ className: J["card-link"], href: r2 }, { children: (0, e2.jsxs)(d, Object.assign({ className: n()(J["tagged-content-card"], a2) }, i2, { children: [(0, e2.jsx)(q, { thumbnail: s2 }, void 0), (0, e2.jsx)(S, { thumbnail: s2, title: l2, description: c2, tags: o2 }, void 0)] }), void 0) }), void 0);
        };
        var K = a(316);
        l()(K.Z, { insert: "head", singleton: false });
        const X = K.Z.locals || {};
        const V = (t3) => {
          var { className: a2, children: r2 } = t3, s2 = function(e3, t4) {
            var a3 = {};
            for (var r3 in e3)
              Object.prototype.hasOwnProperty.call(e3, r3) && t4.indexOf(r3) < 0 && (a3[r3] = e3[r3]);
            if (null != e3 && "function" == typeof Object.getOwnPropertySymbols) {
              var n2 = 0;
              for (r3 = Object.getOwnPropertySymbols(e3); n2 < r3.length; n2++)
                t4.indexOf(r3[n2]) < 0 && Object.prototype.propertyIsEnumerable.call(e3, r3[n2]) && (a3[r3[n2]] = e3[r3[n2]]);
            }
            return a3;
          }(t3, ["className", "children"]);
          return (0, e2.jsx)(d, Object.assign({ className: n()(X["flipping-card-container"], a2) }, s2, { children: (0, e2.jsx)("div", Object.assign({ className: X["flipping-card"] }, { children: r2 }), void 0) }), void 0);
        };
        var $ = a(27);
        l()($.Z, { insert: "head", singleton: false });
        const ee = $.Z.locals || {}, te = ({ children: t3 }) => (0, e2.jsx)("div", Object.assign({ className: ee.front }, { children: t3 }), void 0);
        var ae = a(524);
        l()(ae.Z, { insert: "head", singleton: false });
        const re = ae.Z.locals || {}, ne = ({ children: t3 }) => (0, e2.jsx)("div", Object.assign({ className: re.back }, { children: t3 }), void 0);
        var se = a(954);
        l()(se.Z, { insert: "head", singleton: false });
        const le = se.Z.locals || {}, ce = { triangles: '<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n<svg xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns="http://www.w3.org/2000/svg" xml:space="preserve" height="400" width="400" version="1.1" xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" viewBox="0 0 399.9953 399.9953"><g transform="matrix(.47036 0 0 -.47037 0 400)"><g transform="scale(.1)"><path fill="#818181" d="m2338.7 4748.6-1.0393 0.6469c17.064 27.223 36.068 53.099 56.822 77.448-23.14-19.725-44.902-41.052-65.094-63.778 21.602 24.89 45.029 48.115 70.11 69.505-22.376-26.237-42.728-54.255-60.798-83.822"/><path fill="#747474" d="m2263.6 4254.1c-13.765 52.834-21.083 108.27-21.083 165.41 0 127.37 36.471 246.16 99.464 346.68l1.0392-0.6468c-60.597-99.157-95.572-215.66-95.572-340.38 0-59.038 7.8265-116.26 22.483-170.67l-6.3312-0.3924"/><path fill="#828282" d="m2873.9 3793.8c-304.19 0-559.91 207.59-633.18 488.85l6.3312 0.3923c75.073-278.58 329.49-483.6 631.79-483.6 77.448 0 151.74 13.489 220.67 38.231l0.2333-3.7648c-70.385-25.94-146.46-40.108-225.84-40.108"/><path fill="#8a8a8a" d="m3069.5 3842.1-0.2332 3.7648c75.179 26.979 143.98 67.331 203.58 118.16-2.8315-3.3194-5.6843-6.5857-8.5689-9.8521 1.1879 1.3787 2.365 2.7573 3.5527 4.136-58.222-49.631-125.2-89.273-198.33-116.21"/><path fill="#828282" d="m2338 4749.4-0.9863 0.5939c16.014 24.922 33.66 48.677 52.802 71.128-23.108-19.694-44.827-40.957-64.987-63.641 1.6226 1.8772 3.2557 3.7331 4.8995 5.5889 20.192 22.727 41.953 44.053 65.094 63.778-20.754-24.349-39.758-50.225-56.822-77.448"/><path fill="#757575" d="m2257.4 4253.6c-12.896 51.243-19.747 104.9-19.747 160.16 0 130.02 38.008 251.11 103.42 352.91l0.9862-0.5939c-62.994-100.51-99.464-219.31-99.464-346.68 0-57.14 7.3174-112.57 21.083-165.41l-6.2782-0.3924m71.467 520.54 0.021 0.021-0.021-0.021"/><path fill="#838383" d="m2869.2 3788.4c-306.09 0-563.09 210.17-634.52 494.1l6.2781 0.3924c73.27-281.26 328.99-488.85 633.18-488.85 79.389 0 155.46 14.168 225.84 40.108l0.2226-3.7224c-71.817-27.159-149.67-42.028-231.01-42.028"/><path fill="#8c8c8c" d="m3069.9 3838.7-0.2227 3.7224c73.132 26.937 140.11 66.578 198.33 116.21-1.1878-1.3786-2.365-2.7573-3.5527-4.1359-1.7498-2.0044-3.5103-4.0193-5.2813-6.0131 1.2726 1.474 2.5452 2.9482 3.8072 4.4328-56.822-48.433-122-87.332-193.09-114.22"/><path fill="#828282" d="m2337 4750.2-0.9014 0.5621c14.911 22.631 31.179 44.286 48.698 64.85-21.178-18.05-41.19-37.414-59.908-57.967l-0.074 0.042c20.16 22.684 41.879 43.947 64.987 63.641-19.142-22.451-36.789-46.206-52.802-71.128"/><path fill="#767676" d="m2251.4 4253.1c-12.058 49.663-18.442 101.52-18.442 154.9 0 132.66 39.578 256.03 107.46 359.12l0.9014-0.562c-65.412-101.81-103.42-222.9-103.42-352.91 0-55.252 6.8508-108.91 19.746-160.16l-6.2463-0.3818m72.549 515.05c1.718 1.962 3.436 3.9239 5.1646 5.8646l0.021 0.021 0.074-0.042c-1.7604-1.9407-3.5102-3.892-5.26-5.8434"/><path fill="#838383" d="m2864.4 3782.8c-307.97 0-566.24 212.8-635.82 499.38l6.2463 0.3818c71.425-283.93 328.43-494.1 634.52-494.1 81.34 0 159.19 14.868 231.01 42.028l0.2227-3.6693c-73.249-28.422-152.87-44.022-236.17-44.022"/><path fill="#8d8d8d" d="m3070.2 3835.2-0.2226 3.6693c71.085 26.884 136.26 65.783 193.09 114.22-1.262-1.4847-2.5346-2.9588-3.8073-4.4329-1.665-1.9089-3.3194-3.7966-4.995-5.6843 1.262 1.4529 2.5346 2.927 3.786 4.4011-55.422-47.224-118.8-85.392-187.85-112.17"/><path fill="#838383" d="m2336.3 4750.9-0.8378 0.509c13.755 20.383 28.623 39.938 44.52 58.603-19.227-16.374-37.51-33.862-54.732-52.336l-0.1592 0.106c18.718 20.552 38.73 39.917 59.908 57.967-17.52-20.563-33.788-42.218-48.698-64.85"/><path fill="#777" d="m2245.4 4252.7c-11.241 48.051-17.191 98.16-17.191 149.64 0 135.32 41.169 260.97 111.56 365.28l0.8377-0.5089c-67.883-103.09-107.46-226.46-107.46-359.12 0-53.375 6.3843-105.23 18.442-154.9l-6.1933-0.3923m73.578 509.56c1.718 1.9724 3.4254 3.9238 5.1646 5.8857 1.7499 1.9514 3.4996 3.9027 5.2602 5.8434l0.159-0.106c-3.5738-3.8284-7.1053-7.71-10.584-11.623"/><path fill="#848484" d="m2859.6 3777.4c-309.87 0-569.41 215.39-637.07 504.63l6.1933 0.3924c69.579-286.58 327.85-499.38 635.82-499.38 83.302 0 162.92 15.6 236.17 44.021l0.2227-3.6269c-74.659-29.694-156.08-46.036-241.34-46.036"/><path fill="#8e8e8e" d="m3070.6 3831.9-0.2228 3.6269c69.049 26.778 132.42 64.945 187.85 112.17-1.2514-1.474-2.524-2.9481-3.7861-4.401-1.6542-1.9089-3.3086-3.7966-4.9842-5.6737 1.262 1.4529 2.5028 2.8953 3.7542 4.3587-54.022-46.015-115.59-83.419-182.61-110.08"/><path fill="#858585" d="m2335.6 4751.5-0.7636 0.4666c12.556 18.156 26.004 35.643 40.278 52.42-17.297-14.73-33.809-30.341-49.483-46.768l-0.244 0.1484c17.222 18.474 35.506 35.962 54.732 52.336-15.897-18.665-30.765-38.22-44.52-58.603"/><path fill="#787878" d="m2239.4 4252.4c-10.457 46.439-15.982 94.766-15.982 144.37 0 137.96 42.802 265.89 115.74 371.39l0.7636-0.4666c-70.396-104.31-111.56-229.96-111.56-365.28 0-51.477 5.9494-101.59 17.191-149.64l-6.1509-0.3712m74.617 504.11c1.6968 1.9513 3.3936 3.8815 5.1117 5.8222 3.4784 3.9132 7.0099 7.7946 10.584 11.623l0.244-0.1484c-5.4086-5.6631-10.732-11.443-15.939-17.297"/><path fill="#858585" d="m2854.9 3771.9c-311.74 0-572.56 218.01-638.29 509.9l6.1509 0.3712c67.66-289.24 327.21-504.63 637.07-504.63 85.254 0 166.68 16.342 241.34 46.036l0.2121-3.5633c-76.059-31.009-159.27-48.115-246.48-48.115"/><path fill="#8f8f8f" d="m3070.9 3828.6-0.2121 3.5633c67.013 26.661 128.59 64.065 182.61 110.08-1.2514-1.4635-2.4922-2.9058-3.7543-4.3587-1.7815-2.0573-3.5738-4.1041-5.3873-6.1403 1.3787 1.5908 2.7468 3.1815 4.1148 4.7829-52.611-44.796-112.38-81.436-177.37-107.93"/><path fill="#868686" d="m2335 4752.1-0.6894 0.4242c11.305 15.96 23.31 31.401 35.962 46.27-15.345-13.076-30.076-26.82-44.159-41.232l-0.3182 0.1909c15.674 16.427 32.186 32.038 49.483 46.768-14.274-16.777-27.722-34.265-40.278-52.42"/><path fill="#797979" d="m2233.5 4252c-9.7035 44.817-14.826 91.373-14.826 139.1 0 140.63 44.467 270.82 120 377.46l0.6894-0.4242c-72.941-105.5-115.74-233.43-115.74-371.39 0-49.6 5.5252-97.926 15.982-144.37l-6.0979-0.3818m75.571 498.64c1.7074 1.9619 3.4148 3.9026 5.1434 5.854 5.207 5.8539 10.531 11.634 15.939 17.297l0.3182-0.1909c-7.3069-7.4765-14.455-15.144-21.401-22.96"/><path fill="#868686" d="m2850.1 3766.5c-313.62 0-575.69 220.63-639.45 515.16l6.0979 0.3817c65.73-291.89 326.55-509.9 638.29-509.9 87.215 0 170.42 17.106 246.48 48.115l0.2121-3.5209c-77.448-32.356-162.44-50.236-251.64-50.236"/><path fill="#8f8f8f" d="m3071.3 3825.3-0.2121 3.5208c64.988 26.491 124.76 63.132 177.37 107.93-1.3681-1.6013-2.7361-3.1921-4.1149-4.7828-1.7179-1.9832-3.4677-3.9663-5.2069-5.9388 1.4422 1.665 2.8739 3.3299 4.3056 5.0161-51.201-43.586-109.18-79.442-172.14-105.74"/><path fill="#878787" d="m2334.4 4752.7-0.6151 0.3818c10 13.797 20.542 27.191 31.56 40.151-13.384-11.39-26.311-23.32-38.74-35.739l-0.403 0.2439c14.083 14.412 28.814 28.156 44.159 41.232-12.652-14.868-24.657-30.309-35.962-46.27"/><path fill="#797979" d="m2227.5 4251.7c-8.9824 43.215-13.691 87.958-13.691 133.84 0 143.29 46.153 275.74 124.31 383.49l0.615-0.3818c-75.529-106.64-120-236.83-120-377.46 0-47.722 5.1222-94.278 14.826-139.1l-6.0661-0.3817m76.748 493.44c1.6226 1.8665 3.2451 3.7224 4.8889 5.5782 6.9463 7.8159 14.094 15.483 21.401 22.96l0.403-0.244c-9.1734-9.1627-18.071-18.601-26.693-28.294"/><path fill="#878787" d="m2845.3 3760.9c-315.47 0-578.8 223.3-640.57 520.44l6.0661 0.3818c63.757-294.53 325.83-515.16 639.45-515.16 89.199 0 174.19 17.88 251.64 50.236l0.2121-3.4784c-78.827-33.724-165.62-52.42-256.79-52.42"/><path fill="#909090" d="m3071.6 3822.1-0.2121 3.4784c62.962 26.3 120.94 62.156 172.14 105.74-1.4317-1.6862-2.8634-3.3512-4.3057-5.0162-1.5483-1.7816-3.1072-3.542-4.6662-5.3131 1.3151 1.5272 2.6407 3.0649 3.9557 4.6132-49.79-42.367-105.97-77.427-166.91-103.5"/><path fill="#888" d="m2333.9 4753.3-0.5515 0.3394c8.6643 11.676 17.7 23.034 27.106 34.095-11.432-9.7248-22.525-19.842-33.257-30.32l-0.4772 0.2969c12.429 12.418 25.357 24.349 38.74 35.739-11.018-12.959-21.56-26.354-31.56-40.151"/><path fill="#7a7a7a" d="m2221.7 4251.3c-8.2825 41.572-12.631 84.554-12.631 128.55 0 145.96 47.892 280.66 128.7 389.48l0.5515-0.3394c-78.159-107.75-124.31-240.19-124.31-383.49 0-45.877 4.7086-90.62 13.691-133.84l-6.0024-0.3712m77.713 488.08c1.6756 1.9195 3.3512 3.8284 5.0374 5.7267 8.6219 9.693 17.52 19.132 26.693 28.294l0.4772-0.297c-11.135-10.849-21.868-22.101-32.207-33.724"/><path fill="#888" d="m2840.5 3755.5c-317.33 0-581.91 225.93-641.63 525.71l6.0025 0.3713c61.774-297.14 325.11-520.44 640.57-520.44 91.171 0 177.96 18.697 256.79 52.42l0.2121-3.4148c-80.195-35.134-168.78-54.648-261.94-54.648"/><path fill="#919191" d="m3072 3819-0.2121 3.4148c60.947 26.078 117.12 61.138 166.91 103.5-1.315-1.5483-2.6406-3.0861-3.9557-4.6132-1.7922-2.0573-3.5951-4.1147-5.3979-6.1509 1.4529 1.6756 2.8952 3.3512 4.3268 5.0374-48.359-41.126-102.75-75.38-161.67-101.19"/><path fill="#898989" d="m2333.5 4753.7-0.4773 0.2969c7.2751 9.5658 14.805 18.919 22.578 28.072-9.4597-8.0493-18.707-16.374-27.69-24.932l-0.562 0.3394c10.732 10.478 21.825 20.595 33.257 30.32-9.4066-11.061-18.442-22.419-27.106-34.095"/><path fill="#7b7b7b" d="m2215.8 4251c-7.6143 39.928-11.591 81.139-11.591 123.28 0 148.62 49.653 285.58 133.16 395.42l0.4773-0.2969c-80.81-108.82-128.7-243.52-128.7-389.48 0-44 4.3479-86.982 12.63-128.55l-5.9706-0.3711m78.339 482.36c1.7711 2.0467 3.5527 4.0829 5.345 6.0978 10.34 11.623 21.072 22.875 32.207 33.724l0.5621-0.3393c-13.246-12.62-25.961-25.802-38.114-39.482"/><path fill="#898989" d="m2835.8 3750c-319.2 0-585.01 228.59-642.67 530.98l5.9706 0.3712c59.728-299.78 324.3-525.71 641.63-525.71 93.165 0 181.75 19.513 261.94 54.648l0.2015-3.3618c-81.542-36.577-171.92-56.928-267.08-56.928"/><path fill="#929292" d="m3072.3 3815.9-0.2015 3.3618c58.921 25.813 113.31 60.067 161.67 101.19-1.4317-1.6862-2.8741-3.3618-4.3269-5.0374-1.5907-1.824-3.1815-3.6481-4.7934-5.4509 1.3786 1.5907 2.7361 3.1708 4.104 4.7722-46.927-39.896-99.538-73.323-156.46-98.839"/><path fill="#8a8a8a" d="m2333.2 4754.2-0.403 0.2439c5.8329 7.4978 11.825 14.868 17.976 22.101-7.4977-6.3736-14.847-12.906-22.037-19.609l-0.6469 0.403c8.9825 8.5582 18.23 16.883 27.69 24.932-7.7735-9.1521-15.303-18.506-22.578-28.072"/><path fill="#7c7c7c" d="m2210.2 4250.6c-6.9674 38.274-10.605 77.703-10.605 117.99 0 151.3 51.445 290.5 137.7 401.31l0.403-0.2439c-83.504-109.84-133.16-246.8-133.16-395.42 0-42.144 3.9768-83.355 11.591-123.28l-5.9282-0.3605m79.241 476.99c1.665 1.93 3.33 3.8283 5.0268 5.7267 12.153 13.68 24.869 26.862 38.114 39.482l0.647-0.403c-15.292-14.221-29.917-29.185-43.788-44.806"/><path fill="#8a8a8a" d="m2831 3744.6c-321.05 0-588.09 231.25-643.66 536.26l5.9282 0.3606c57.659-302.39 323.47-530.98 642.67-530.98 95.159 0 185.53 20.351 267.08 56.928l0.2015-3.3195c-82.878-38.03-175.06-59.25-272.22-59.25"/><path fill="#939393" d="m3072.6 3812.8-0.2015 3.3193c56.917 25.516 109.53 58.943 156.46 98.839-1.368-1.6014-2.7256-3.1816-4.1041-4.7723-1.7074-1.9725-3.4254-3.9345-5.1646-5.8858 1.421 1.6438 2.8421 3.2876 4.2526 4.9419-45.496-38.666-96.315-71.244-151.24-96.442"/><path fill="#8b8b8b" d="m2332.9 4754.6-0.3393 0.2015c4.348 5.4616 8.7915 10.86 13.309 16.173-5.5146-4.6874-10.955-9.4597-16.31-14.327l-0.7211 0.4454c7.1902 6.7023 14.54 13.235 22.037 19.609-6.1509-7.2326-12.143-14.603-17.976-22.101"/><path fill="#7d7d7d" d="m2204.4 4250.3c-6.363 36.63-9.6717 74.277-9.6717 112.72 0 153.97 53.28 295.41 142.3 407.16l0.3393-0.2015c-86.25-110.81-137.7-250.01-137.7-401.31 0-40.288 3.6375-79.718 10.605-117.99l-5.8752-0.3712m80.078 471.64c1.665 1.9195 3.3406 3.8284 5.0374 5.7267 13.871 15.621 28.496 30.585 43.788 44.806l0.7211-0.4454c-17.392-15.791-33.947-32.526-49.546-50.087"/><path fill="#8c8c8c" d="m2826.2 3739c-322.9 0-591.17 233.91-644.59 541.53l5.8751 0.3713c55.57-305.01 322.61-536.26 643.66-536.26 97.163 0 189.34 21.221 272.22 59.25l0.2015-3.2663c-84.204-39.525-178.19-61.626-277.36-61.626"/><path fill="#949494" d="m3073 3809.8-0.2015 3.2663c54.923 25.198 105.74 57.776 151.24 96.442-1.4105-1.6544-2.8315-3.2981-4.2526-4.9419-1.7498-2.0256-3.5209-4.0299-5.3025-6.0343 1.5271 1.7499 3.0224 3.4997 4.5283 5.2601-44.042-37.425-93.101-69.145-146.01-93.992"/><path fill="#8c8c8c" d="m2332.7 4754.9-0.2652 0.1697c2.821 3.4572 5.6737 6.872 8.5583 10.276-3.5209-3.0013-7.0205-6.0342-10.478-9.0991l-0.8165 0.4984c5.3555 4.8677 10.796 9.6399 16.31 14.328-4.5177-5.3132-8.9612-10.711-13.309-16.173"/><path fill="#7e7e7e" d="m2198.7 4249.9c-5.7797 34.954-8.7809 70.841-8.7809 107.44 0 156.64 55.167 300.33 146.97 412.97l0.2651-0.1697c-89.1-111.7-142.3-253.1-142.3-407.1 0-38.443 3.3088-76.091 9.6718-112.72l-5.8328-0.3606m80.874 466.26c1.6649 1.9195 3.3405 3.8284 5.0373 5.7373 15.6 17.562 32.154 34.296 49.547 50.087l0.8166-0.4985c-19.556-17.328-38.051-35.802-55.4-55.326"/><path fill="#8d8d8d" d="m2821.5 3733.6c-131.66 0-254.27 38.91-356.9 105.83l-120.84 101.43c-86.325 92.21-146.23 209.41-167.74 339.58l5.8328 0.3606c53.428-307.62 321.69-541.53 644.59-541.53 99.178 0 193.16 22.101 277.36 61.626l0.1909-3.2133c-85.508-41.052-181.3-64.075-282.5-64.075"/><path fill="#959595" d="m3073.3 3806.8-0.1909 3.2133c52.908 24.848 101.97 56.567 146.01 93.992-1.5059-1.7604-3.0012-3.5102-4.5283-5.2601-1.5483-1.7922-3.1285-3.5951-4.7086-5.3661 1.421 1.6332 2.8209 3.2663 4.2208 4.9101-42.6-36.184-89.877-67.034-140.8-91.489"/><path fill="#8d8d8d" d="m2332.5 4755.3-0.1802 0.1167c1.2407 1.4847 2.4815 2.9588 3.7329 4.4329-1.5377-1.3044-3.0542-2.6089-4.5813-3.9239l-0.8909 0.5516c3.4573 3.0647 6.9569 6.0978 10.478 9.099-2.8846-3.4042-5.7373-6.819-8.5583-10.276"/><path fill="#7e7e7e" d="m2193.1 4249.6c-5.2177 33.268-7.9326 67.405-7.9326 102.14 0 159.33 57.076 305.26 151.74 418.74l0.1803-0.1166c-91.808-112.64-146.97-256.33-146.97-412.97 0-36.598 3.0011-72.485 8.7809-107.44l-5.7903-0.3499m81.627 460.88c1.6649 1.9089 3.3511 3.839 5.0373 5.7267 17.35 19.524 35.845 37.998 55.4 55.326l0.8909-0.5514c-21.74-18.803-42.229-39.026-61.329-60.502"/><path fill="#8e8e8e" d="m2816.6 3728.1c-114.53 0-222.17 29.418-315.81 81.128l-36.163 30.341c102.64-66.918 225.24-105.83 356.9-105.83 101.19 0 196.99 23.024 282.5 64.075l0.1909-3.1497c-86.791-42.611-184.4-66.568-287.62-66.568m-472.81 212.9-36.47 30.606c-70.438 87.226-118.92 192.87-137.06 308.63l5.7904 0.3499c21.507-130.18 81.414-247.37 167.74-339.58"/><path fill="#969696" d="m3073.6 3803.9-0.1908 3.1497c50.925 24.455 98.202 55.305 140.8 91.489-1.3998-1.6438-2.7997-3.2769-4.2207-4.9101-1.7393-2.015-3.4998-4.0193-5.2707-6.013 1.5059 1.7286 2.9906 3.4678 4.4753 5.207-41.147-34.944-86.643-64.903-135.6-88.923"/><path fill="#8e8e8e" d="m2332.5 4755.6-0.8484 0.509c1.5271 1.315 3.0437 2.6194 4.5814 3.9238-1.2514-1.4741-2.4922-2.9481-3.733-4.4328"/><path fill="#7f7f7f" d="m2187.4 4249.3c-4.6874 31.603-7.1265 63.948-7.1265 96.856 0 161.38 58.54 309.01 155.41 423.09-23.543-19.99-45.654-41.603-66.165-64.69 1.7499 2.0044 3.4891 3.9981 5.2601 5.9919 19.1 21.475 39.588 41.699 61.329 60.502l0.8484-0.509c-94.66-113.47-151.74-259.41-151.74-418.74 0-34.731 2.7149-68.869 7.9325-102.14l-5.7479-0.3606"/><path fill="#8e8e8e" d="m2811.9 3722.7c-102.3 0-199.08 23.458-285.31 65.316l-25.558 21.454c93.632-51.71 201.27-81.128 315.81-81.128 103.22 0 200.83 23.957 287.62 66.568l0.1909-3.1072c-88.075-44.202-187.5-69.102-292.75-69.102m-504.34 249.14-25.876 21.719c-60.109 82.984-101.21 180.62-116.93 286.55l5.7479 0.3604c18.135-115.75 66.621-221.4 137.06-308.63"/><path fill="#979797" d="m3073.9 3801.1-0.1909 3.1073c48.953 24.02 94.448 53.979 135.6 88.923-1.4847-1.7392-2.9694-3.4784-4.4753-5.2071-1.7499-2.0149-3.4997-4.0086-5.2707-6.0024 1.5801 1.8135 3.1603 3.6587 4.7192 5.4934-39.673-33.682-83.419-62.739-130.38-86.314"/><path fill="#808080" d="m2182 4249c-4.1889 29.917-6.3523 60.48-6.3523 91.553 0 161.34 58.508 308.94 155.33 423.01-23.554-19.99-45.676-41.614-66.186-64.69 1.665 1.9195 3.3407 3.8284 5.0268 5.7266 20.51 23.087 42.621 44.7 66.164 64.691-96.866-114.08-155.41-261.71-155.41-423.09 0-32.907 2.4391-65.253 7.1265-96.856l-5.7055-0.35"/><path fill="#8e8e8e" d="m2807.1 3717.1c-92.232 0-179.99 19.068-259.58 53.513l-20.786 17.445c86.229-41.858 183.01-65.316 285.31-65.316 105.25 0 204.68 24.9 292.75 69.102l0.1803-3.0437c-89.336-45.824-190.57-71.7-297.87-71.7m-525.28 276.5-21.104 17.71c-52.251 79.145-87.788 170.34-101.53 268.49l5.7055 0.35c15.717-105.92 56.822-203.56 116.93-286.55"/><path fill="#989898" d="m3074.3 3798.3-0.1802 3.0437c46.959 23.575 90.704 52.633 130.38 86.314-1.5589-1.8347-3.139-3.68-4.7192-5.4934-1.5907-1.8347-3.1815-3.6481-4.7828-5.4616 1.4953 1.7392 3.0012 3.489 4.4859 5.2389-38.21-32.43-80.184-60.565-125.18-83.642"/><path fill="#818181" d="m2176.5 4248.8c-3.7117 28.22-5.6312 57.012-5.6312 86.261 0 161.3 58.476 308.87 155.26 422.93-23.554-19.99-45.697-41.625-66.207-64.701 1.6649 1.9195 3.3405 3.8284 5.0373 5.7373 20.51 23.076 42.632 44.7 66.186 64.69-96.824-114.07-155.33-261.67-155.33-423.01 0-31.073 2.1634-61.636 6.3524-91.553l-5.6631-0.35"/><path fill="#8f8f8f" d="m2802.3 3711.7c-83.472 0-163.32 15.632-236.72 44.138l-17.912 15.027c79.59-34.445 167.35-53.513 259.58-53.513 107.3 0 208.54 25.876 297.87 71.7l0.1803-2.9906c-90.567-47.479-193.64-74.362-303-74.362m-541.44 299.87-18.188 15.261c-45.909 75.603-76.939 161.26-89.008 252.88l5.663 0.3499c13.744-98.149 49.282-189.34 101.53-268.49"/><path fill="#999" d="m3074.6 3795.5-0.1803 2.9906c44.997 23.076 86.972 51.212 125.18 83.642-1.4847-1.7499-2.9906-3.4998-4.4859-5.2389-1.8983-2.1741-3.786-4.3269-5.7055-6.4797 1.7392 1.9938 3.4572 3.9874 5.1646 6.0131-36.736-31.179-76.939-58.37-119.97-80.927"/><path fill="#828282" d="m2171.2 4248.7c-3.277 26.523-4.9632 53.545-4.9632 80.959 0 161.27 58.455 308.81 155.19 422.85-23.638-20.043-45.835-41.741-66.408-64.902 1.7286 1.9937 3.4466 3.9555 5.2071 5.9281 20.51 23.076 42.653 44.711 66.207 64.701-96.781-114.06-155.26-261.63-155.26-422.93 0-29.249 1.9195-58.041 5.6312-86.261l-5.61-0.35"/><path fill="#909090" d="m2797.5 3706.2c-75.667 0-148.31 12.832-215.92 36.471l-15.865 13.32c73.408-28.506 153.25-44.138 236.72-44.138 109.36 0 212.43 26.884 303 74.362l0.1803-2.9375c-91.808-49.165-196.68-77.077-308.12-77.077m-554.68 320.78-16.162 13.574c-40.596 72.273-67.851 153.03-78.456 238.95l5.61 0.35c12.068-91.617 43.099-177.27 89.008-252.88"/><path fill="#999" d="m3074.9 3792.9-0.1803 2.9376c43.035 22.557 83.239 49.748 119.97 80.927-1.7074-2.0256-3.4253-4.0193-5.1645-6.0131-1.4953-1.718-3.0119-3.4572-4.5178-5.154 1.5589 1.8029 3.1284 3.6269 4.6663 5.451-35.251-29.906-73.705-56.154-114.78-78.148"/><path fill="#828282" d="m2166 4248.4c-2.8528 24.816-4.3269 50.077-4.3269 75.667 0 161.23 58.434 308.73 155.13 422.78-23.586-20.001-45.75-41.646-66.281-64.744 1.612 1.8665 3.2346 3.7118 4.8783 5.5571 20.574 23.161 42.77 44.859 66.409 64.902-96.739-114.05-155.19-261.58-155.19-422.85 0-27.414 1.6862-54.436 4.9631-80.959l-5.5782-0.3499"/><path fill="#919191" d="m2792.7 3700.8c-68.508 0-134.57 10.531-196.63 30.055l-14.359 12.058c67.607-23.639 140.25-36.471 215.92-36.471 111.44 0 216.31 27.912 308.12 77.077l0.1803-2.8845c-93.016-50.872-199.73-79.834-313.23-79.834m-565.91 340-14.656 12.291c-36.025 69.123-60.067 145.46-69.378 226.31l5.5782 0.35c10.605-85.922 37.86-166.68 78.456-238.95"/><path fill="#9b9b9b" d="m3075.2 3790.2-0.1803 2.8845c41.073 21.995 79.527 48.242 114.78 78.148-1.5377-1.8239-3.1073-3.6481-4.6663-5.4509-1.6967-1.9619-3.4147-3.9133-5.1328-5.8539 1.6013 1.8559 3.2027 3.7224 4.7828 5.5888-33.766-28.634-70.46-53.916-109.58-75.317"/><path fill="#838383" d="m2160.7 4248.3c-2.4709 23.119-3.7435 46.577-3.7435 70.354 0 161.2 58.402 308.67 155.06 422.69-23.702-20.086-45.941-41.826-66.578-65.051 1.7604 2.0361 3.5314 4.0405 5.3131 6.0448 20.531 23.098 42.696 44.742 66.281 64.744-96.696-114.05-155.13-261.55-155.13-422.78 0-25.59 1.4741-50.851 4.3268-75.667l-5.5252-0.3393"/><path fill="#929292" d="m2788 3695.2c-61.891 0-121.77 8.5901-178.51 24.646l-13.171 11.05c62.06-19.524 128.12-30.055 196.63-30.055 113.49 0 220.21 28.962 313.23 79.834l0.1697-2.8209c-94.215-52.633-202.76-82.655-318.34-82.655m-575.63 357.93-13.458 11.294c-32.048 66.112-53.29 138.44-61.445 214.68l5.5252 0.3394c9.3112-80.852 33.353-157.19 69.378-226.31"/><path fill="#9c9c9c" d="m3075.6 3787.7-0.1696 2.8209c39.122 21.401 75.815 46.683 109.58 75.317-1.5802-1.8665-3.1815-3.7329-4.7829-5.5888-1.7604-2.0256-3.5208-4.0299-5.3025-6.0343 1.6968 1.962 3.383 3.9239 5.0586 5.907-32.26-27.35-67.214-51.646-104.38-72.422"/><path fill="#838383" d="m2155.5 4248.1c-2.1104 21.39-3.1921 43.109-3.1921 65.051 0 161.15 58.37 308.59 154.98 422.61-23.702-20.075-45.952-41.816-66.578-65.03 1.6543 1.9089 3.3299 3.8178 5.0055 5.7055 20.637 23.225 42.876 44.965 66.578 65.051-96.654-114.02-155.06-261.5-155.06-422.69 0-23.776 1.2726-47.235 3.7436-70.354l-5.4828-0.3393"/><path fill="#939393" d="m2783.1 3689.8c-55.687 0-109.75 6.9568-161.37 20.054l-12.206 10.244c56.747-16.056 116.62-24.646 178.51-24.646 115.58 0 224.13 30.023 318.34 82.655l0.1591-2.7573c-95.381-54.414-205.77-85.55-323.44-85.55m-584.12 374.89-12.482 10.478c-28.549 63.248-47.341 131.82-54.446 203.86l5.4828 0.3393c8.1552-76.239 29.397-148.57 61.445-214.68"/><path fill="#9d9d9d" d="m3075.8 3785.2-0.1591 2.7573c37.171 20.775 72.125 45.071 104.39 72.422-1.6756-1.9832-3.3619-3.945-5.0586-5.907-1.5908-1.824-3.2028-3.6693-4.8041-5.4721 1.6226 1.8771 3.2345 3.7542 4.8464 5.6631-30.765-26.078-63.959-49.356-99.21-69.463"/><path fill="#858585" d="m2150.4 4248c-1.7817 19.672-2.6937 39.599-2.6937 59.738 0 161.12 58.338 308.53 154.92 422.54-23.692-20.065-45.941-41.784-66.568-64.987 1.6543 1.9089 3.3193 3.8072 4.9949 5.6843 20.627 23.214 42.876 44.955 66.578 65.03-96.612-114.01-154.98-261.46-154.98-422.61 0-21.942 1.0817-43.661 3.1921-65.051l-5.4403-0.3393"/><path fill="#949494" d="m2778.4 3684.3c-49.843 0-98.361 5.5676-145.01 16.13l-11.411 9.5763c51.614-13.097 105.68-20.054 161.37-20.054 117.67 0 228.06 31.136 323.44 85.55l0.1697-2.7149c-96.548-56.228-208.77-88.488-328.55-88.488m-591.68 391.01-11.666 9.7884c-25.441 60.491-42.059 125.61-48.221 193.73l5.4403 0.3394c7.1053-72.04 25.897-140.61 54.446-203.86"/><path fill="#9e9e9e" d="m3076.2 3782.6-0.1696 2.7149c35.251 20.107 68.445 43.385 99.21 69.463-1.6119-1.9089-3.2239-3.786-4.8464-5.6631-1.7181-1.9831-3.4467-3.9556-5.1859-5.9069 1.6862 1.9407 3.3512 3.892 5.0162 5.8539-29.249-24.784-60.703-47.044-94.024-66.462"/><path fill="#868686" d="m2145.3 4247.8c-1.4847 17.954-2.2377 36.11-2.2377 54.436 0 161.08 58.317 308.47 154.84 422.45-23.755-20.118-46.068-41.911-66.748-65.178 1.718 1.9938 3.4572 3.9557 5.1964 5.9176 20.627 23.204 42.876 44.923 66.568 64.988-96.58-114-154.92-261.41-154.92-422.54 0-20.139 0.9121-40.066 2.6937-59.738l-5.3979-0.3394"/><path fill="#959595" d="m2773.6 3678.9c-44.286 0-87.555 4.4011-129.37 12.79l-10.7 8.9823c46.651-10.562 95.169-16.13 145.01-16.13 119.78 0 232.01 32.26 328.55 88.488l0.1591-2.6405c-97.683-58.084-211.75-91.489-333.65-91.489m-598.41 406.44-10.976 9.2157c-22.663 57.84-37.33 119.68-42.643 184.18l5.3979 0.3393c6.1615-68.126 22.78-133.24 48.221-193.73"/><path fill="#9f9f9f" d="m3076.4 3780.2-0.1591 2.6407c33.321 19.418 64.775 41.678 94.024 66.462-1.665-1.9619-3.33-3.9133-5.0162-5.854-1.718-1.9831-3.4466-3.9556-5.1858-5.907 1.7392 2.0044 3.4678 4.0193 5.1752 6.0449-27.732-23.49-57.437-44.711-88.838-63.386"/><path fill="#878787" d="m2140.1 4247.7c-1.209 16.215-1.8135 32.6-1.8135 49.122 0 161.04 58.285 308.39 154.77 422.38-23.776-20.128-46.1-41.922-66.79-65.2 1.6756 1.9302 3.3512 3.8391 5.048 5.7374 20.68 23.267 42.993 45.061 66.748 65.178-96.527-113.98-154.84-261.37-154.84-422.45 0-18.325 0.7529-36.481 2.2376-54.436l-5.3555-0.3287"/><path fill="#969696" d="m2768.7 3673.3c-38.995 0-77.215 3.4148-114.33 9.9581l-10.107 8.4733c41.816-8.3884 85.084-12.79 129.37-12.79 121.9 0 235.97 33.406 333.65 91.489l0.1591-2.5876c-98.796-59.971-214.73-94.544-338.74-94.544m-604.45 421.29-10.372 8.6961c-20.16 55.284-33.098 114.06-37.626 175.15l5.3555 0.3288c5.3132-64.5 19.98-126.34 42.643-184.18"/><path fill="#a0a0a0" d="m3076.8 3777.9-0.1591 2.5875c31.401 18.676 61.106 39.896 88.838 63.386-1.7074-2.0256-3.436-4.0405-5.1752-6.0447-1.6227-1.8666-3.2452-3.7225-4.8891-5.5678 1.6968 1.9515 3.383 3.9133 5.0481 5.8859-26.205-22.186-54.17-42.346-83.663-60.247"/><path fill="#878787" d="m2135.1 4247.5c-0.9544 14.465-1.4422 29.09-1.4422 43.799 0 161.01 58.253 308.33 154.71 422.3-23.798-20.139-46.153-41.953-66.854-65.253 1.6756 1.9301 3.3724 3.8602 5.0692 5.7797 20.69 23.278 43.014 45.071 66.79 65.2-96.484-113.98-154.77-261.34-154.77-422.38 0-16.523 0.6045-32.907 1.8134-49.122l-5.3131-0.3288"/><path fill="#979797" d="m2764 3667.9c-33.947 0-67.278 2.577-99.825 7.5614l-9.5657 8.0386c37.118-6.5433 75.338-9.9581 114.33-9.9581 124.01 0 239.95 34.572 338.74 94.544l0.1485-2.5239c-99.899-61.891-217.67-97.662-343.84-97.662m-609.88 435.63-9.8308 8.2507c-17.922 52.834-29.28 108.66-33.109 166.57l5.3131 0.3288c4.5283-61.095 17.466-119.87 37.626-175.15"/><path fill="#a2a2a2" d="m3077 3775.6-0.1485 2.5239c29.492 17.901 57.458 38.061 83.663 60.247-1.665-1.9726-3.3512-3.9344-5.048-5.8857-1.718-1.9832-3.436-3.9451-5.1752-5.9071 1.7498 2.015 3.489 4.0511 5.207 6.0766-24.667-20.87-50.904-39.96-78.498-57.055"/><path fill="#888" d="m2130.1 4247.3c-0.7424 12.747-1.1135 25.558-1.1135 38.486 0 160.96 58.232 308.26 154.63 422.22-23.83-20.171-46.206-41.996-66.939-65.327 1.6862 1.9407 3.3936 3.8814 5.101 5.8009 20.701 23.299 43.056 45.114 66.854 65.253-96.452-113.97-154.71-261.3-154.71-422.3 0-14.709 0.4878-29.333 1.4423-43.799l-5.2707-0.3288"/><path fill="#989898" d="m2759.2 3662.4c-29.068 0-57.702 1.8982-85.763 5.5782l-9.1203 7.6462c32.547-4.9843 65.878-7.5613 99.825-7.5613 126.17 0 243.94 35.771 343.84 97.661l0.1485-2.4603c-100.98-63.853-220.61-100.86-348.93-100.86m-614.77 449.55-9.3536 7.8583c-15.886 50.416-25.844 103.52-29.026 158.39l5.2707 0.3288c3.8284-57.914 15.186-113.74 33.109-166.57"/><path fill="#a3a3a3" d="m3077.4 3773.4-0.1485 2.4603c27.594 17.095 53.831 36.184 78.498 57.055-1.718-2.0255-3.4572-4.0617-5.2071-6.0766-1.7392-2.015-3.489-3.9981-5.26-5.9919 1.8346 2.1104 3.6481 4.2314 5.4509 6.3524-23.13-19.556-47.627-37.552-73.334-53.799"/><path fill="#898989" d="m2125.2 4247.1c-0.5515 10.976-0.8273 22.037-0.8273 33.151 0 160.93 58.2 308.19 154.57 422.14-23.914-20.234-46.354-42.134-67.162-65.55 1.7393 1.9937 3.4785 3.9769 5.2283 5.9494 20.733 23.331 43.109 45.156 66.939 65.327-96.4-113.96-154.63-261.25-154.63-422.22 0-12.928 0.3711-25.738 1.1135-38.486l-5.2282-0.3182"/><path fill="#989898" d="m2754.4 3657c-24.392 0-48.444 1.3362-72.146 3.9345l-8.6749 7.2856c28.061-3.6799 56.694-5.5782 85.763-5.5782 128.32 0 247.94 37.011 348.93 100.86l0.1485-2.3967c-102.04-65.846-223.53-104.11-354.02-104.11m-619.18 463.05-8.9295 7.4978c-14.052 48.125-22.726 98.542-25.325 150.57l5.2283 0.3182c3.1815-54.87 13.14-107.97 29.026-158.39"/><path fill="#a4a4a4" d="m3077.6 3771.2-0.1484 2.3967c25.706 16.247 50.204 34.244 73.334 53.799-1.8028-2.121-3.6163-4.242-5.4509-6.3524-1.7074-1.9619-3.4359-3.9345-5.1753-5.8858 1.8878 2.1634 3.7542 4.3481 5.5995 6.5327-21.56-18.241-44.34-35.124-68.158-50.49"/><path fill="#8a8a8a" d="m2120.3 4247c-0.3818 9.237-0.5833 18.506-0.5833 27.838 0 160.89 58.179 308.12 154.5 422.06-23.882-20.192-46.312-42.081-67.087-65.454 1.633 1.8877 3.2768 3.7648 4.9313 5.6313 20.807 23.416 43.247 45.315 67.162 65.55-96.368-113.95-154.57-261.21-154.57-422.14 0-11.114 0.2757-22.175 0.8272-33.151l-5.1859-0.3288"/><path fill="#999" d="m2749.6 3651.4c-19.853 0-39.525 0.8908-58.921 2.6194l-8.2931 6.9569c23.702-2.5983 47.754-3.9345 72.146-3.9345 130.48 0 251.97 38.263 354.02 104.11l0.1379-2.3331c-103.07-67.872-226.45-107.42-359.09-107.42m-623.18 476.19-8.537 7.1583c-12.387 45.888-19.906 93.801-21.974 143.08l5.1858 0.3287c2.5982-52.028 11.273-102.44 25.325-150.57"/><path fill="#a5a5a5" d="m3077.9 3769.1-0.1378 2.3331c23.819 15.366 46.598 32.25 68.158 50.49-1.8453-2.1846-3.7117-4.3693-5.5995-6.5327-1.5908-1.8452-3.2133-3.6799-4.8359-5.504 1.8241 2.0998 3.6269 4.1996 5.4193 6.3206-20.001-16.915-41.041-32.653-63.004-47.107"/><path fill="#8c8c8c" d="m2115.5 4246.9c-0.2545 7.4659-0.3817 14.985-0.3817 22.504 0 160.86 58.147 308.05 154.44 421.98-23.882-20.181-46.323-42.059-67.098-65.422 1.6651 1.9194 3.3301 3.7965 5.0163 5.6948 20.775 23.373 43.205 45.262 67.087 65.454-96.325-113.94-154.5-261.17-154.5-422.06 0-9.3324 0.2015-18.601 0.5833-27.838l-5.1435-0.3183"/><path fill="#9a9a9a" d="m2744.9 3646c-15.483 0-30.818 0.5303-46.036 1.5908l-7.9431 6.6705c19.396-1.7286 39.069-2.6194 58.921-2.6194 132.64 0 256.02 39.546 359.09 107.42l0.1379-2.2801c-104.09-69.929-229.33-110.78-364.17-110.78m-626.78 488.99-8.1871 6.8719c-10.881 43.746-17.35 89.178-18.93 135.89l5.1434 0.3182c2.068-49.282 9.5869-97.195 21.974-143.08"/><path fill="#a6a6a6" d="m3078.2 3767.1-0.138 2.2801c21.963 14.455 43.003 30.192 63.004 47.107-1.7922-2.121-3.5951-4.2208-5.4192-6.3206-1.7074-1.9725-3.4254-3.9449-5.1646-5.8858 1.8665 2.1422 3.7224 4.3163 5.5676 6.4903-18.432-15.579-37.754-30.171-57.85-43.671"/><path fill="#8d8d8d" d="m2110.7 4246.7c-0.1378 5.6949-0.2121 11.432-0.2121 17.17 0 160.8 58.115 307.99 154.37 421.9-24.01-20.277-46.535-42.261-67.405-65.74 1.7711 2.0255 3.5315 4.0299 5.3131 6.0448 20.775 23.363 43.215 45.241 67.098 65.422-96.293-113.93-154.44-261.13-154.44-421.98 0-7.5189 0.1272-15.038 0.3817-22.504l-5.101-0.3076"/><path fill="#9b9b9b" d="m2740 3640.5c-11.231 0-22.387 0.2758-33.469 0.8378l-7.625 6.3949c15.218-1.0605 30.553-1.5908 46.036-1.5908 134.83 0 260.08 40.85 364.17 110.78l0.1378-2.2059c-105.08-72.018-232.22-114.22-369.24-114.22m-630.02 501.5-7.8583 6.5964c-9.5021 41.625-15.027 84.755-16.173 128.99l5.101 0.3075c1.5801-46.715 8.0492-92.147 18.93-135.89"/><path fill="#a6a6a6" d="m3078.5 3765.1-0.1379 2.2058c20.096 13.5 39.419 28.093 57.85 43.671-1.8453-2.174-3.7012-4.348-5.5676-6.4902-1.665-1.9195-3.3406-3.8391-5.0268-5.7373 1.8665 2.1528 3.7223 4.3268 5.5782 6.5114-16.862-14.242-34.445-27.647-52.696-40.161"/><path fill="#8d8d8d" d="m2105.9 4246.6c-0.075 3.9345-0.1061 7.8901-0.1061 11.835 0 160.78 58.084 307.93 154.29 421.82-23.967-20.245-46.46-42.176-67.299-65.613 1.6331 1.8771 3.2663 3.733 4.9101 5.5995 20.871 23.48 43.396 45.464 67.405 65.74-96.251-113.91-154.37-261.1-154.37-421.9 0-5.7373 0.075-11.475 0.2121-17.17l-5.048-0.3182"/><path fill="#9c9c9c" d="m2735.2 3635.1c-7.0842 0-14.168 0.1166-21.189 0.3393l-7.3387 6.1615c11.082-0.562 22.239-0.8378 33.469-0.8378 137.03 0 264.16 42.197 369.24 114.22l0.1272-2.1316c-106.05-74.161-235.08-117.75-374.31-117.75m-632.94 513.76-7.5614 6.3418c-8.2507 39.588-12.917 80.471-13.659 122.33l5.048 0.3181c1.1454-44.233 6.6706-87.364 16.173-128.99"/><path fill="#a7a7a7" d="m3078.7 3763.2-0.1273 2.1316c18.251 12.514 35.834 25.919 52.696 40.161-1.8559-2.1847-3.7118-4.3587-5.5783-6.5115-1.6437-1.8983-3.2981-3.786-4.9631-5.6631 1.8453 2.1422 3.7011 4.2951 5.5146 6.4585-15.261-12.896-31.126-25.102-47.542-36.577"/><path fill="#8e8e8e" d="m2101.2 4246.4c-0.021 2.1529-0.032 4.3376-0.032 6.501 0 160.74 58.062 307.85 154.23 421.74-24.052-20.309-46.62-42.314-67.522-65.836 1.7286 1.9831 3.4784 3.9769 5.2283 5.9493 20.839 23.437 43.332 45.368 67.299 65.613-96.209-113.9-154.29-261.04-154.29-421.82 0-3.9452 0.032-7.9009 0.1061-11.835l-5.0162-0.3077"/><path fill="#9d9d9d" d="m2730.4 3629.5c-3.0648 0-6.1403 0.021-9.1945 0.064l-7.0523 5.9176c7.0205-0.2228 14.105-0.3394 21.189-0.3394 139.23 0 268.26 43.586 374.31 117.75l0.1272-2.0786c-106.9-76.3-237.8-121.3-379.3-121.3m-635.56 525.74-7.275 6.1085c-7.116 37.605-11.019 76.324-11.4 115.91l5.0162 0.3076c0.7423-41.858 5.4085-82.74 13.659-122.33"/><path fill="#a8a8a8" d="m3079 3761.3-0.1273 2.0786c16.417 11.475 32.282 23.681 47.542 36.577-1.8135-2.1634-3.6694-4.3163-5.5146-6.4585-1.7711-2.0361-3.5526-4.0617-5.345-6.0873 1.962 2.2695 3.9027 4.5391 5.8435 6.8298-13.67-11.538-27.806-22.525-42.399-32.939"/><path fill="#8f8f8f" d="m2096.5 4246.4v1.1665c0 160.69 58.03 307.78 154.16 421.65-24.063-20.298-46.63-42.314-67.533-65.836 1.6544 1.9195 3.3406 3.8284 5.0161 5.7267 20.902 23.522 43.47 45.527 67.522 65.836-96.166-113.89-154.23-261-154.23-421.74 0-2.1634 0.01-4.3481 0.032-6.5009l-4.9738-0.3075"/><path fill="#9e9e9e" d="m2728.1 3624.1-6.7978 5.7055c3.0542-0.042 6.1297-0.064 9.1945-0.064 141.46 0 272.39 44.986 379.38 121.31l0.1273-1.9938c-107.29-78.095-239.19-124.42-381.91-124.96m-640.44 537.49-7.0099 5.8858c-6.0979 35.665-9.29 72.326-9.3643 109.72l4.9738 0.3077c0.3818-39.588 4.2844-78.307 11.4-115.91"/><path fill="#a9a9a9" d="m3079.2 3759.6-0.1273 1.9937c14.592 10.414 28.729 21.401 42.399 32.939-1.9407-2.2906-3.8814-4.5601-5.8434-6.8296-1.6225-1.8559-3.2345-3.7011-4.8677-5.5464 1.9089 2.2058 3.8072 4.4329 5.6949 6.6599-12.058-10.17-24.487-19.927-37.255-29.217"/><path fill="#909090" d="m2091.8 4246.2c0.9969 159.03 58.815 304.52 154.08 417.4-24.031-20.266-46.598-42.25-67.48-65.74 1.633 1.8878 3.2875 3.7648 4.9525 5.6314 20.902 23.522 43.47 45.538 67.533 65.836-96.134-113.88-154.16-260.97-154.16-421.65v-1.1666l-4.9207-0.3075"/><path fill="#9f9f9f" d="m2734.9 3618.7-6.5539 5.4934c142.72 0.5409 274.62 46.864 381.91 124.96l0.1167-1.9407c-105.33-78.201-234.92-125.55-375.47-128.51m-654 548.87-6.7766 5.6843c-4.9525 32.462-7.519 65.698-7.519 99.549 0 1.3893 0 2.7892 0.01 4.1784l4.9208 0.3076c0.074-37.393 3.2663-74.055 9.3642-109.72"/><path fill="#aaa" d="m3079.5 3757.8-0.1166 1.9407c12.768 9.2899 25.197 19.047 37.255 29.217-1.8878-2.227-3.786-4.4541-5.6949-6.6599-1.6649-1.9195-3.3405-3.8284-5.0373-5.7267 1.9195 2.2058 3.8178 4.4329 5.716 6.6705-10.435-8.8021-21.146-17.286-32.122-25.441"/><path fill="#909090" d="m2087.2 4246.1c2.2483 156.91 59.802 300.39 153.95 411.98-24.095-20.319-46.715-42.367-67.649-65.921 1.718 1.9831 3.4466 3.945 5.1859 5.907 20.881 23.49 43.449 45.474 67.48 65.74-95.265-112.88-153.08-258.37-154.08-417.4l-4.8889-0.3076"/><path fill="#a0a0a0" d="m2741.4 3613.6-6.3418 5.3237c140.55 2.9588 270.14 50.31 375.47 128.51l0.106-1.8559c-103.5-78.3-230.9-126.6-369.3-131.9m-667.12 559.88-6.5326 5.4828c-3.9133 28.93-5.9282 58.423-5.9282 88.425 0 3.1707 0.021 6.3522 0.064 9.5126l4.8889 0.3076c-0.01-1.3894-0.01-2.7892-0.01-4.1784 0-33.851 2.5664-67.087 7.519-99.549"/><path fill="#ababab" d="m3079.7 3756.2-0.106 1.8558c10.976 8.1553 21.687 16.639 32.122 25.441-1.8983-2.2376-3.7966-4.4647-5.7161-6.6705-1.7816-2.068-3.5739-4.1041-5.3873-6.1509 2.0361 2.3543 4.0723 4.7192 6.0767 7.1053-8.8022-7.4235-17.806-14.624-26.99-21.581"/><path fill="#919191" d="m2082.7 4245.9c3.4574 154.78 60.746 296.24 153.78 406.55-24.169-20.372-46.842-42.473-67.83-66.101 1.7181 1.9832 3.4466 3.9557 5.1858 5.907 20.934 23.554 43.555 45.602 67.649 65.921-94.151-111.6-151.7-255.07-153.95-411.98l-4.8359-0.2969"/><path fill="#a2a2a2" d="m2747.5 3608.6-6.1085 5.1328c138.44 5.2813 265.82 53.651 369.23 131.98l0.1167-1.7817c-101.56-78.488-226.82-127.84-363.24-135.33m-679.76 570.5-6.3311 5.3131c-2.9907 25.399-4.539 51.265-4.539 77.47 0 4.9632 0.052 9.9157 0.1697 14.858l4.8359 0.297c-0.042-3.1603-0.064-6.3418-0.064-9.5127 0-30.002 2.015-59.494 5.9282-88.424"/><path fill="#acacac" d="m3080 3754.6-0.1166 1.7818c9.1839 6.9568 18.188 14.158 26.99 21.581-2.0043-2.3862-4.0405-4.7511-6.0767-7.1054-1.6225-1.8665-3.2557-3.733-4.8995-5.5887 1.9938 2.3118 3.9875 4.6343 5.96 6.978-7.1583-6.0343-14.444-11.92-21.857-17.647"/><path fill="#919191" d="m2078.1 4245.8c4.645 152.66 61.647 292.08 153.58 401.12-24.211-20.404-46.916-42.526-67.936-66.186 1.6968 1.9513 3.3936 3.892 5.1116 5.8115 20.987 23.628 43.661 45.729 67.83 66.101-93.038-110.31-150.33-251.77-153.78-406.55l-4.8041-0.2969"/><path fill="#a3a3a3" d="m2753.6 3603.8-5.907 4.9632c136.42 7.4871 261.68 56.843 363.24 135.33l0.096-1.7074c-99.687-78.689-222.92-128.96-357.39-138.61m-692 580.77-6.1191 5.1435c-2.2271 21.931-3.3618 44.149-3.3618 66.663 0 6.766 0.106 13.511 0.3075 20.224l4.8041 0.297c-0.1167-4.942-0.1697-9.8945-0.1697-14.858 0-26.205 1.5483-52.071 4.539-77.47"/><path fill="#adadad" d="m3080.2 3753.1-0.095 1.7075c7.4129 5.7267 14.699 11.612 21.857 17.647-1.9726-2.3437-3.9663-4.6662-5.96-6.9781-1.7498-2.0149-3.5103-4.0193-5.2919-6.013 2.0998 2.4073 4.1784 4.8359 6.2357 7.2856-5.504-4.645-11.082-9.1945-16.745-13.649"/><path fill="#929292" d="m2073.7 4245.6c5.7903 150.53 62.516 287.95 153.32 395.69-24.179-20.372-46.864-42.462-67.861-66.09 1.6331 1.8877 3.2875 3.7647 4.9419 5.6312 21.019 23.66 43.724 45.782 67.936 66.186-91.935-109.04-148.94-248.46-153.58-401.12l-4.751-0.2969"/><path fill="#a4a4a4" d="m2759.5 3599.2-5.7161 4.7934c134.47 9.6082 257.66 59.918 357.43 138.59l0.106-1.6332c-98.033-78.869-219.24-130.11-351.82-141.75m-703.83 590.71-5.9282 4.9737c-1.5695 18.474-2.3755 37.17-2.3755 56.047 0 8.5583 0.1697 17.085 0.4984 25.569l4.7511 0.2969c-0.2015-6.7129-0.3076-13.458-0.3076-20.224 0-22.514 1.1347-44.732 3.3618-66.663"/><path fill="#aeaeae" d="m3080.5 3751.7-0.1061 1.633c5.6631 4.4541 11.241 9.0037 16.745 13.649-2.0574-2.4498-4.136-4.8784-6.2357-7.2857-1.6756-1.9406-3.3618-3.8601-5.0692-5.7796 2.1103 2.4285 4.1994 4.8889 6.2781 7.3492-3.839-3.2346-7.7098-6.4266-11.612-9.5656"/><path fill="#939393" d="m2069.2 4245.6c6.9145 148.4 63.333 283.8 153.03 390.26-24.201-20.393-46.906-42.494-67.925-66.143 1.6756 1.9301 3.3724 3.8603 5.0692 5.7691 20.998 23.628 43.682 45.718 67.861 66.09-90.8-107.75-147.53-245.17-153.32-395.69l-4.7193-0.2863"/><path fill="#a5a5a5" d="m2765.1 3594.6-5.5358 4.6343c132.58 11.634 253.79 62.877 351.82 141.75l0.095-1.5695c-96.346-79.071-215.62-131.23-346.38-144.81m-715.3 600.32-5.7479 4.8147c-1.0393 15.07-1.5589 30.256-1.5589 45.591 0 10.361 0.2333 20.68 0.7105 30.924l4.7193 0.2863c-0.3288-8.484-0.4985-17.01-0.4985-25.569 0-18.877 0.806-37.574 2.3755-56.047"/><path fill="#afafaf" d="m3081.1 3748.6c2.0467 2.3543 4.0723 4.73 6.0872 7.1266-2.1528-1.824-4.3268-3.6269-6.5008-5.4192l-0.096 1.5696c3.9027 3.139 7.7735 6.3312 11.612 9.5657-2.0786-2.4604-4.1678-4.9207-6.2782-7.3493-1.6013-1.8452-3.2027-3.6693-4.8252-5.4934"/><path fill="#949494" d="m2064.8 4245.5c8.0068 146.26 64.118 279.66 152.69 384.83-24.254-20.425-47.001-42.568-68.052-66.26 1.6968 1.9513 3.4148 3.9133 5.1328 5.8434 21.019 23.649 43.724 45.75 67.925 66.143-89.697-106.46-146.12-241.87-153.03-390.26l-4.6662-0.297"/><path fill="#a5a5a5" d="m2770.7 3590.3-5.3556 4.5071c130.76 13.585 250.03 65.74 346.38 144.81l0.085-1.4741c-94.682-79.294-212.11-132.36-341.11-147.84m-726.4 609.64-5.5676 4.6768c-0.6151 11.666-0.9333 23.448-0.9333 35.272 0 12.164 0.3288 24.264 0.9863 36.269l4.6662 0.2969c-0.4772-10.244-0.7106-20.563-0.7106-30.924 0-15.335 0.5197-30.521 1.559-45.591"/><path fill="#a5a5a5" d="m3076.5 3743.3c1.6225 1.8664 3.2239 3.7435 4.8358 5.6418v-0.1272c-1.6013-1.8453-3.2133-3.6906-4.8358-5.5146"/><path fill="#b0b0b0" d="m3081 3748.5v0.1273c0.456 0.5303 0.912 1.0817 1.368 1.6226l-1.3998-1.1772-0.085 1.4741c2.174 1.7923 4.3481 3.5951 6.501 5.4192-2.0151-2.3968-4.0406-4.7723-6.0873-7.1266-0.096-0.1167-0.2016-0.2333-0.297-0.3394"/><path fill="#959595" d="m2060.5 4245.3c9.0673 144.12 64.86 275.53 152.3 379.39-24.296-20.457-47.086-42.653-68.18-66.387 1.7074 1.962 3.4148 3.9133 5.1434 5.8541 21.051 23.692 43.799 45.835 68.052 66.26-88.573-105.17-144.68-238.57-152.69-384.83l-4.6238-0.2863"/><path fill="#a6a6a6" d="m2776 3586.1-5.1858 4.3481c129 15.483 246.43 68.551 341.11 147.84l0.032-0.4453c-1.612-1.8984-3.2133-3.7755-4.8359-5.642-1.7498-2.0149-3.5208-4.0405-5.3025-6.0342 2.1847 2.5028 4.3375 5.0374 6.4797 7.572-92.433-77.82-206.68-130.58-332.3-147.64m-737.15 618.66-5.398 4.5284c-0.3182 8.3355-0.4772 16.682-0.4772 25.081 0 13.999 0.4454 27.88 1.3044 41.646l4.6238 0.2864c-0.6575-12.005-0.9863-24.105-0.9863-36.269 0-11.825 0.3182-23.607 0.9333-35.272"/><path fill="#b1b1b1" d="m3081.2 3748.8-0.032 0.4454 1.3998 1.1771c-0.456-0.5408-0.912-1.0923-1.368-1.6225"/><path fill="#959595" d="m2056.1 4245.3c10.096 141.98 65.55 271.38 151.87 373.94-24.328-20.478-47.139-42.685-68.254-66.44 1.6862 1.9301 3.3723 3.8602 5.0798 5.7798 21.093 23.734 43.883 45.93 68.179 66.387-87.438-103.87-143.23-235.27-152.3-379.39l-4.5813-0.2758"/><path fill="#a7a7a7" d="m2781.2 3582-5.0162 4.2102c125.62 17.064 239.86 69.823 332.3 147.64-2.1423-2.5346-4.2951-5.0692-6.4797-7.572-1.5589-1.8028-3.1391-3.595-4.7192-5.3873 2.0786 2.4073 4.1359 4.8147 6.1827 7.2432-89.973-75.72-200.61-127.71-322.26-146.14m-747.57 627.4-5.2495 4.4011c-0.106 5.0056-0.1697 10.011-0.1697 15.038 0 15.812 0.5621 31.486 1.665 47.012l4.5814 0.2757c-0.859-13.765-1.3044-27.647-1.3044-41.646 0-8.3991 0.159-16.745 0.4772-25.081"/><path fill="#969696" d="m2051.9 4245.1c11.093 139.83 66.196 267.25 151.4 368.5-24.338-20.478-47.182-42.717-68.307-66.483 1.6756 1.9301 3.3618 3.8602 5.0586 5.7691 21.114 23.755 43.926 45.962 68.254 66.44-86.325-102.56-141.78-231.96-151.87-373.94l-4.5284-0.2863"/><path fill="#a8a8a8" d="m2786.4 3578-4.8678 4.0829c121.65 18.432 232.29 70.417 322.26 146.14-2.0467-2.4286-4.1042-4.8359-6.1827-7.2432-1.7499-2.0044-3.5102-4.0193-5.2707-6.0024 2.1635 2.4921 4.3057 5.0055 6.4373 7.5295-87.544-73.652-194.62-124.82-312.38-144.5m-757.68 635.89-5.0904 4.2738c-0.011 1.6968-0.021 3.4254-0.021 5.1222 0 17.636 0.6999 35.092 2.0786 52.368l4.5283 0.2863c-1.1029-15.526-1.665-31.2-1.665-47.012 0-5.0268 0.064-10.032 0.1697-15.038"/><path fill="#979797" d="m2047.7 4245c12.058 137.68 66.811 263.11 150.88 363.05-24.317-20.457-47.15-42.664-68.264-66.408 1.6544 1.8983 3.2982 3.7754 4.9737 5.6525 21.125 23.766 43.968 46.004 68.307 66.483-85.2-101.26-140.3-228.68-151.4-368.5l-4.4966-0.2757"/><path fill="#a9a9a9" d="m2791.4 3574.2-4.7193 3.9557c117.76 19.683 224.84 70.852 312.38 144.5-2.1316-2.524-4.2738-5.0374-6.4372-7.5295-1.7498-2.015-3.4785-3.9981-5.2495-5.9813 2.2377 2.577 4.4647 5.1859 6.66 7.7947-85.116-71.594-188.73-121.94-302.63-142.74m-767.49 644.12-4.9419 4.1465c0.1272 17.88 0.965 35.559 2.5028 53.068l4.4965 0.2757c-1.3787-17.276-2.0786-34.731-2.0786-52.368 0-1.6968 0.011-3.4254 0.021-5.1222"/><path fill="#989898" d="m2043.5 4244.9c12.991 135.53 67.395 258.97 150.33 357.6-24.423-20.542-47.341-42.844-68.53-66.684 1.7498 2.015 3.4997 4.0087 5.2707 6.0024 21.114 23.745 43.947 45.952 68.264 66.409-84.066-99.942-138.82-225.37-150.88-363.05l-4.4542-0.2757"/><path fill="#aaa" d="m2796.2 3570.5-4.5709 3.8496c113.91 20.807 217.52 71.149 302.63 142.74-2.1952-2.6088-4.4223-5.2176-6.6599-7.7946-1.6014-1.8453-3.2027-3.6588-4.8253-5.4934 2.1846 2.5133 4.3268 5.0267 6.4691 7.5719-82.73-69.558-182.9-119.05-293.05-140.88m-777.01 652.11-4.804 4.0299c0.3606 16.416 1.3151 32.663 2.8528 48.762l4.4541 0.2758c-1.5377-17.509-2.3755-35.187-2.5029-53.067"/><path fill="#999" d="m2039.4 4244.8c13.892 133.4 67.904 254.84 149.71 352.15-24.476-20.574-47.436-42.908-68.667-66.812 1.7075 1.9619 3.4148 3.9132 5.1434 5.8539 21.189 23.84 44.106 46.142 68.53 66.684-82.931-98.626-137.33-222.07-150.33-357.6l-4.3904-0.2758"/><path fill="#ababab" d="m2800.9 3566.9-4.4329 3.7118c110.14 21.825 210.32 71.319 293.05 140.88-2.1421-2.5452-4.2843-5.0585-6.469-7.572-1.7074-1.9725-3.4465-3.9557-5.1753-5.907 2.2271 2.5664 4.4329 5.1542 6.6282 7.7629-80.365-67.543-177.19-116.16-283.6-138.87m-786.24 659.85-4.6556 3.9132c0.5408 14.985 1.5801 29.864 3.1178 44.573l4.3905 0.2757c-1.5377-16.098-2.4922-32.345-2.8527-48.762"/><path fill="#9a9a9a" d="m2035.3 4244.7c14.762 131.24 68.402 250.7 149.06 346.69-24.434-20.531-47.351-42.812-68.551-66.652 1.6226 1.8665 3.2558 3.7224 4.8889 5.5676 21.231 23.904 44.191 46.238 68.667 66.812-81.807-97.312-135.82-218.75-149.71-352.15l-4.3586-0.2651"/><path fill="#acacac" d="m2805.5 3563.4-4.295 3.6057c106.41 22.716 203.23 71.329 283.6 138.87-2.1952-2.6089-4.4011-5.1966-6.6281-7.7629-1.8347-2.121-3.6905-4.2208-5.557-6.3206 2.4073 2.768 4.8041 5.5676 7.1583 8.3779-78.01-65.56-171.54-113.27-274.28-136.77m-795.19 667.37-4.5283 3.8072c0.6787 13.617 1.7816 27.106 3.2875 40.5l4.3587 0.2651c-1.5377-14.709-2.577-29.588-3.1179-44.573"/><path fill="#9a9a9a" d="m2031.2 4244.6c15.611 129.09 68.848 246.57 148.37 341.23-24.508-20.584-47.5-42.94-68.742-66.843 1.718 1.9831 3.4467 3.9556 5.1965 5.9176 21.199 23.84 44.117 46.121 68.551 66.652-80.662-95.986-134.3-215.45-149.06-346.69l-4.3162-0.2651"/><path fill="#adadad" d="m2810 3560-4.1571 3.4889c102.74 23.501 196.27 71.213 274.28 136.77-2.3543-2.8103-4.7511-5.6101-7.1584-8.378-1.5059-1.7392-3.0224-3.4678-4.5602-5.1964 2.2483 2.5982 4.486 5.2283 6.7024 7.8583-75.688-63.588-165.97-110.37-265.1-134.55m-803.88 674.67-4.4117 3.6906c0.7954 12.27 1.9301 24.466 3.383 36.545l4.3163 0.2651c-1.506-13.394-2.6089-26.884-3.2876-40.5"/><path fill="#9b9b9b" d="m2027.2 4244.6c16.416 126.93 69.251 242.44 147.62 335.76-24.498-20.574-47.468-42.897-68.72-66.801 1.6543 1.909 3.3087 3.786 4.9949 5.6842 21.242 23.904 44.234 46.259 68.742 66.843-79.527-94.66-132.76-212.13-148.37-341.23l-4.2632-0.2653"/><path fill="#aeaeae" d="m2814.2 3556.7-4.0511 3.3936c99.136 24.179 189.42 70.958 265.1 134.55-2.2166-2.63-4.4541-5.2601-6.7025-7.8583-1.7074-1.9725-3.4148-3.9132-5.1433-5.8646 2.2906 2.6513 4.5707 5.3237 6.8295 8.0068-73.386-61.626-160.46-107.46-256.04-132.22m-812.34 681.75-4.2738 3.5951c0.859 10.976 1.9937 21.868 3.3936 32.685l4.2632 0.2651c-1.4529-12.079-2.5876-24.275-3.383-36.545"/><path fill="#9c9c9c" d="m2023.3 4244.4c17.191 124.79 69.601 238.32 146.84 330.3-24.572-20.627-47.606-43.014-68.911-66.992 1.7181 1.9832 3.4573 3.9557 5.1965 5.9176 21.252 23.904 44.223 46.227 68.72 66.801-78.371-93.324-131.21-208.83-147.62-335.76l-4.2208-0.2651"/><path fill="#afafaf" d="m2818.4 3553.5-3.9133 3.2875c95.572 24.763 182.65 70.598 256.04 132.22-2.2588-2.6831-4.5389-5.3555-6.8296-8.0068-1.718-1.9725-3.4254-3.9238-5.154-5.8751 2.3437 2.7042 4.6556 5.4191 6.9569 8.1658-71.085-59.685-155.03-104.55-247.1-129.79m-820.53 688.64-4.1571 3.489c0.9014 9.7142 2.0043 19.344 3.3299 28.93l4.2208 0.2651c-1.3998-10.817-2.5346-21.708-3.3936-32.685"/><path fill="#9d9d9d" d="m2019.4 4244.4c17.933 122.63 69.919 234.18 146.01 324.83-24.572-20.616-47.606-43.003-68.911-66.97 1.6544 1.9195 3.33 3.8178 5.0056 5.7054 21.306 23.978 44.34 46.365 68.911 66.992-77.236-91.988-129.65-205.51-146.84-330.3l-4.1784-0.2545"/><path fill="#afafaf" d="m2822.5 3550.4-3.7859 3.1815c92.062 25.24 176.01 70.11 247.1 129.79-2.3013-2.7467-4.6132-5.4616-6.9569-8.1659-1.665-1.9195-3.3512-3.839-5.0374-5.7373 2.3543 2.7149 4.6768 5.4404 6.9781 8.1871-68.816-57.755-149.68-101.63-238.29-127.26m-828.47 695.31-4.0405 3.3936c0.9015 8.4734 1.9726 16.894 3.1921 25.282l4.1784 0.2545c-1.3256-9.5869-2.4285-19.216-3.33-28.93"/><path fill="#9e9e9e" d="m2015.5 4244.2c18.644 120.47 70.194 230.06 145.13 319.37-24.646-20.669-47.733-43.109-69.092-67.14 1.718 1.9832 3.4467 3.9451 5.186 5.8964 21.305 23.967 44.339 46.354 68.911 66.971-76.091-90.652-128.08-202.21-146.01-324.83l-4.1253-0.2651"/><path fill="#b0b0b0" d="m2826.4 3547.5-3.6799 3.0967c88.615 25.632 169.48 69.505 238.29 127.26-2.3013-2.7467-4.6238-5.4722-6.9781-8.1871-1.6226-1.8665-3.2558-3.7224-4.8995-5.5782 2.3118 2.6618 4.6025 5.3449 6.8614 8.0492-66.557-55.846-144.4-98.701-229.6-124.64m-836.19 701.8-3.9239 3.2875c0.8803 7.2857 1.8771 14.529 2.9907 21.73l4.1253 0.2651c-1.2196-8.3886-2.2907-16.809-3.1921-25.282"/><path fill="#9e9e9e" d="m2011.6 4244.2c19.333 118.3 70.428 225.93 144.2 313.89-24.667-20.68-47.776-43.141-69.155-67.204 1.6756 1.9407 3.383 3.8708 5.0798 5.7903 21.358 24.031 44.446 46.471 69.092 67.14-74.935-89.305-126.49-198.9-145.13-319.37l-4.083-0.2439"/><path fill="#b0b0b0" d="m2830.2 3544.6-3.5739 2.9907c85.201 25.94 163.04 68.795 229.6 124.64-2.2589-2.7043-4.5495-5.3874-6.8614-8.0492-1.7817-2.068-3.5845-4.1149-5.398-6.1615 2.4392 2.8103 4.8465 5.6418 7.2327 8.4946-64.319-53.948-139.16-95.774-221-121.92m-843.69 708.07-3.8178 3.2029c0.8272 6.1297 1.7286 12.206 2.7255 18.283l4.0829 0.2439c-1.1135-7.2008-2.1104-14.444-2.9906-21.73"/><path fill="#9f9f9f" d="m2007.9 4244c19.98 116.16 70.608 221.81 143.23 308.43-24.614-20.637-47.701-43.056-69.039-67.045 1.612 1.8559 3.2558 3.7224 4.8889 5.5571 21.38 24.063 44.488 46.524 69.155 67.204-73.768-87.958-124.86-195.59-144.2-313.89l-4.0405-0.2546"/><path fill="#b0b0b0" d="m2834 3541.7-3.4572 2.9058c81.839 26.141 156.68 67.967 221 121.92-2.3862-2.8528-4.7935-5.6843-7.2327-8.4946-1.6437-1.8877-3.2981-3.7754-4.9631-5.6525 2.4179 2.7891 4.8041 5.5995 7.1796 8.431-62.092-52.06-133.99-92.836-212.52-119.1m-850.97 714.18-3.7012 3.1073c0.7424 4.9844 1.5378 9.9687 2.3862 14.921l4.0405 0.2546c-0.9969-6.0767-1.8983-12.153-2.7255-18.283"/><path fill="#a1a1a1" d="m2004.2 4244c20.595 113.99 70.746 217.69 142.2 302.94-24.752-20.743-47.934-43.268-69.367-67.395 1.771 2.0361 3.5421 4.0511 5.3343 6.0767 21.337 23.988 44.424 46.407 69.039 67.045-72.623-86.611-123.25-192.27-143.23-308.43l-3.9769-0.2439"/><path fill="#b1b1b1" d="m2837.5 3539-3.3512 2.8103c78.53 26.269 150.43 67.045 212.52 119.1-2.3755-2.8316-4.7616-5.6419-7.1796-8.431-1.6331-1.8877-3.2769-3.7542-4.9419-5.6207 2.3967 2.7573 4.7617 5.5357 7.1054 8.3356-59.886-50.194-128.88-89.888-204.16-116.2m-858.02 720.1-3.5951 3.0119c0.6363 3.8919 1.3044 7.7947 2.0043 11.665l3.9769 0.2439c-0.8484-4.9525-1.6438-9.9368-2.3861-14.921"/><path fill="#a1a1a1" d="m2000.4 4244c21.178 111.82 70.852 213.57 141.13 297.45-24.699-20.69-47.85-43.162-69.251-67.236 1.6226 1.8665 3.2557 3.7224 4.8995 5.5782 21.433 24.126 44.615 46.651 69.367 67.395-71.456-85.254-121.61-188.95-142.2-302.94l-3.9451-0.2439"/><path fill="#b3b3b3" d="m2841 3536.4-3.2451 2.7254c75.274 26.311 144.27 66.006 204.16 116.2-2.3437-2.7998-4.7087-5.5783-7.1054-8.3357-1.7816-2.0678-3.5739-4.1041-5.3873-6.1402 2.5134 2.8845 5.0055 5.8116 7.4659 8.7492-57.691-48.327-123.82-86.919-195.88-113.2m-864.86 725.84-3.4891 2.9376c0.4985 2.8315 1.0075 5.6631 1.5484 8.484l3.945 0.2439c-0.6999-3.8708-1.368-7.7735-2.0043-11.666"/><path fill="#a2a2a2" d="m1996.9 4243.9c21.73 109.67 70.905 209.46 140.02 291.97-24.805-20.765-48.041-43.343-69.526-67.522 1.7498 2.0149 3.5103 4.0193 5.2813 6.013 21.401 24.073 44.552 46.545 69.251 67.236-70.279-83.875-119.95-185.63-141.13-297.45l-3.892-0.2439"/><path fill="#b4b4b4" d="m2844.5 3533.8-3.1391 2.63c72.061 26.279 138.19 64.871 195.88 113.2-2.4604-2.9376-4.9526-5.8646-7.4659-8.7491-1.7287-2.0044-3.4785-3.9875-5.2283-5.96 2.5876 2.98 5.1434 5.9812 7.678 9.0036-55.507-46.492-118.83-83.96-187.73-110.12m-871.49 731.41-3.3936 2.8422c0.3394 1.8028 0.6893 3.5951 1.0499 5.3979l3.892 0.2439c-0.5408-2.8209-1.0498-5.6524-1.5483-8.484"/><path fill="#a3a3a3" d="m1993.3 4243.8c22.249 107.51 70.905 205.36 138.85 286.48-24.784-20.733-47.998-43.279-69.452-67.416 1.633 1.8877 3.2769 3.7542 4.9313 5.6206 21.486 24.179 44.721 46.758 69.526 67.522-69.113-82.507-118.29-182.3-140.02-291.97l-3.839-0.2439"/><path fill="#b5b5b5" d="m2847.7 3531.3-3.0543 2.5663c68.901 26.163 132.22 63.63 187.73 110.12-2.5346-3.0224-5.0904-6.0236-7.678-9.0036-1.5483-1.7817-3.0967-3.5421-4.6556-5.3025 2.4604 2.8421 4.8995 5.7055 7.3175 8.59-53.343-44.658-113.89-80.99-179.66-106.97m-877.94 736.81-3.2875 2.7573c0.1697 0.806 0.3287 1.6013 0.4984 2.3967l3.839 0.2439c-0.3605-1.8028-0.7105-3.5951-1.0499-5.3979"/><path fill="#a4a4a4" d="m1990.4 4243.8 9.6188 41.073c25.452 89.199 69.378 170.62 127.34 239.89-24.816-20.775-48.072-43.343-69.558-67.533 1.6968 1.962 3.3936 3.9027 5.1222 5.8328 21.454 24.137 44.668 46.683 69.452 67.416-67.946-81.128-116.6-178.97-138.85-286.48l-3.1285-0.1909"/><path fill="#b7b7b7" d="m2850.9 3529-2.9376 2.4709c65.772 25.982 126.32 62.315 179.66 106.97-2.4179-2.8845-4.8571-5.748-7.3174-8.5901-1.7817-2.0573-3.5739-4.0935-5.3768-6.119 2.5876 2.9694 5.1434 5.9811 7.6674 8.9931-51.169-42.834-108.99-78.01-171.69-103.73m-884.16 742.04-2.63 2.2058 3.1285 0.191c-0.1697-0.7954-0.3288-1.5908-0.4985-2.3968"/><path fill="#a5a5a5" d="m1999.9 4283.9 8.3355 35.601c26.247 73.09 65.136 140.15 114 198.56-24.848-20.786-48.126-43.385-69.643-67.586 1.6862 1.9301 3.383 3.8708 5.0904 5.7797 21.486 24.19 44.742 46.758 69.558 67.533-57.967-69.261-101.89-150.69-127.34-239.89"/><path fill="#a6a6a6" d="m2008 4318.5 4.4117 18.824c25.77 63.588 61.244 122.19 104.59 174.01-24.869-20.807-48.189-43.428-69.717-67.649 1.6862 1.9406 3.3724 3.8707 5.0798 5.7902 21.518 24.201 44.796 46.8 69.643 67.586-48.868-58.412-87.756-125.47-114-198.56"/><path fill="#a6a6a6" d="m2012.5 4337 3.1285 13.405c24.911 56.228 57.5 108.3 96.452 154.88-24.943-20.86-48.306-43.534-69.898-67.819 1.7181 1.9726 3.4467 3.9345 5.1859 5.8964 21.528 24.222 44.848 46.842 69.717 67.649-43.343-51.816-78.816-110.42-104.59-174.01"/><path fill="#a7a7a7" d="m2015.6 4350.2 2.4498 10.435c23.819 50.066 53.81 96.622 88.986 138.71-24.932-20.849-48.306-43.512-69.887-67.798 1.665 1.9089 3.3194 3.8072 5.0055 5.7055 21.592 24.286 44.955 46.959 69.898 67.819-38.952-46.577-71.541-98.648-96.452-154.88"/><path fill="#a8a8a8" d="m2018.3 4360.5 1.983 8.4628c22.599 44.7 50.172 86.441 81.998 124.52-24.328-20.319-47.16-42.388-68.296-65.995l0.011 0.064c1.1241 1.2832 2.2694 2.577 3.4042 3.8602 21.581 24.286 44.955 46.948 69.887 67.798-35.177-42.091-65.168-88.647-88.986-138.71"/><path fill="#a9a9a9" d="m2020.3 4368.9 1.6437 7.0312c21.284 39.896 46.577 77.332 75.349 111.77-22.44-18.739-43.608-38.963-63.354-60.502l0.064 0.2333c21.136 23.607 43.968 45.676 68.296 65.995-31.826-38.083-59.399-79.824-81.998-124.52"/><path fill="#a9a9a9" d="m2022.1 4375.9 1.3892 5.9388c19.895 35.537 43.014 69.049 68.954 100.1-20.595-17.191-40.108-35.622-58.444-55.188l0.096 0.4136c19.747 21.539 40.914 41.762 63.354 60.502-28.771-34.434-54.064-71.87-75.348-111.77"/><path fill="#aaa" d="m2023.5 4381.8 1.1878 5.0585c18.442 31.55 39.461 61.414 62.75 89.315-18.771-15.664-36.651-32.377-53.555-50.013l0.1273 0.5514c18.336 19.566 37.849 37.998 58.444 55.188-25.94-31.051-49.059-64.563-68.954-100.1"/><path fill="#ababab" d="m2024.8 4387 1.0073 4.3375c16.957 27.849 35.94 54.34 56.737 79.251-16.989-14.179-33.247-29.196-48.719-44.997l0.1697 0.7106c16.904 17.636 34.784 34.35 53.555 50.013-23.288-27.902-44.308-57.766-62.75-89.315"/><path fill="#dfdfdf" d="m2550.4 8604.3 943.84-3520.9 445.41 3520.9h-1389.3"/><path fill="#f1f1f1" d="m3725 7265.6 640.97-382.42-912.03-1760.4 271.07 2142.8"/><path fill="#eee" d="m3891.7 8554.1 466.62-1760.4-640.96 382.37 174.35 1378"/><path fill="#e8e8e8" d="m4889 8554.1-551.46-1760.4-466.62 1760.4h1018.1"/><path fill="#e8e8e8" d="m3447.9 5151.3 1124.1 402.99-532.58 738.84-591.55-1141.8"/><path fill="#cecece" d="m4343.1 6882.6 212.1-1357.4-532.58 738.84 320.48 618.6"/><path fill="#f9f9f9" d="m4852.7 8554.1 806-625.7-1357.4-1134.7 551.4 1760.4"/><path fill="#eee" d="m4513.4 5525.2 1145.3 1145.3-1357.4 212.1 212.1-1357.4"/><path fill="#eee" d="m5658.7 7952.3v-1346.8l-1357.4 212.1 1357.4 1134.7"/><path fill="#f4f4f4" d="m6467.2 8521.7-848.4-625.7-805.98 625.7h1654.4"/><path fill="#e8e8e8" d="m6062 7739.7 1367 786.68h-1028.7l-338.35-786.68"/><path fill="#dfdfdf" d="m5605.5 6605.5 510.05 1185.9-510.05 160.98v-1346.8"/><path fill="#d8d8d8" d="m6444.2 8526.3-848.4-625.7 510.05-160.98 338.35 786.68"/><path fill="#d2d2d2" d="m2589.8 8560.2-477.2-1972.6 961.5 165.9-484.3 1806.7"/><path fill="#f4f4f4" d="m3520.5 5135-1421.1 1548.3 961.53 165.89 459.51-1714.2"/><path fill="#e8e8e8" d="m2621.5 8560.2h-1102.9l625.7-1972.5 477.22 1972.5"/><path fill="#e8e8e8" d="m3520.5 5171.2-1421-328.8 710.5 1103 710.5-774.2"/><path fill="#f3f3f3" d="m2190.5 6615.8-1771-106.05 1424.6 1198.4 346.49-1092.3"/><path fill="#d2d2d2" d="m1574.7 8563.2-1145.3-2078.6 1424.5 1198.4-279.2 880.2"/><path fill="#cecece" d="m2119.7 6697.4v-1877.1l710.54 1102.9-710.54 774.16"/><path fill="#ebebeb" d="m419.48 6591.4 1771-1771v1877.1l-1771-106.05"/><path fill="#f3f3f3" d="m1596.9 8535.3h-1643.8l1036.3-1102.4 607.43 1102.4"/><path fill="#e8e8e8" d="m468.87 6484.6-498.43 2078.6 1036.4-1102.4-537.93-976.2"/><path fill="#e2e2e2" d="m2088.3 4896.3 1813.5-1113.5-392.38 1442.3-1421.1-328.76"/><path fill="#e8e8e8" d="m4558.8 5592.6 466.62-1007.5-1590.8 604.48 1124.1 402.99"/><path fill="#eee" d="m3827 3782.8 1198.4 837.8-1590.8 604.4 392.4-1442.2"/><path fill="#d2d2d2" d="m484.22 6533-498.44-1696.8v3775.4l498.44-2078.6"/><path fill="#dfdfdf" d="m2173.8 4844.9-975.6-169.7-210.23 1355.6 1185.8-1185.9"/><path fill="#e8e8e8" d="m5011.8 4661.1 84.84-1654.4-1283.2 816.58 1198.4 837.8"/><path fill="#f3f3f3" d="m5580.7 6610.1 1378.6 212.1-868.6 973.75-510.1-1185.9"/><path fill="#f1f1f1" d="m4503.7 5531.2h1272.6l-127.3 1145.4-1145.3-1145.4"/><path fill="#e8e8e8" d="m6952.7 6872 233.31-986.26-1612 774.16 1378.6 212.1"/><path fill="#dbdbdb" d="m7429 8554.1-498.44-1760.4-868.55 973.75 1367 786.68"/><path fill="#f1f1f1" d="m7105.4 5885.8 1446.4 540.86-1679.7 445.41 233.31-986.26"/><path fill="#f1f1f1" d="m8551.8 8554.1-1679.7-1760.4 498.44 1760.4h1181.3"/><path fill="#e6e6e6" d="m5701.3 5514.3 1484.7 376.7-1612 785.6 127.3-1162.3"/><path fill="#e6e6e6" d="m8551.8 7269.6-1865.9-585.9 1865.9 1870.4v-1284.5"/><path fill="#f4f4f4" d="m7136.7 5877.4 273.3-2108.5-1803.7 1732 1530.4 376.5"/><g fill="#fbfbfb" transform="matrix(1.0965 0 0 1.0801 -600.01 -574.02)"><path d="m8503.9 7363.9v-940l-1583.9 420 1583.9 520"/><path d="m4980 4613.9 580-550-500-1010-80 1560"/><path d="m7390 3953.9h-825l-185 980 1010-980"/></g><path fill="#fff" d="m7098.7 5911.5 1446.4-456.02v996.87l-1446.4-540.86"/><path fill="#e8e8e8" d="m5763 5609.3-235-1810.8-757.2 663.9 992.2 1146.9"/><path fill="#fbfbfb" d="m6527 3975.1 1333-874.02-458.08 874.02h-874.91"/><path fill="#fbfbfb" d="m8545.2 5484.5-1327.3-478.3-119.2 934.4 1446.5-456.1"/><path fill="#e8e8e8" d="m7360.5 3907.6 1181.3 1622.6-1327.3-478.3 146-1144.3"/><path fill="#fbfbfb" d="m6595.4 3905.2-1065.8 116.66 190.89 1590.8 874.91-1707.4"/><path fill="#eee" d="m6393.8 4944.5-678.72 668.12 874.91-1707.4-196.19 1039.3"/><path fill="#d2d2d2" d="m1240 4721.5-1293.8-1177.1 1083.6 2532.6 210.2-1355.5"/><g fill="#e7e7e7" transform="matrix(1.0605 0 0 1.0605 -64.735 -306.97)"><path d="m2140 4873.9-145.6-621.95-774.4 461.95 920 160"/><path d="m470 6543.9 140-1511 411.8 959.2-551.8 551.8"/><path d="m0 3664.8v1279.1l610 89-610-1429v60.92"/></g><path fill="#cacaca" d="m3078.5 4302.3-1116-69.145 154.41 659.52 961.56-590.38"/><path fill="#f3f3f3" d="m-18.452 4895.5 498.43 1696.8 148.47-1602.4-646.9-94.4"/><path fill="#e8e8e8" d="m1197.3 4747.5 821.25-489.9-845.92-687.26 24.667 1177.2"/><path fill="#e2e2e2" d="m3076.7 4347.4 64.266-1059.7-1180.2 990.5 1116 69.166"/><path fill="#f3f3f3" d="m5096.6 3030.6-1084 177.42-199.16 639.16 1283.2-816.58"/><path fill="#fff" d="m3165.1 3289.7-2026.2 303.2 845.96 687.31 1180.2-990.51"/><path fill="#f3f3f3" d="m3022.4 4347.4 851.9-523.14-787.65-536.55-64.266 1059.7"/><path fill="#e6e6e6" d="m4006.9 3245.6 408.06-1090.7 972.22 864.02-1380.3 226.67"/><path fill="#f3f3f3" d="m1232.2 3570.3h-1269.1l1293.8 1177.2-24.667-1177.2"/><path fill="#e6e6e6" d="m-36.2 3633.7 759.85-1045.2 509.25 1045.2h-1269.1"/><path fill="#ebebeb" d="m4065.9 3203-986.82 102.65 787.65 536.55 199.16-639.2"/><g fill="#f4f4f4" transform="matrix(1.0956 0 0 1.0956 -275.85 -325.97)"><path d="m4340 2416.2 589.2-409 130.8 1046.7-720-637.7"/><path d="m3107.3 3318-1201.1-1124.2 347.03 1252 854.1-127.82"/><path d="m1196.7 3603.9-480.2-985.6 1536.7 827.5-1056.5 158.1"/></g><path fill="#d8d8d8" d="m2270.1 3567.1-381.4-1376.1-1307.6 466.6 1689 909.5"/><path fill="#f4f4f4" d="m-21.674 3647.8v-1540.4l759.85 495.15-759.85 1045.2"/><path fill="#cecece" d="m3070 3345.3 1307.3-956.36-320.48 853.68-986.82 102.65"/><path fill="#eee" d="m4993.5 2012.3-814.47-191.93 155.38 655.61 659.09-463.68"/><path fill="#fcfcfc" d="m3087.6 3343 98.945-877.42 592.69 371.46-691.64 505.95"/><path fill="#cecece" d="m4371.7 2433.7-1112.7-433.74 965.37-179.54 147.3 613.29"/><path fill="#eee" d="m3201.7 2487.2-1372.7-314.8 1273.7 1192.3 99-877.5"/><path fill="#e2e2e2" d="m3756.1 2866.1-497.06-884.14 1112.7 433.74-615.62 450.39"/><path fill="#fff" d="m3183.7 2494.6 95.625-512.7 497.07 884.16-592.69-371.46"/><path fill="#e2e2e2" d="m1864.3 2190.5 1468.4-197.9-95.625 512.7-1372.7-314.8"/><path fill="#dbdbdb" d="m738.17 2650.9-20.64-1141.9-739.2 646.7 759.84 495.2"/><path fill="#f4f4f4" d="m1942.8 2200.7-1282.4-691.7 20.7 1141.9 1261.7-450.2"/><path fill="#dfdfdf" d="m1940.7 2260.2 72.3-2326.6-1354.6 1634.9 1282.3 691.7"/><path fill="#d3d3d3" d="m3332.7 2024.1-1437.6-791.02-30.744 988.92 1468.4-197.9"/><path fill="#ebebeb" d="m4228.6 1851.9-468.39-669.65-497.07 849.17 965.46-179.52"/><path fill="#cecece" d="m4947.3 2034.1 138.67-943.87-910.83 764.34 772.16 179.52"/><path fill="#fff" d="m3741.9 1202.5 615.7-532.06-147.3 1201.8-468.4-669.7"/><path fill="#e6e6e6" d="m5086 1107.8-763.56-437.33-147.3 1201.8 910.86-764.41"/><path fill="#f4f4f4" d="m3783.8 1196.2-851.6-491.48 354.5 1340.7 497.1-849.2"/><path fill="#dfdfdf" d="m1894.1 1254.4 1083.2-549.66 354.5 1340.7-1437.7-791"/><path fill="#ebebeb" d="m3783.8 1242.9-38.1-1279.4-813.5 787.94 851.5 491.46"/><path fill="#d8d8d8" d="m4358.6 710.86-653.69-747.36 38.072 1279.4 615.62-532.03"/><path fill="#b7b7b7" d="m2987.4 749.78-293.1-787.93-790.1 1337.6 1083.2-549.62"/><path fill="#a9a9a9" d="m1954.2-38.154h748.39l-790.07 1337.6 41.678-1337.6"/><path fill="#cecece" d="m2961.1 765.46 130.76-787.93h-423.88l293.12 787.93"/><path fill="#e2e2e2" d="m3746.8-22.475h-682.75l-130.76 787.93 813.51-787.93"/><path fill="#f3f3f3" d="m658.39 1588.2 20.65-1144.5 1334-490.33-1354.6 1634.8"/><path fill="#cecece" d="m-21.085 2181.8v-1065.3l739.2 418.58-739.2 646.69"/><path fill="#cecece" d="m738.17 443.71-759.84-490.34 739.2 1634.8 20.64-1144.5"/><path fill="#b1b1b1" d="m-21.085 1169.7 739.2 418.5-739.2-1634.8v1216.3"/><path fill="#e8e8e8" d="m700.12 476.36 1334-490.34h-2093.9l759.85 490.34"/><path fill="#f3f3f3" d="m7814.4 3186.4 723.21 2364.9-1181.3-1622.6 458.08-742.35"/><path fill="#f3f3f3" d="m6527.9 3980.1-31.391-916.8 1364.4 174.45-1333 742.35"/><path fill="#d2d2d2" d="m8524.5 5551.4v-1938.8l-723.21-426.08 723.21 2364.9"/><path fill="#e8e8e8" d="m6595.4 3976.7-1065.8 116.66 1034.4-1033.4 31.37 916.75"/><path fill="#f3f3f3" d="m7801.4 3262.8 723.21-738.37v1164.4l-723.21-426.08"/><path fill="#f3f3f3" d="m5015.4 3023.3 1564.7 37.648-1034.4 1033.5-530.25-1071.1"/><path fill="#e8e8e8" d="m7811.5 3284.7 723.1-738.4-1077.2-340.8 354.1 1079.2"/><path fill="#dfdfdf" d="m6496.5 3110.2 1010.3-904.7 354.1 1079.2-1364.4-174.5"/><path fill="#cbcbcb" d="m5035.2 3085.3-145.1-1119.6 1052.7 1140-853.7-17.3"/><path fill="#cbcbcb" d="m6555.8 3110.2-316.45-730.26-397.59 713.14 714.07 17.201"/><path fill="#d3d3d3" d="m7525.9 2210.5-1326.8 174.45 316.47 730.35 1010.3-904.81"/><path fill="#d2d2d2" d="m4893.8 1988.4 1240.9-472.03-251.55 1602.5-989.34-1130.5"/><path fill="#e8e8e8" d="m6248.3 2405.8-146.03-889.44-251.55 1602.5 397.58-713.08"/><path fill="#f3f3f3" d="m7530.1 2251.7-1472.8-714.99 146.03 889.44 1326.8-174.45"/><path fill="#a6a6a6" d="m5032.5 1090.2 1102.2 471.92-1240.9 472.03 138.71-943.95"/><path fill="#d6d6d6" d="m4318.2 713.56 721.6-747.35 42 1184.7-763.6-437.34"/><path fill="#d8d8d8" d="m7457.4 2251.9 1077.3-888.5v1229.3l-1077.3-340.83"/><path fill="#d2d2d2" d="m6057.3 1566.3 1144.7-863.27 328.1 1578.3-1472.8-714.9"/><path fill="#bdbdbd" d="m8544 1392.7-1405.4-689.67 328.1 1578.3 1077.3-888.5"/><path fill="#909090" d="m6130.7 1585-52.7-802.45-1049.4 330.55 1102.1 471.9"/><path fill="#b1b1b1" d="m7159.2 761.13v-793.31l682.3 1128.2-682.3-334.87"/><path fill="#bcbcbc" d="m6015.4 784.29 1197.5-60.87-1144.7 863.28-52.8-802.41"/><path fill="#b1b1b1" d="m7801.4 1067.6 723.21-488.4v843.34l-723.21-354.94"/><path fill="#d8d8d8" d="m8524.5-32.18-723.16 1128.2 723.16-488.45v-639.71"/><path fill="#cbcbcb" d="m7159.2-32.18h616.15l66 1128.2-682.2-1128.2"/><path fill="#f1f1f1" d="m7212.9 768.94-1197.4 60.862 1197.4-854.17v793.31"/><path fill="#ebebeb" d="m8526.4-32.18h-789.22l66.1 1128.2 723.1-1128.2"/><path fill="#c7c7c7" d="m7212.9-24.365h-1059.5l-137.86 854.17 1197.4-854.17"/><path fill="#cbcbcb" d="m5031.3 1150.9 1049.4-330.52-1091.4-854.17 42 1184.7"/><path fill="#b1b1b1" d="m4338.1 726.04 721.56-747.36h-1375.3l653.69 747.36"/><path fill="#cecece" d="m6076.8 829.8 137.86-854.17h-1229.3l1091.5 854.17"/><path fill="#f3f3f3" d="m3034.7 6748.8 904.92 1806.7h-1389.3l484.31-1806.7"/><path fill="#bcbcbc" d="m1789.8 7680 823.71 880.22-477.22-1972.5-346.49 1092.3"/><path fill="#d2d2d2" d="m4503.7 5592.6 466.62-1007.5 805.98 1007.5h-1272.6"/></g></g></svg>\n', spiral: '<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n<svg xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns="http://www.w3.org/2000/svg" xml:space="preserve" height="300" width="600" version="1.1" y="0px" x="0px" xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" viewBox="0 0 600.00201 300.00201"><g transform="translate(0 -760)"><path d="m8.044 760h23.405c-5.595 20.326-6.945 41.676-5.129 62.633 1.631 18.686 5.754 37.115 11.761 54.871 8.68 25.664 21.261 49.922 36.487 72.297 16.711 24.506 36.639 46.768 58.823 66.438 18.554 16.465 38.729 31.08 60.046 43.762h-43.861c-1.533-1.209-3.141-2.322-4.7-3.496-34.2-25.6-64.55-56.55-88.732-91.83-14.224-20.78-26.297-43.08-35.441-66.55-6.078-15.62-10.857-31.77-14.002-48.23-3.381-17.73-4.877-35.84-3.969-53.87 0.643-12.13 2.294-24.24 5.308-36.02z"/><path d="m53.179 760h19.624c-4.164 11.99-6.356 24.625-6.911 37.293-0.801 18.248 1.712 36.547 6.519 54.139 7.316 26.66 19.808 51.729 35.449 74.459 16.72 24.273 37.095 45.951 59.822 64.684 35.133 28.938 75.949 50.869 119.32 64.613 5.451 1.742 10.961 3.287 16.476 4.813h-61.321c-4.387-2-8.766-4.016-13.082-6.162-27.079-13.342-52.566-29.932-75.648-49.391-22.2-18.725-42.18-40.137-58.92-63.891-16.115-22.9-29.24-48.03-37.739-74.75-5.424-17.09-8.922-34.84-9.789-52.77-0.857-17.85 0.92-35.92 6.197-53.04z"/><path d="m91.284 760h16.913c-3.629 7.537-6.034 15.633-7.506 23.855-3.107 17.588-1.738 35.732 2.368 53.039 3.776 15.813 9.858 31.027 17.501 45.359 8.898 16.674 19.916 32.182 32.376 46.379 18.86 21.469 41.016 39.961 65.159 55.211 25.877 16.328 54.076 28.949 83.459 37.479 47.133 13.746 97.401 16.803 145.8 8.43 31.813-5.459 62.768-15.832 91.508-30.518 21.761-11.098 42.271-24.629 61.136-40.139v20.768c-11.164 8.805-22.867 16.93-35.025 24.303-26.742 16.236-55.762 28.742-85.988 36.848-38.33 10.328-78.539 13.537-118.04 9.65-56.408-5.48-111.36-25.262-158.33-56.98-23.316-15.76-44.681-34.477-63.003-55.855-13.08-15.28-24.6-31.92-33.87-49.78-7.121-13.72-12.915-28.16-16.866-43.12-4.741-17.97-6.838-36.78-4.851-55.31 1.104-10.13 3.418-20.16 7.241-29.62z"/><path d="m124.5 760h15.393c-4.646 6.238-7.958 13.42-10.082 20.887-2.451 8.545-3.324 17.49-3.08 26.359 0.504 16.188 4.713 32.088 11.011 46.947 7.923 18.594 19.142 35.67 32.262 51 18.65 21.729 41.161 40.01 65.741 54.637 26.951 16.023 56.467 27.676 87.033 34.625 27.527 6.26 55.923 8.709 84.111 7.174 35.074-1.861 69.798-9.924 102.15-23.586 28.015-11.795 54.23-27.736 77.871-46.818 4.449-3.605 8.854-7.277 13.096-11.127v18.865c-7.279 6.25-14.834 12.182-22.615 17.793-24.793 17.906-52.063 32.426-80.887 42.676-34.379 12.271-70.936 18.422-107.44 18.049-58.609-0.486-117.03-17.656-166.42-49.242-24.371-15.598-46.581-34.719-64.977-57.094-13.337-16.258-24.673-34.27-32.672-53.752-6.298-15.41-10.513-31.793-11.257-48.469-0.396-9.32 0.292-18.721 2.465-27.807 1.757-7.379 4.477-14.556 8.3-21.117z"/><path d="m155.76 760h17.402c-5.965 3.383-11.117 8.188-14.832 13.955-4.291 6.557-6.783 14.17-7.851 21.898-1.303 9.492-0.522 19.172 1.508 28.506 2.692 12.16 7.513 23.781 13.586 34.627 7.849 13.969 17.767 26.721 28.95 38.172 10.2 10.473 21.475 19.877 33.463 28.232 25.283 17.592 53.717 30.521 83.41 38.621 29.969 8.174 61.27 11.406 92.279 9.588 20.399-1.182 40.67-4.535 60.369-9.967 29.84-8.205 58.328-21.172 84.31-37.967 18.517-11.928 35.769-25.783 51.642-41.045v17.182c-1.729 1.5-3.376 3.088-5.098 4.594-11.07 9.879-22.77 19.059-35.029 27.414-25.769 17.57-54.114 31.422-83.955 40.549-17.269 5.297-35.02 9.029-52.965 11.104-25.025 2.902-50.423 2.594-75.368-0.92-32.357-4.557-63.981-14.473-93.031-29.459-25.078-12.955-48.302-29.688-67.888-50.061-11.129-11.615-21.076-24.412-29.127-38.354-7.25-12.578-12.992-26.113-16.142-40.314-1.651-7.496-2.574-15.174-2.446-22.855 0.11-8.738 1.615-17.52 4.93-25.631 2.711-6.672 6.73-12.824 11.883-17.869z"/><path d="m222.85 760h14.422c11.867 7.58 22.305 17.295 31.051 28.311 12.351 15.541 21.429 33.604 26.956 52.65 3.878-0.6 7.726-1.385 11.585-2.096 16.594-3.135 33.064-6.977 49.22-11.904 27.88-8.441 54.792-19.949 80.413-33.783 18.536-9.994 36.426-21.166 53.721-33.178h6.205c-6.039 4.348-12.205 8.518-18.422 12.609-16.358 10.713-33.287 20.578-50.811 29.268-26.848 13.342-55.138 23.867-84.332 30.748-17.502 4.191-35.313 6.955-53.166 9.129-6.096-20.553-16.522-39.941-31.05-55.771-10.04-10.91-22.1-20.16-35.79-25.98z"/><path d="m249.48 760h10.727c19.922 18.412 34.844 41.977 43.92 67.486 1.16 3.352 2.33 6.709 3.227 10.143-0.422 0.139-0.834 0.287-1.262 0.396 0.07 0.109 1.012-0.057 1.09 0.055-1.656 0.418-4.168 1.074-5.834 1.398-4.899-16.947-12.445-33.145-22.441-47.689-8.2-11.95-18.09-22.76-29.43-31.79z"/><path d="m271.02 760h10.275c4.43 5.236 8.657 10.645 12.53 16.305 8.832 12.838 16.116 26.73 21.7 41.273 1.88 4.838 3.495 9.773 5.035 14.73-1.456 0.588-2.888 1.234-4.338 1.842-0.467 0.207-0.975 0.367-1.333 0.742 1.571-0.375 3.031-1.104 4.558-1.625 14.621-5.557 29.159-11.346 43.469-17.666 25.363-11.168 50.01-23.949 73.857-38.064 9.561-5.65 19.003-11.504 28.326-17.537h5.836c-2.977 2.021-6.031 3.928-9.061 5.871-9.068 5.756-18.254 11.33-27.576 16.67-24.395 14.01-49.725 26.408-75.855 36.838-14.772 5.938-29.811 11.193-44.916 16.205 0.157-0.127 0.319-0.248 0.49-0.365-0.815-2.459-1.514-4.957-2.371-7.402-8.5-25.16-22.3-48.58-40.64-67.82z"/><path d="m291.92 760h10.442c13.601 18.805 24.213 39.758 31.418 61.814 0.212 0.664 0.4 1.338 0.683 1.977 24.247-16.365 48.495-32.732 72.909-48.852 7.54-5.004 15.107-9.965 22.668-14.939h5.268c-3.87 2.553-7.796 5.021-11.688 7.545-23.859 15.322-47.821 30.482-71.865 45.514-6.049 3.764-12.061 7.584-18.142 11.289-1.379 0.963-1.679 1.109-3.024 2.115-0.385 0.451-0.603 0.602-0.805 0.797-0.775 0.352-1.537 0.73-2.283 1.131-3.166-10.463-7.197-20.662-11.948-30.506-6.517-13.412-14.394-26.18-23.633-37.885z"/><path d="m313.36 760h10.908c10.008 16.096 18.222 33.297 24.471 51.186-0.605 0.533-1.143 1.133-1.51 1.852-1.867 1.6-3.682 3.264-5.596 4.805-6.805-20.421-16.299-39.95-28.273-57.843z"/><path d="m335.77 760h11.559c5.569 10.205 10.531 20.744 14.846 31.539 0.242 0.645 0.484 1.291 0.805 1.902 1.861-2.557 3.578-5.221 5.403-7.807 6.001-8.717 12.151-17.34 18.729-25.635h2.604c-8.578 9.729-16.544 19.973-24.305 30.361-2.227 2.982-4.494 5.934-6.648 8.969 0.144-0.018 0.426-0.057 0.569-0.076-1.174 1.182-2.206 2.488-3.299 3.738-5.52-14.87-12.23-29.3-20.26-42.99z"/><path d="m359.56 760h12.258c1.229 2.375 2.303 4.824 3.441 7.242 0.123 0.367 0.441 0.746 0.266 1.146-0.372 0.986-0.764 1.967-1.184 2.934-0.431 0.971-1.014 1.951-1.021 3.041-1.188 2.418-2.436 4.809-3.656 7.213-0.806-1.59-1.406-3.273-2.157-4.891-2.483-5.638-5.151-11.195-7.947-16.685z"/><path d="m382.71 760h1.788c-5.004 7.111-9.738 14.412-14.365 21.775-0.689 1.049-1.298 2.154-2.063 3.152 4.792-8.357 9.484-16.784 14.64-24.927z"/><path d="m393.14 760h3.347c-11.86 11.121-22.919 23.061-33.653 35.262-1.176 1.238-2.174 2.65-3.457 3.783 0.596-0.973 1.406-1.793 2.101-2.693 10.09-12.5 20.42-24.84 31.66-36.35z"/><path d="m400.64 760h4.051c-15.662 12.564-30.421 26.207-44.785 40.225-2.477 2.395-4.913 4.832-7.428 7.186 5.922-6.32 11.896-12.594 17.943-18.795 9.701-9.923 19.732-19.526 30.219-28.616z"/><path d="m409.45 760h4.609c-21.662 15.568-42.402 32.379-62.732 49.641-1.189 0.945-2.27 2.029-3.523 2.891 0.912-0.973 1.965-1.803 2.924-2.73 7.884-7.189 15.794-14.35 23.854-21.342 11.308-9.862 22.937-19.358 34.868-28.46z"/><path d="m419.36 760h5.021c-1.049 0.645-2.042 1.375-3.076 2.047-23.703 15.963-47.039 32.471-70.128 49.309-2.897 2.057-5.706 4.244-8.647 6.236 0.699-0.766 1.601-1.307 2.387-1.977 13.229-10.434 26.525-20.783 40.035-30.852 11.324-8.45 22.795-16.708 34.408-24.763z"/><path d="m441.3 760h5.586c-11.229 7.084-22.497 14.104-33.894 20.918-25.433 15.285-51.409 29.654-77.69 43.428-1.607 0.809-3.15 1.766-4.814 2.447 0.611-0.523 1.359-0.84 2.042-1.258 13.332-7.637 26.636-15.324 39.86-23.145 23.213-13.728 46.2-27.847 68.91-42.39z"/><path d="m452.98 760h5.747c-27.205 17.443-55.288 33.545-84.289 47.814-14.398 7.123-29.033 13.766-43.772 20.148-3.157 1.342-6.28 2.766-9.465 4.035 0.185-0.109 0.378-0.215 0.579-0.309 13.995-6.611 27.93-13.346 41.719-20.375 25.691-13.072 50.813-27.26 75.332-42.412 4.732-2.94 9.489-5.85 14.149-8.901z"/><path d="m477.48 760h6.016c-6.941 4.779-14.029 9.344-21.172 13.814-9.189 5.719-18.526 11.205-28.027 16.396-24.656 13.496-50.429 24.994-77.092 33.924-16.052 5.396-32.411 9.852-48.898 13.711-0.6 0.148-1.201 0.326-1.822 0.303 13.918-3.906 27.793-8.016 41.455-12.752 27.252-9.361 53.674-21.098 78.998-34.836 17.32-9.374 34.16-19.63 50.542-30.56z"/><path d="m503.31 760h6.422c-9.396 7.109-19.055 13.867-28.918 20.313-16.666 10.857-34.006 20.705-52.014 29.166-26.545 12.5-54.587 21.941-83.451 27.326-17.678 3.322-35.633 5.07-53.605 5.531-2.344 0.066-4.697 0.229-7.039 0.061 2.355-0.051 4.699-0.291 7.049-0.449 5.251-0.424 10.498-0.865 15.732-1.445 17.477-1.852 34.83-4.916 51.845-9.33 15.059-3.898 29.849-8.811 44.276-14.617 19.875-7.988 39.051-17.664 57.471-28.586 14.528-8.618 28.596-18.005 42.232-27.97z"/><path d="m516.82 760h6.729c-5.438 4.279-10.889 8.549-16.477 12.635-13.082 9.641-26.645 18.637-40.704 26.789-18.092 10.479-37.009 19.574-56.638 26.789-15.166 5.582-30.748 10.041-46.598 13.199-18.813 3.74-37.998 5.621-57.179 5.438-12.265-0.096-24.505-1.096-36.673-2.578-4.599-13.678-11.644-26.625-21.239-37.445-5.158-5.775-11.066-10.936-17.751-14.875-6.482-3.801-13.826-6.525-21.418-6.539-5.67-0.035-11.49 1.795-15.672 5.725-4.434 4.037-6.763 9.93-7.42 15.799-0.76 6.75 0.348 13.576 2.341 20.027 2.635 8.414 6.794 16.285 11.719 23.572 7.915 11.643 17.804 21.852 28.665 30.77 11.786 9.662 24.774 17.814 38.422 24.58 29.959 14.799 63.063 22.904 96.386 24.635 26.354 1.365 52.892-1.262 78.499-7.604 32.164-7.91 62.788-21.676 90.471-39.807 24.301-15.891 46.359-35.088 66.016-56.43 0.566-0.609 1.141-1.213 1.699-1.834v14.107c-16.682 17.842-35.088 34.111-55.107 48.125-24.549 17.225-51.574 30.996-80.129 40.221-19.853 6.422-40.419 10.658-61.206 12.484-33.438 2.965-67.464-0.311-99.618-10.004-16.035-4.844-31.607-11.264-46.294-19.322-12.701-6.969-24.756-15.154-35.735-24.615-11.453-9.9-21.811-21.189-29.927-34.002-4.907-7.789-9.006-16.148-11.554-25.016-2.16-7.521-3.186-15.492-2.033-23.277 0.9-6.084 3.365-12.068 7.669-16.539 3.55-3.748 8.313-6.262 13.354-7.305 5.749-1.227 11.763-0.725 17.406 0.801 7.027 1.916 13.567 5.35 19.478 9.568 6.236 4.471 11.801 9.838 16.688 15.744 9.44 11.428 16.402 24.797 20.939 38.881 4.752 0.25 9.505 0.457 14.262 0.582 18.375 0.508 36.804-0.508 54.977-3.303 29.658-4.512 58.545-13.559 85.824-25.984 31.377-14.258 60.627-32.894 87.828-53.992z"/><path d="m545.35 760h7.271c-21.403 19.834-44.563 37.867-69.617 52.877-17.156 10.283-35.189 19.135-53.933 26.135-29.89 11.17-61.681 17.598-93.636 17.648-18.27 0.014-36.578-2.033-54.285-6.59-12.528-3.25-24.78-7.734-36.203-13.848-1.51-3.283-3.377-6.396-5.436-9.363-2.803-3.932-6.057-7.66-10.138-10.303-1.775-1.08-3.752-2.078-5.882-2.035-1.26 0.004-2.533 0.678-3.098 1.828-0.725 1.473-0.578 3.197-0.253 4.756 0.812 3.395 2.572 6.475 4.53 9.334 3.999 5.715 9.06 10.604 14.432 15.018 11.472 9.268 24.607 16.307 38.271 21.762 16.131 6.395 33.121 10.523 50.323 12.705 33.109 4.166 66.973 1.059 99.055-7.955 19.229-5.387 37.846-12.885 55.557-22.098 25.965-13.484 49.928-30.654 71.687-50.18 13.78-12.375 26.714-25.684 38.827-39.691h7.176v1.453c-22.145 26.607-47.197 50.939-75.414 71.068-26.629 19.021-56.109 34.221-87.438 43.813-32.059 9.859-66.04 13.824-99.466 10.576-17.287-1.68-34.417-5.271-50.821-11.004-14.154-4.961-27.81-11.504-40.191-20.006-6.109-4.213-11.908-8.908-17.09-14.23-4.76-4.941-9.142-10.398-11.975-16.693-1.306-3.004-2.328-6.287-1.915-9.598 0.229-1.893 1.313-3.781 3.132-4.533 2.252-0.947 4.797-0.385 6.986 0.471 4.428 1.84 8.075 5.104 11.293 8.586 4.646 5.178 8.295 11.191 11.184 17.502 0.104 0.277 0.398 0.369 0.646 0.482 2.984 1.17 5.973 2.326 8.993 3.398 16.13 5.746 33.014 9.311 50.056 10.883 19.229 1.803 38.66 1.115 57.767-1.629 15.732-2.262 31.248-5.943 46.366-10.83 20.744-6.705 40.725-15.684 59.703-26.391 26.436-14.908 50.909-33.13 73.536-53.318z"/><path d="m560.5 760h7.564c-0.717 0.764-1.455 1.504-2.201 2.236-10.205 10.135-20.843 19.836-31.973 28.951-24.219 19.863-50.809 36.98-79.454 49.738-24.132 10.76-49.71 18.396-75.905 21.996-19.386 2.668-39.1 3.127-58.564 1.018-16.67-1.818-33.178-5.506-48.854-11.502-7.858-3.033-15.513-6.633-22.706-11.025-5.645-3.496-11.146-7.379-15.635-12.313-0.799-0.982-1.764-1.947-2.043-3.227 1.121 0.297 1.808 1.355 2.546 2.176 0.868 0.953 1.401 2.203 2.474 2.967 6.311 5.1 13.4 9.16 20.703 12.656 14.283 6.762 29.59 11.207 45.129 13.949 19.383 3.385 39.201 4.059 58.796 2.42 29.396-2.438 58.26-10.064 85.374-21.6 16.464-6.984 32.3-15.414 47.42-24.959 24.29-15.329 46.68-33.545 67.329-53.481z"/><path d="m576.3 760h7.992c-17.996 19.744-37.57 38.115-58.969 54.141-26.248 19.686-55.268 35.861-86.307 46.631-30.642 10.678-63.246 16.057-95.71 14.699-17.919-0.748-35.784-3.541-52.976-8.684-14.219-4.271-28.021-10.143-40.576-18.105-6.039-3.873-11.8-8.229-16.855-13.332-2.662-2.754-5.188-5.693-7.079-9.039-0.762-1.398-1.459-2.865-1.722-4.447-0.113-0.889-0.172-1.938 0.491-2.639 0.552-0.596 1.448-0.609 2.19-0.457 1.378 0.314 2.604 1.072 3.735 1.898 1.698 1.281 3.204 2.795 4.578 4.414 2.327 2.781 4.368 5.816 6.032 9.041-1.277-0.744-2.9-1.246-3.563-2.686-1.662-2.686-3.559-5.266-5.916-7.387-0.84-0.715-1.744-1.416-2.813-1.732-0.459-0.16-1.089-0.049-1.284 0.445-0.315 0.74 0.034 1.541 0.291 2.242 0.901 2.084 2.313 3.898 3.779 5.615 1.964 2.225 4.108 4.287 6.372 6.205 5.768 4.867 12.166 8.943 18.805 12.516 13.984 7.441 29.11 12.596 44.555 16.006 17.936 3.928 36.363 5.473 54.707 4.939 16.914-0.479 33.768-2.744 50.256-6.547 22.076-5.102 43.485-12.98 63.761-23.078 14.239-7.07 27.927-15.236 41.011-24.266 23.709-16.354 45.391-35.53 65.215-56.393z"/><path d="m195.92 762.65c5.979-0.533 12.016 0.193 17.813 1.676 7.807 2.057 15.188 5.545 21.953 9.926 11.195 7.271 20.746 16.896 28.562 27.682 8.875 12.264 15.509 26.092 19.893 40.566-1.716 0.025-3.432 0.117-5.147 0.072-3.901-12.666-9.721-24.758-17.323-35.621-8.118-11.527-18.335-21.766-30.596-28.85-7.157-4.104-15.048-7.121-23.286-8.01-6.697-0.725-13.668 0.045-19.796 2.953-5.593 2.596-10.294 6.994-13.38 12.32-3.951 6.746-5.46 14.689-5.346 22.443 0.086 7.426 1.573 14.785 3.86 21.832 3.356 10.227 8.411 19.836 14.425 28.74 4.209 6.24 8.915 12.139 13.969 17.715 9.705 10.68 20.693 20.156 32.479 28.469 12.495 8.814 25.897 16.32 39.854 22.559 30.4 13.551 63.423 21.053 96.654 22.473 24.777 1.061 49.693-1.24 73.869-6.771 31.344-7.133 61.391-19.682 88.764-36.5 24.508-15.045 46.928-33.418 66.861-54.119v15.658c-2.32 2.289-4.656 4.563-7.018 6.807-21.586 20.471-45.764 38.281-72.053 52.25-30.385 16.195-63.592 27.17-97.723 31.828-30.203 4.156-61.086 3.406-91.034-2.328-31.294-5.984-61.616-17.377-88.794-34.053-12.559-7.73-24.44-16.584-35.271-26.6-10.855-10.045-20.685-21.258-28.792-33.645-6.279-9.613-11.525-19.955-15.019-30.908-2.492-7.869-4.078-16.072-4.157-24.344-0.101-8.674 1.536-17.527 5.755-25.178 3.041-5.564 7.513-10.367 12.952-13.648 5.153-3.132 11.074-4.911 17.072-5.394z"/><path d="m539.73 831.16c22.155-17.27 42.21-37.154 60.271-58.65v11.346c-2.793 3.191-5.557 6.41-8.412 9.545-19.508 21.598-41.281 41.23-65.311 57.693-27.428 18.83-57.855 33.449-90.008 42.145-28.982 7.863-59.326 10.908-89.271 8.385-17.28-1.449-34.425-4.738-50.952-10-14.715-4.688-28.959-10.932-42.186-18.916-11.619-7.051-22.523-15.432-31.678-25.516-4.896-5.445-9.309-11.385-12.585-17.953-2.07-4.205-3.704-8.693-4.209-13.377-0.308-3.314-0.079-6.822 1.556-9.793 1.154-2.109 3.066-3.799 5.346-4.596 2.547-0.938 5.35-0.9 7.975-0.344 3.785 0.791 7.29 2.564 10.502 4.674 5.784 3.912 10.643 9.064 14.741 14.689 4.313 5.986 7.851 12.537 10.513 19.418-1.254-0.291-2.52-0.607-3.713-1.09-2.471-5.645-5.371-11.131-9.003-16.121-3.854-5.316-8.45-10.211-14.048-13.709-3.202-1.943-6.832-3.512-10.646-3.432-2.397 0.072-4.865 1.098-6.275 3.1-1.658 2.283-1.985 5.246-1.749 7.986 0.437 4.504 2.181 8.766 4.302 12.721 3.135 5.746 7.235 10.912 11.726 15.652 5.181 5.426 10.935 10.285 17.015 14.674 11.928 8.578 25.086 15.363 38.767 20.676 15.914 6.156 32.582 10.291 49.481 12.586 18.315 2.488 36.908 2.799 55.313 1.133 23.857-2.166 47.381-7.701 69.813-16.08 29.82-11.131 57.656-27.279 82.725-46.846z"/><path d="m200.58 792.96c3.047-2.193 6.817-3.182 10.537-3.273 4.065-0.068 8.097 0.867 11.875 2.322 6.856 2.693 12.924 7.088 18.229 12.145 5.531 5.332 10.25 11.469 14.207 18.043 3.674 6.166 6.779 12.688 9.096 19.482-0.171-0.012-0.515-0.031-0.685-0.041-0.57-0.34-1.241-0.348-1.808-0.004-0.609-0.154-1.211-0.32-1.816-0.484 0.096-0.623-0.205-1.191-0.419-1.752-3.97-10.135-9.479-19.74-16.753-27.873-4.896-5.41-10.584-10.24-17.218-13.375-3.655-1.725-7.64-2.881-11.702-2.908-2.741 0.025-5.527 0.621-7.897 2.039-2.543 1.488-4.487 3.891-5.595 6.604-1.068 2.543-1.446 5.318-1.479 8.059 0.053 5.174 1.387 10.254 3.315 15.029 2.775 6.83 6.754 13.113 11.274 18.914 8.512 10.832 18.974 20.016 30.266 27.855 12.404 8.57 25.885 15.533 39.916 21.029 14.916 5.842 30.464 10.021 46.258 12.648 18.811 3.107 37.977 4.037 57 2.811 23.138-1.451 46.059-6.031 68.05-13.352 29.302-9.736 56.899-24.344 81.873-42.461 23.2-16.78 44.13-36.56 62.9-58.14v12.707c-15.205 17.09-31.785 32.99-49.854 47.033-24.079 18.768-50.786 34.266-79.333 45.154-17.61 6.736-35.902 11.707-54.516 14.723-33.037 5.369-67.144 4.5-99.756-3.154-15.154-3.557-29.979-8.572-44.107-15.115-13.203-6.117-25.814-13.568-37.341-22.469-11.139-8.637-21.333-18.637-29.385-30.248-4.847-7.068-8.946-14.752-11.246-23.041-1.579-5.813-2.308-12.025-0.907-17.951 1.001-4.303 3.355-8.41 7.029-10.967z"/><path d="m0 917.02c1.59 3.621 3.148 7.26 4.826 10.842 11.352 24.436 25.541 47.52 41.89 68.926 17.644 23.102 37.783 44.285 59.837 63.213h-43.043c-2.193-2.289-4.482-4.484-6.646-6.801-21.491-22.3-40.659-46.8-56.861-73.18v-63z"/><path d="m520.6 1047.2c28.32-11.436 55.064-26.725 79.4-45.166v23.002c-18.617 13.494-38.482 25.289-59.342 34.973h-58.132c12.929-3.512 25.654-7.787 38.074-12.809z"/><path d="m0 1037.4c5.992 7.717 12.195 15.271 18.67 22.59h-18.67v-22.6z"/><path d="m584.31 1060c5.289-3.381 10.547-6.814 15.689-10.418v10.418h-15.689z"/></g><path d="m378.65 760h0.282c-0.536 1.137-0.962 2.322-1.432 3.484 0.27-1.193 0.79-2.316 1.15-3.484z"/><path d="m379.88 760c-1.679 3.523-3.309 7.07-4.917 10.625-0.185 0.248-0.284 0.627-0.622 0.697-0.431 0.971-1.014 1.951-1.021 3.041 0.663-1.117 1.254-2.277 1.813-3.449 1.875-3.662 3.809-7.297 5.768-10.914h-1.021z"/><path d="m530.8 760c-24.863 20.658-51.726 39.039-80.619 53.611-23.527 11.854-48.405 21.143-74.133 26.906-27.768 6.248-56.533 8.336-84.869 5.428-7.965-0.797-15.887-2.006-23.752-3.48-1.066-0.197-2.136-0.375-3.182-0.654-0.328-0.078-0.656-0.137-0.982-0.189 0.191 0 0.386 0.004 0.585 0.012-0.57-0.34-1.241-0.348-1.808-0.004 0.575 0.17 1.154 0.34 1.742 0.484 6.984 1.805 14.034 3.367 21.153 4.543 19.329 3.234 39.057 3.91 58.584 2.363 17.669-1.393 35.179-4.613 52.248-9.373 23.243-6.467 45.645-15.813 66.864-27.262 14.182-7.658 27.85-16.254 40.984-25.59 11.818-8.379 23.183-17.387 34.193-26.795h-7.008z"/></g></svg>\n' }, oe = ({ background: t3, backgroundPattern: a2 }) => {
          let r2 = void 0 === a2 ? "spiral" : a2;
          return (0, e2.jsx)("div", Object.assign({ className: le["payment-card-background"], style: { background: t3 || "linear-gradient( 135deg, #FF9D6C 10%, #BB4E75 100%)" } }, { children: (0, e2.jsx)("div", { className: n()(le["svg-background"], r2 && le[r2]), dangerouslySetInnerHTML: { __html: r2 ? ce[r2] : "" } }, void 0) }), void 0);
        };
        var de = a(383);
        l()(de.Z, { insert: "head", singleton: false });
        const ie = de.Z.locals || {}, Ae = ({ icon: t3 }) => (0, e2.jsx)("div", Object.assign({ className: ie["issuer-icon"] }, { children: void 0 === t3 ? null : "string" == typeof t3 ? (0, e2.jsx)("img", { src: t3 }, void 0) : t3 }), void 0);
        var me = a(584);
        l()(me.Z, { insert: "head", singleton: false });
        const Ce = me.Z.locals || {}, pe = ({ number: t3 }) => (0, e2.jsx)("div", Object.assign({ className: Ce["payment-card-number"] }, { children: t3 }), void 0);
        var fe = a(277);
        l()(fe.Z, { insert: "head", singleton: false });
        const ue = fe.Z.locals || {}, he = () => (0, e2.jsx)("div", Object.assign({ className: ue["chip-container"] }, { children: (0, e2.jsx)("span", { className: ue.chip }, void 0) }), void 0);
        var ge = a(489);
        l()(ge.Z, { insert: "head", singleton: false });
        const ye = ge.Z.locals || {}, be = ({ date: t3 }) => (0, e2.jsxs)("div", Object.assign({ className: ye["payment-card-date"] }, { children: [(0, e2.jsx)("div", Object.assign({ className: ye["valid-date"] }, { children: "Valid dates" }), void 0), (0, e2.jsx)("div", Object.assign({ className: ye["to-date"] }, { children: t3 }), void 0)] }), void 0);
        var ve = a(560);
        l()(ve.Z, { insert: "head", singleton: false });
        const xe = ve.Z.locals || {}, _e = ({ name: t3 }) => (0, e2.jsx)("div", Object.assign({ className: xe["payment-card-name"] }, { children: t3 }), void 0);
        var we = a(164);
        l()(we.Z, { insert: "head", singleton: false });
        const je = we.Z.locals || {}, Be = ({ cvv: t3 }) => (0, e2.jsxs)("div", Object.assign({ className: je["payment-card-back"] }, { children: [(0, e2.jsx)("span", { className: je["magnetic-stripe"] }, void 0), (0, e2.jsx)("div", Object.assign({ className: je["signature-field"] }, { children: (0, e2.jsx)("span", Object.assign({ className: je.cvv }, { children: t3 }), void 0) }), void 0)] }), void 0);
        var ke = a(745);
        l()(ke.Z, { insert: "head", singleton: false });
        const Ee = ke.Z.locals || {};
        const Pe = (t3) => {
          var { className: a2, background: r2, backgroundPattern: s2, issuerIcon: l2, number: c2, date: o2, name: d2, cvv: i2 } = t3, A2 = function(e3, t4) {
            var a3 = {};
            for (var r3 in e3)
              Object.prototype.hasOwnProperty.call(e3, r3) && t4.indexOf(r3) < 0 && (a3[r3] = e3[r3]);
            if (null != e3 && "function" == typeof Object.getOwnPropertySymbols) {
              var n2 = 0;
              for (r3 = Object.getOwnPropertySymbols(e3); n2 < r3.length; n2++)
                t4.indexOf(r3[n2]) < 0 && Object.prototype.propertyIsEnumerable.call(e3, r3[n2]) && (a3[r3[n2]] = e3[r3[n2]]);
            }
            return a3;
          }(t3, ["className", "background", "backgroundPattern", "issuerIcon", "number", "date", "name", "cvv"]);
          return (0, e2.jsxs)(V, Object.assign({ className: n()(Ee["payment-card"], a2) }, A2, { children: [(0, e2.jsxs)(te, { children: [(0, e2.jsx)(oe, { background: r2, backgroundPattern: s2 }, void 0), (0, e2.jsx)(Ae, { icon: l2 }, void 0), (0, e2.jsx)(he, {}, void 0), (0, e2.jsx)(pe, { number: c2 }, void 0), (0, e2.jsx)(be, { date: o2 }, void 0), (0, e2.jsx)(_e, { name: d2 }, void 0)] }, void 0), (0, e2.jsxs)(ne, { children: [(0, e2.jsx)(oe, { background: r2, backgroundPattern: null }, void 0), (0, e2.jsx)(Be, { cvv: i2 }, void 0)] }, void 0)] }), void 0);
        };
        var Oe = a(571);
        l()(Oe.Z, { insert: "head", singleton: false });
        const Ne = Oe.Z.locals || {}, Ie = ({ thumbnail: t3, href: a2 }) => (0, e2.jsx)("a", Object.assign({ href: a2, className: Ne["recipe-card-content"] }, { children: (0, e2.jsx)("div", Object.assign({ className: Ne.thumbnail }, { children: (0, e2.jsx)("div", { style: { backgroundImage: `url(${t3})` } }, void 0) }), void 0) }), void 0), Re = require_lib();
        var ze = a.n(Re), Ze = a(140);
        l()(Ze.Z, { insert: "head", singleton: false });
        const Ue = Ze.Z.locals || {}, Fe = ({ title: t3, time: a2, servings: r2, likeCallback: n2 }) => (0, e2.jsxs)("div", Object.assign({ className: Ue["recipe-card-desc"] }, { children: [(0, e2.jsx)("div", Object.assign({ className: Ue.title }, { children: t3 }), void 0), (0, e2.jsx)("a", Object.assign({ className: Ue.heart, onClick: n2 }, { children: (0, e2.jsx)(ze(), { name: "heart-o" }, void 0) }), void 0), (0, e2.jsxs)("div", Object.assign({ className: Ue.time }, { children: [(0, e2.jsx)(ze(), { name: "hourglass-half" }, void 0), a2] }), void 0), (0, e2.jsxs)("div", Object.assign({ className: Ue.servings }, { children: [(0, e2.jsx)(ze(), { name: "user-o" }, void 0), r2] }), void 0)] }), void 0);
        var He = a(969);
        l()(He.Z, { insert: "head", singleton: false });
        const De = He.Z.locals || {};
        const Ye = (t3) => {
          var { className: a2, href: r2, thumbnail: s2, likeCallback: l2, title: c2, time: o2, servings: i2 } = t3, A2 = function(e3, t4) {
            var a3 = {};
            for (var r3 in e3)
              Object.prototype.hasOwnProperty.call(e3, r3) && t4.indexOf(r3) < 0 && (a3[r3] = e3[r3]);
            if (null != e3 && "function" == typeof Object.getOwnPropertySymbols) {
              var n2 = 0;
              for (r3 = Object.getOwnPropertySymbols(e3); n2 < r3.length; n2++)
                t4.indexOf(r3[n2]) < 0 && Object.prototype.propertyIsEnumerable.call(e3, r3[n2]) && (a3[r3[n2]] = e3[r3[n2]]);
            }
            return a3;
          }(t3, ["className", "href", "thumbnail", "likeCallback", "title", "time", "servings"]);
          return (0, e2.jsxs)(d, Object.assign({ className: n()(De["recipe-card"], a2) }, A2, { children: [(0, e2.jsx)(Ie, { href: r2, thumbnail: s2 }, void 0), (0, e2.jsx)(Fe, { title: c2, time: o2, servings: i2, likeCallback: l2 }, void 0)] }), void 0);
        };
        var Ge = a(927);
        l()(Ge.Z, { insert: "head", singleton: false });
        const Le = Ge.Z.locals || {}, Se = ({ title: t3, author: a2, date: r2, tags: n2 }) => (0, e2.jsxs)("div", Object.assign({ className: Le["news-header"] }, { children: [(0, e2.jsx)("div", Object.assign({ className: Le.title }, { children: t3 }), void 0), (0, e2.jsxs)("div", Object.assign({ className: Le.bottom }, { children: [(0, e2.jsx)("div", Object.assign({ className: Le.author }, { children: a2 }), void 0), (0, e2.jsx)("div", Object.assign({ className: Le.date }, { children: r2 }), void 0)] }), void 0), (0, e2.jsx)("div", Object.assign({ className: Le.tags }, { children: n2 && n2.map((t4, a3) => (0, e2.jsx)("span", Object.assign({ className: Le.tag }, { children: "function" == typeof t4 ? t4() : t4 }), a3)) }), void 0)] }), void 0);
        var Te = a(201);
        l()(Te.Z, { insert: "head", singleton: false });
        const Me = Te.Z.locals || {}, qe = ({ thumbnail: t3 }) => (0, e2.jsxs)("div", Object.assign({ className: Me["news-header-background"] }, { children: [(0, e2.jsx)("div", { className: Me.overlay }, void 0), (0, e2.jsx)("div", Object.assign({ className: Me.thumbnail }, { children: (0, e2.jsx)("div", { style: { backgroundImage: `url(${t3})` } }, void 0) }), void 0)] }), void 0);
        var We = a(165);
        l()(We.Z, { insert: "head", singleton: false });
        const Je = We.Z.locals || {};
        const Qe = (t3) => {
          var { className: a2, href: r2, hrefTarget: s2 = "_self", title: l2, author: c2, date: o2, tags: i2, thumbnail: A2 } = t3, m2 = function(e3, t4) {
            var a3 = {};
            for (var r3 in e3)
              Object.prototype.hasOwnProperty.call(e3, r3) && t4.indexOf(r3) < 0 && (a3[r3] = e3[r3]);
            if (null != e3 && "function" == typeof Object.getOwnPropertySymbols) {
              var n2 = 0;
              for (r3 = Object.getOwnPropertySymbols(e3); n2 < r3.length; n2++)
                t4.indexOf(r3[n2]) < 0 && Object.prototype.propertyIsEnumerable.call(e3, r3[n2]) && (a3[r3[n2]] = e3[r3[n2]]);
            }
            return a3;
          }(t3, ["className", "href", "hrefTarget", "title", "author", "date", "tags", "thumbnail"]);
          return (0, e2.jsx)("a", Object.assign({ href: r2, target: s2 }, { children: (0, e2.jsxs)(d, Object.assign({ className: n()(Je["news-header-card"], a2) }, m2, { children: [(0, e2.jsx)(qe, { thumbnail: A2 }, void 0), (0, e2.jsx)(Se, { title: l2, author: c2, date: o2, tags: i2 }, void 0)] }), void 0) }), void 0);
        };
        var Ke = a(615);
        l()(Ke.Z, { insert: "head", singleton: false });
        const Xe = Ke.Z.locals || {}, Ve = ({ currencyName: t3, currencyPrice: a2 }) => (0, e2.jsxs)("div", Object.assign({ className: Xe["crypto-card-title-line"] }, { children: [(0, e2.jsx)("div", Object.assign({ className: Xe["currency-name"] }, { children: t3 }), void 0), (0, e2.jsx)("div", Object.assign({ className: Xe["currency-price"] }, { children: a2 }), void 0)] }), void 0);
        var $e = a(781);
        l()($e.Z, { insert: "head", singleton: false });
        const et = $e.Z.locals || {}, tt = ({ icon: t3, currencyShortName: a2, trend: r2, trendDirection: s2 }) => (0, e2.jsxs)("div", Object.assign({ className: et["crypto-card-icon-line"] }, { children: [(0, e2.jsxs)("div", Object.assign({ className: et.left }, { children: [(0, e2.jsx)("div", Object.assign({ className: et["crypto-icon"] }, { children: t3 }), void 0), (0, e2.jsx)("div", Object.assign({ className: et["crypto-short-name"] }, { children: a2 }), void 0)] }), void 0), (0, e2.jsx)("div", Object.assign({ className: et.right }, { children: (0, e2.jsxs)("div", Object.assign({ className: n()(et.trend, { [`${et.green}`]: s2 > 0 }, { [`${et.yellow}`]: 0 === s2 }, { [`${et.red}`]: s2 < 0 }) }, { children: [r2, " ", s2 > 0 ? "▲" : s2 < 0 ? "▼" : "="] }), void 0) }), void 0)] }), void 0), at = require_es(), rt = { datasets: { borderColor: "rgba(241, 196, 15, 1)", borderCapStyle: "round", borderJoinStyle: "round", lineTension: 0.4, xAxisId: "x-0", yAxisID: "y-0", pointRadius: 0, pointHoverRadius: 0, fill: true, showLine: true }, options: { legend: { display: false }, tooltip: { enabled: false }, scales: { yAxes: [{ id: "y-0", display: false, type: "linear", gridLines: { display: false } }], xAxes: [{ id: "x-0", display: false, gridLines: { display: false } }] }, responsive: true } };
        var nt = a(297);
        l()(nt.Z, { insert: "head", singleton: false });
        const st = nt.Z.locals || {}, lt = ({ chartColor: t3, chartData: a2 }) => {
          let r2 = { datasets: [Object.assign(Object.assign({}, rt.datasets), { data: a2 })], labels: Object.keys(a2) };
          return (0, e2.jsx)("div", Object.assign({ className: st["crypto-chart"] }, { children: (0, e2.jsx)(at.Line, { data: (e3) => {
            const a3 = null == e3 ? void 0 : e3.getContext("2d"), n2 = null == a3 ? void 0 : a3.createLinearGradient(50, 0, 50, 1.1 * e3.height);
            null == n2 || n2.addColorStop(0, "rgba(236, 240, 241, 0.1)"), null == n2 || n2.addColorStop(1, "rgba(236, 240, 241, 0)");
            let s2 = r2.datasets[0];
            return s2.borderColor = null != t3 ? t3 : s2.borderColor, s2.backgroundColor = n2, r2;
          }, options: rt.options, height: 128 }, void 0) }), void 0);
        };
        var ct = a(149);
        l()(ct.Z, { insert: "head", singleton: false });
        const ot = ct.Z.locals || {};
        const dt = (t3) => {
          var { className: a2, currencyName: r2, currencyPrice: s2, icon: l2, currencyShortName: c2, trend: o2, trendDirection: i2, chartColor: A2, chartData: m2 } = t3, C2 = function(e3, t4) {
            var a3 = {};
            for (var r3 in e3)
              Object.prototype.hasOwnProperty.call(e3, r3) && t4.indexOf(r3) < 0 && (a3[r3] = e3[r3]);
            if (null != e3 && "function" == typeof Object.getOwnPropertySymbols) {
              var n2 = 0;
              for (r3 = Object.getOwnPropertySymbols(e3); n2 < r3.length; n2++)
                t4.indexOf(r3[n2]) < 0 && Object.prototype.propertyIsEnumerable.call(e3, r3[n2]) && (a3[r3[n2]] = e3[r3[n2]]);
            }
            return a3;
          }(t3, ["className", "currencyName", "currencyPrice", "icon", "currencyShortName", "trend", "trendDirection", "chartColor", "chartData"]);
          return (0, e2.jsxs)(d, Object.assign({ className: n()(ot["crypto-card"], a2) }, C2, { children: [(0, e2.jsx)(Ve, { currencyName: r2, currencyPrice: s2 }, void 0), (0, e2.jsx)(tt, { icon: l2, currencyShortName: c2, trend: o2, trendDirection: i2 }, void 0), (0, e2.jsx)(lt, { chartColor: A2, chartData: m2 }, void 0)] }), void 0);
        };
      })(), r;
    })());
  }
});
export default require_dist();
/*! Bundled license information:

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

moment/dist/moment.js:
  (*! moment.js *)
  (*! version : 2.29.4 *)
  (*! authors : Tim Wood, Iskren Chernev, Moment.js contributors *)
  (*! license : MIT *)
  (*! momentjs.com *)

chart.js/dist/Chart.js:
  (*!
   * Chart.js v2.9.4
   * https://www.chartjs.org
   * (c) 2020 Chart.js Contributors
   * Released under the MIT License
   *)
*/
//# sourceMappingURL=react-ui-cards.js.map
